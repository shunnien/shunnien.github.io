<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[PowerShell 美化配置]]></title>
    <url>%2F2019%2F06%2F28%2Fpowershell-theme-and-font%2F</url>
    <content type="text"><![CDATA[PowerShell 美化配置powershell 是 windows 目前很好用的工具，可以調整一些設定與安裝一些模組功能來美化它。 Terminal 與 Shell Windows 的命令提示字元 (Command Prompt)，實際上就是打開了一個終端 (Terminal) 在終端裡面輸入命令，得到結果的互動程式，就是命令行解釋器 (Shell) 主題樣式個人推薦的主題樣式是 oh-my-posh，此主題類似 Mac OS X 的 oh-my-zsh，不過因為 oh-my-posh 有部分的指令倚賴 post-git，所以需要兩者都安裝。注意需要使用系統管理員權限啟動 powershell 來安裝，安裝指令如下： 123Install-Module posh-git -Scope CurrentUserInstall-Module oh-my-posh -Scope CurrentUserSet-Theme Paradox 安裝好之後，不滿意 Paradox 樣式的話，可以自行更換，oh-my-posh 提供了 10 個主題樣式，只要在 PowerShell 中輸入 Theme 就可以查看有哪些主題樣式 123456789101112131415❯ themeName Type Location---- ---- --------Agnoster Defaults C:\Program Files\WindowsPowerShell\Modules\oh-my-posh\2.0.263\Themes\Agnoster.psm1Avit Defaults C:\Program Files\WindowsPowerShell\Modules\oh-my-posh\2.0.263\Themes\Avit.psm1Darkblood Defaults C:\Program Files\WindowsPowerShell\Modules\oh-my-posh\2.0.263\Themes\Darkblood.psm1Fish Defaults C:\Program Files\WindowsPowerShell\Modules\oh-my-posh\2.0.263\Themes\Fish.psm1Honukai Defaults C:\Program Files\WindowsPowerShell\Modules\oh-my-posh\2.0.263\Themes\Honukai.psm1Paradox Defaults C:\Program Files\WindowsPowerShell\Modules\oh-my-posh\2.0.263\Themes\Paradox.psm1PowerLine Defaults C:\Program Files\WindowsPowerShell\Modules\oh-my-posh\2.0.263\Themes\PowerLine.psm1pure Defaults C:\Program Files\WindowsPowerShell\Modules\oh-my-posh\2.0.263\Themes\pure.psm1robbyrussell Defaults C:\Program Files\WindowsPowerShell\Modules\oh-my-posh\2.0.263\Themes\robbyrussell.psm1Sorin Defaults C:\Program Files\WindowsPowerShell\Modules\oh-my-posh\2.0.263\Themes\Sorin.psm1tehrob Defaults C:\Program Files\WindowsPowerShell\Modules\oh-my-posh\2.0.263\Themes\tehrob.psm1 想要更換主題樣式的話，設定指令如下，Set-Theme 指令後接上想要設定主題樣式名稱 1Set-Theme Darkblood 設定每次啟用 Powershell 的主題上述設定完成後，現在使用的 PowerShell 畫面變漂亮了，但是 PowerShell 每次執行都是原始介面，所以需要設定，以下是設定步驟 新增或修改 $profile 檔案先開啟 powershell 輸入以下指令 1234# 如果之前沒有檔案，就建立一個新檔案if (!(Test-Path -Path $PROFILE )) &#123; New-Item -Type File -Path $PROFILE -Force &#125;# 用 vscode 開啟檔案code $profile 上述指令會建立 profile 檔案，但是需要注意的是，使用管理者權限執行的路徑與現在使用者的 profile 路徑不同，在 powershell 內，$profile 預設就是目前使用者的路徑(等同 $profile.CurrentUserCurrentHost )，一共有四種選擇，但是檔案路徑組合(32位元與64位元的搭配)會有多達 9 種，有興趣的可以參考此篇文章 $profile.CurrentUserAllHosts $profile.CurrentUserCurrentHost $profile.AllUsersAllHosts $profile.AllUsersCurrentHost 123456❯ $PROFILE | Select-Object -Property *AllUsersAllHosts : C:\Windows\System32\WindowsPowerShell\v1.0\profile.ps1AllUsersCurrentHost : C:\Windows\System32\WindowsPowerShell\v1.0\Microsoft.PowerShell_profile.ps1CurrentUserAllHosts : C:\Users\Shunnien Yu\Documents\WindowsPowerShell\profile.ps1CurrentUserCurrentHost : C:\Users\Shunnien Yu\Documents\WindowsPowerShell\Microsoft.PowerShell_profile.ps1Length : 81 想要設定為不管是否使用管理者權限執行都是相同的畫面的話，需要設定 AllUsersAllHosts ，設定這個檔案後，其他檔案就可以不用設定了，網路上有可以參考的設定範本，以下是我自己的設定 123456789101112131415chcp 65001Set-PSReadlineOption -EditMode Emacsfunction which($name) &#123; Get-Command $name | Select-Object Definition &#125;function rmrf($item) &#123; Remove-Item $item -Recurse -Force &#125;function mkfile($file) &#123; "" | Out-File $file -Encoding ASCII &#125;function getMyDoc() &#123; Set-Location "C:\Users\Shunnien Yu\Documents\" &#125;function getGitOneLineGraphLog() &#123; git log --oneline --all --graph --decorate &#125;Import-Module posh-gitImport-Module oh-my-poshImport-Module Get-ChildItemColorSet-Alias l Get-ChildItemColor -option AllScopeSet-Alias ls Get-ChildItemColorFormatWide -option AllScopeSet-Alias ... getMyDoc -option AllScopeSet-Alias ggl getGitOneLineGraphLog -option AllScopeSet-Theme PowerLine 字型設定為上述的檔案後，powershell 在有 git 版控的資料夾路徑時，會使用 PowerLine 字體，但是由於目前的字型不支援會像下圖 所以需要裝有支援 PowerLine 的字型，我個人使用 Sarasa Gothic (更纱黑体 / 更紗黑體 / 更紗ゴシック) 字型，可以由Sarasa Gothic 字型的 Github Release 下載 之後直接在 Powershell 的 Properties 內設定字型，我個人使用 Sarasa Term TC 設定好之後，powershell 的畫面中就可以顯示符號 PowerShell 配色都設定好之後，如果對於 powershell 的配色不滿意的話，可以安裝 ColorTool 這個微軟提供的工具，安裝方式直接下載 Release，解壓縮後的資料夾路徑加入倒環境變數中，直接就可以執行指令 colortool想添加新的樣式的話，可以上 iTerm2-Color-Schemes 尋找符合各自需求的樣式，加入至 schemes 資料夾內即可；假如是透過 chocolatey 安裝的話，添加樣式的路徑在 C:\ProgramData\chocolatey\lib\colortool\content\schemes 參考資料 告别 Windows 终端的难看难用，从改造 PowerShell 的外观开始 5 个 PowerShell 主题，让你的 Windows 终端更好看 超酷的 PowerShell 美化指南 配置命令行界面的初始化配置 Github posh-git Github oh-my-posh PowerShell 美化指南 Github Sarasa Gothic (更纱黑体 / 更紗黑體 / 更紗ゴシック) 字型 Github Microsoft ColorTool download Github Microsoft ColorTool PowerShell profiles]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>powershell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[解決 Microsoft.SqlServer.Types 參考使用的問題]]></title>
    <url>%2F2019%2F06%2F24%2FMicrosoft-SqlServer-Types-assembly%2F</url>
    <content type="text"><![CDATA[解決 Microsoft.SqlServer.Types 參考使用的問題透過 Entity Framework 使用 SQL Server 的空間資料 (DbGeography) 相當便利，但是需要 Microsoft.SqlServer.Types 參考，而有時參考後又出現問題。 Exception 訊息： System.InvalidOperationException HResult=0x80131509 Message=Spatial types and functions are not available for this provider because the &gt; assembly ‘Microsoft.SqlServer.Types’ version 10 or higher could not be found. Source=EntityFramework.SqlServer Microsoft.SqlServer.Types 安裝透過 Nuget 安裝 Microsoft.SqlServer.Types 套件，可以透過介面安裝或是透過指令安裝，安裝指令如下： 1Install-Package Microsoft.SqlServer.Types 安裝好之後，請仔細閱讀 readme.htm ，其中說明如何將套件註冊進程式中 ASP.NET Web Sites在 Web Form 中，開啟 Default.aspx.cs 12345678910111213public partial class _Default : System.Web.UI.Page&#123; static bool _isSqlTypesLoaded = false; public _Default() &#123; if (!_isSqlTypesLoaded) &#123; SqlServerTypes.Utilities.LoadNativeAssemblies(Server.MapPath("~")); _isSqlTypesLoaded = true; &#125; &#125;&#125; ASP.NET Web Applications開啟 Global.asax.cs 添加以下程式碼： 1SqlServerTypes.Utilities.LoadNativeAssemblies(Server.MapPath("~/bin")); Desktop Applications在執行空間操作前執行以下程式碼： 1SqlServerTypes.Utilities.LoadNativeAssemblies(AppDomain.CurrentDomain.BaseDirectory); 解決引用錯誤就如同此文一開始所提到的 exception，按照Microsoft.SqlServer.Types套件的說明註冊引用，有時還是會出現問題，可能是 Entity Framework 版本因素或是伺服器沒有對應版本的Microsoft.SqlServer.Types或是沒有註冊引用到；stack overflow 此篇的討論方法可以解決我此次遇到的問題 方法一 添加參照 1SqlProviderServices.SqlServerTypesAssemblyName = Assembly.GetAssembly(typeof(Microsoft.SqlServer.Types.SqlGeography)).FullName; 方法二 直接在 config 檔案中進行參照，需要注意版本號 123456&lt;assemblyBinding&gt; &lt;dependentAssembly&gt; &lt;assemblyIdentity name="Microsoft.SqlServer.Types" publicKeyToken="89845dcd8080cc91" culture="neutral" /&gt; &lt;bindingRedirect oldVersion="10.0.0.0-11.0.0.0" newVersion="14.0.0.0" /&gt; &lt;/dependentAssembly&gt; &lt;/assemblyBinding&gt; 取得 PublicKeyToken[Microsoft.SqlServer.Types] 的 DLL 的路徑，可以從以下路徑查找 1C:\Windows\assembly\GAC_MSIL\Microsoft.SqlServer.Types 根據以上的 DLL 取得 PublicKeyToken 的方式，可以透過 powershell 1([system.reflection.assembly]::loadfile("c:\MyDLL.dll")).FullName 參考資料 stack overflow how use Microsoft.SqlServer.Types in WCF Service Application Github EntityFramework6 issue #244 Mismatch using Microsoft.SqlServer.Types solving spatial types and functions are not available with entity framework find publickeytoken Microsoft.SqlServer.Types 找不到正確版本問題]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>Asp.Net MVC</tag>
        <tag>Troubleshooting</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Sqlserver 停用與啟用條件約束]]></title>
    <url>%2F2019%2F02%2F26%2Fsqlserver-diable-constraint%2F</url>
    <content type="text"><![CDATA[sqlserver 停用與啟用條件約束紀錄停用與啟用條件約束的 sql ，還有檢查目前資料表條件約束的語法 語法全部條件約束停用 123-- 全部條件約束停用EXEC sp_MSforeachtable "ALTER TABLE ? NOCHECK CONSTRAINT ALL"GO 刪除全部資料表資料 123-- 刪除全部資料表資料EXEC sp_MSForEachTable "DELETE FROM ?"GO 全部資料表增值索引重設 123-- 全部資料表增值索引重設EXEC sp_MSforeachtable "DBCC CHECKIDENT('?', RESEED, 0)"Go 全部條件約束啟用 123-- 全部條件約束啟用EXEC sp_MSforeachtable "ALTER TABLE ? WITH NOCHECK CHECK CONSTRAINT ALL"GO 檢查目前資料表條件約束狀態的語法 1234567891011121314151617181920212223SELECT f.NAME N'物件名稱', is_disabled N'已停用(1)', is_not_trusted N'不檢查現有資料(1)', s.NAME N'結構描述', o.NAME N'外部索引資料表', sc.NAME N'結構描述', r.NAME N'主索引資料表', delete_referential_action_desc N'在進行刪除時，宣告的參考動作之描述', update_referential_action_desc N'在進行更新時，宣告的參考動作之描述', f.type_desc N'物件描述'FROM sys.foreign_keys f INNER JOIN sys.objects o ON f.parent_object_id = o.object_id INNER JOIN sys.schemas s ON o.schema_id = s.schema_id INNER JOIN sys.objects r ON f.referenced_object_id = r.object_id INNER JOIN sys.schemas sc ON r.schema_id = sc.schema_idORDER BY o.NAMEGO 參考資料 德瑞克：SQL Server 學習筆記 microsoft docs]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>SQLServer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IIS 應用程式設定資料夾權限]]></title>
    <url>%2F2019%2F02%2F04%2FGranting-folder-permissions-to-IIS-application-pools%2F</url>
    <content type="text"><![CDATA[IIS 應用程式設定資料夾權限在 windows 環境針對 IIS 應用程式集區設定的應用程式設定資料夾權限，設定方法很簡易，紀錄一下資料。 簡介當建立新的應用程式集區時，IIS 都會建立一個安全性識別碼 (SID)，表示此建立的應用程式集區。但是此識別不是真實的帳戶，所以不會在控制台顯示。以下方法，假定應用程式區建立完畢。 方法 1直接針對資料夾設定權限，在 windows 中，直接透過介面操作 在需要設定權限的資料夾上點擊滑鼠右鍵 選擇屬性(Properties) 在屬性畫面中，選擇安全性(Security)，在按下編輯(Edit…) 在 Permissions 視窗中，點擊新增(Add…) 在輸入要選擇的對象名稱的輸入框中輸入 IIS AppPool\myAppPoolName。例如：IIS AppPool\temp 輸入後，點擊檢查名稱，然後按下確定 方法 2透過 ICACLS 工具來使用 command line 來設定權限，以下範例為設定 D:\temp 此資料夾 1ICACLS "D:\temp" /grant "IIS AppPool\temp":M /t 參考資料 pkware Granting folder permissions to IIS application pools]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>IIS</tag>
        <tag>other</tag>
        <tag>security</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GoogleMap Polyline 線]]></title>
    <url>%2F2018%2F10%2F04%2FGoogleMap-draw-line%2F</url>
    <content type="text"><![CDATA[GoogleMap Polyline透過 GoogleMap 操作 polyline 的顯示，不管是要顯示線，或是編輯線，繪製線等，使用 polyline 就可以操作 polylineGoogle 提供了簡單的範例與詳細的參考文件，使用上也很簡易，需要注意在 HTML 中宣告使用地圖的 div 要設定明確大小(css 設定的大小) 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta name="viewport" content="initial-scale=1.0, user-scalable=no"&gt; &lt;meta charset="utf-8"&gt; &lt;title&gt;Simple Polylines&lt;/title&gt; &lt;style&gt; /* Always set the map height explicitly to define the size of the div * element that contains the map. */ #map &#123; height: 100%; &#125; /* Optional: Makes the sample page fill the window. */ html, body &#123; height: 100%; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div id="map"&gt;&lt;/div&gt; &lt;script&gt; function initMap() &#123; var map = new google.maps.Map(document.getElementById('map'), &#123; zoom: 3, center: &#123;lat: 24.977179, lng: 121.312848&#125;, mapTypeId: 'ROADMAP', zoom: 13, &#125;); var bikeLaneCoordinates = [ &#123;lat: 24.977685, lng: 121.310424&#125;, &#123;lat: 24.977179, lng: 121.312848&#125;, &#123;lat: 24.977879, lng: 121.317708&#125;, &#123;lat: 24.978132, lng: 121.319951&#125; ]; var bikeLanePath = new google.maps.Polyline(&#123; path: bikeLaneCoordinates, geodesic: true, strokeColor: '#FF0000', strokeOpacity: 1.0, strokeWeight: 2, editable: true, draggable: true &#125;); bikeLanePath.setMap(map); // no display polyline //bikeLanePath.setMap(null); &#125; &lt;/script&gt; &lt;script async defer src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&amp;callback=initMap"&gt; &lt;/script&gt; &lt;/body&gt;&lt;/html&gt; google.maps.Polyline 屬性說明 path : 線條的座標點集合陣列 strokeColor : 線條顏色 strokeOpacity : 線條透明度 strokeWeight : 線條粗細 editable : 可以編輯，值為 true 或是 false draggable : 是否可以拖動，值為 true 或是 false 線上範例 參考資料 Google simple polyline example]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>Google Map</tag>
        <tag>Google</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IIS 的 CORS 設定]]></title>
    <url>%2F2018%2F10%2F03%2FCORS-in-IIS-setting%2F</url>
    <content type="text"><![CDATA[IIS 的 CORS 設定說明在 IIS 設如何設定 CORS 內文在 IIS 中，透過 web.config 直接設定 header ，針對 header 添加 Access-Control-Allow-Origin 此屬性即可，但是此種設定只能針對一組 Domain 設定，或是全開放；設定範例如下： 1234567891011121314&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;configuration&gt; &lt;system.webServer&gt; &lt;httpProtocol&gt; &lt;customHeaders&gt; &lt;!-- 全部開放 --&gt; &lt;!-- &lt;add name="Access-Control-Allow-Origin" value="*" /&gt; --&gt; &lt;!-- 指定一個Domain --&gt; &lt;add name="Access-Control-Allow-Origin" value="http://localhost:21259"/&gt; &lt;/customHeaders&gt; &lt;/httpProtocol&gt; &lt;/system.webServer&gt;&lt;/configuration&gt; 另一種則是為 IIS 安裝 cors 模組，其設定變得更方便，官方文件 123456789101112131415161718192021222324&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;configuration&gt; &lt;system.webServer&gt; &lt;cors enabled="true" failUnlistedOrigins="true"&gt; &lt;add origin="*" /&gt; &lt;add origin="https://*.microsoft.com" allowCredentials="true" maxAge="120"&gt; &lt;allowHeaders allowAllRequestedHeaders="true"&gt; &lt;add header="header1" /&gt; &lt;add header="header2" /&gt; &lt;/allowHeaders&gt; &lt;allowMethods&gt; &lt;add method="DELETE" /&gt; &lt;/allowMethods&gt; &lt;exposeHeaders&gt; &lt;add header="header1" /&gt; &lt;add header="header2" /&gt; &lt;/exposeHeaders&gt; &lt;/add&gt; &lt;add origin="http://*" allowed="false" /&gt; &lt;/cors&gt; &lt;/system.webServer&gt;&lt;/configuration&gt; 參考資料 MDN CORS Enable CORS IIS microsoft cors module IIS CORS Module Download topcat xdomain.js 多組(Multiple) 跨 Domain 另一作法]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>IIS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[透過 X2js 自由轉換 XML 與 Json]]></title>
    <url>%2F2018%2F09%2F29%2Fjavascript-xml2json%2F</url>
    <content type="text"><![CDATA[x2js在前端中，有許多工具可以轉換 XML 與 JSON ，此篇介紹 x2js 使用方式可以使用 CDN 方式， x2js CDN 或是手動引入 1&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/x2js/1.2.0/xml2json.min.js&quot; integrity=&quot;sha256-RbFvov4fXA9DW/RzOAcIC0ZHIDmghGdsoug5slJHMMI=&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt; 基本語法 XML to JSON 1234// Create x2js instance with default configvar x2js = new X2JS();var xmlText = "&lt;MyRoot&gt;&lt;test&gt;Success&lt;/test&gt;&lt;test2&gt;&lt;item&gt;val1&lt;/item&gt;&lt;item&gt;val2&lt;/item&gt;&lt;/test2&gt;&lt;/MyRoot&gt;";var jsonObj = x2js.xml_str2json( xmlText ); JSON to XML 1234567891011// Create x2js instance with default configvar x2js = new X2JS();var jsonObj = &#123; MyRoot : &#123; test: 'success', test2 : &#123; item : [ 'val1', 'val2' ] &#125; &#125;&#125;;var xmlAsStr = x2js.json2xml_str( jsonObj ); 此工具轉換 XML 會自動解析 namespaces ，這還挺方便的 線上範例 參考資料 Github x2js]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript 浮點數取整數]]></title>
    <url>%2F2018%2F09%2F29%2Fjavascript-floor-round-ceil%2F</url>
    <content type="text"><![CDATA[JavaScript 浮點數取整數浮點數取整數，在數學中有四捨五入、無條件進位、無條件捨去三種方式，在 JavaScript 中，可以利用 ceil 、floor 和 round 來達到 ceil此方法會回傳大於或等於的最小整數，就是無條件進位 123456789101112console.log(Math.ceil(0.95));// output: 1console.log(Math.ceil(2));// output: 2console.log(Math.ceil(3.024));// output: 4console.log(Math.ceil(3.624));// output: 4console.log(Math.ceil(-3.654));// output: -3console.log(Math.ceil(-3.054));// output: -3 floor此方法回傳小於或等於的最大整數，就是無條件捨去 123456789101112console.log(Math.floor(0.95));// output: 0console.log(Math.floor(2));// output: 2console.log(Math.floor(3.024));// output: 3console.log(Math.floor(3.624));// output: 3console.log(Math.floor(-3.654));// output: -4console.log(Math.floor(-3.054));// output: -4 round此方法近似四捨五入，注意正負的差異 123456789101112console.log(Math.round(0.95));// output: 1console.log(Math.round(2));// output: 2console.log(Math.round(3.024));// output: 3console.log(Math.round(3.624));// output: 4console.log(Math.round(-3.654));// output: -4console.log(Math.round(-3.054));// output: -3 線上範例See the Pen float get integer part in javascript by allen_yu (@shunnien) on CodePen. 參考資料 MDN ceil MDN floor MDN round]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Google Map Js Api 串接 Kml/kmz 檔案]]></title>
    <url>%2F2018%2F09%2F27%2Fgoogle-map-js-api-access-kml%2F</url>
    <content type="text"><![CDATA[Google Map 呈現 KML使用 google map js API 來串接 KML/KMZ 檔案，其中需要注意的事項 KML/KMZ KML (Keyhole Markup Language)，是基於 XML (eXtensible Markup Language,可擴展標記語言)語法標準的一種標記語言 (markup language) KMZ 為 KML 的壓縮格式，所以可以透過解壓縮得到 KML Google Map js API kmllayer要使用 Google Map js API 串接 KML/KMZ ，需要透過 kmllayer 這類別，而 Google 在處理這部分有一些注意事項 取得最大檔案(包含原始 KML、原始 GeoRSS、壓縮後的 KMZ)大小是 3 MB 最大未壓縮 KML 檔案是 10 MB 最大的網路連線是 10 最大文件內容數量是 1000 KML 圖層數量，官方說明在單一地圖顯示中，有數量限制，平均在 10 ～ 20 左右 最後，最重要的是，google 官方有註記上述的注意事項隨時都可能變更，所以要隨時關注 google document kmllayer 另外串接的 KML/KMZ 連結必須是公開的網址，不能使用相對路徑進行連接 範例kml Layer 參數的設定 1var layer = new google.maps.KmlLayer([opts]); 屬性 說明 clickable 圖層是否接收滑鼠事件，預設值為 true map 顯示圖層的地圖物件 preserveViewport 自動縮放到 KML 圖層的中心，但是 KML 必須設定圖層的範圍邊界，假如沒有設定，則不會移動 screenOverlays 是否渲染至 overlays. 預設值為 true uppressInfoWindows 點擊地圖時，禁止顯示跳出訊息視窗；預設值為 false url KML 的 url zIndex 顯示圖層的 z-index 所以在電腦的網頁上， clickable 設定為 false 時，因為事件冒泡被取消，所以 uppressInfoWindows 不管有無設定，都不會顯示 KML 圖層的訊息視窗。 1234567891011121314151617181920212223var map = null;var kmzLayer,kmlLayer;function initMap() &#123; map = new google.maps.Map(document.getElementById('map'), &#123; zoom: 12, center: new google.maps.LatLng(25.04, 121.505) &#125;);&#125;var loadKmz = function () &#123; kmzLayer = new google.maps.KmlLayer(&#123; url: 'https://shunnien.github.io/Victoria/sample.kmz', map: map &#125;);&#125;var loadKml = function () &#123; kmlLayer = new google.maps.KmlLayer(&#123; url: 'https://shunnien.github.io/Victoria/ty_bike_lane.kml', //suppressInfoWindows: true, map: map &#125;);&#125; 線上範例 參考資料 Wiki KML google KML layer example google document KML and GeoRSS Layers google document Displaying KML google document KmlLayer class google document Kml 說明]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>Google Map</tag>
        <tag>Google</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[TLS/SSL 簡介]]></title>
    <url>%2F2018%2F09%2F27%2FEncrEncrypt-t-free-SSL%2F</url>
    <content type="text"><![CDATA[TLS/SSL 簡介此篇已經紀錄一段時間，但是沒有把筆記整理好，這次把此篇筆記整理一下。 HTTPS (Hypertext Transfer Protocol Secure)HTTPS = 加密過的 HTTP 連線 HTTPS = HTTP over TLS/SSL TLS/SSL 是一個介於 HTTP 與 TCP/IP 之間的安全通訊協定 TLS &gt; SSL HTTPS != 安全的連線HTTP = 不安全的連線HTTP/2 與 ServiceWorker 僅支援 HTTPS 連線 SSL 安全通訊協定SSL 的全名 Secure Sockets Layer (安全通訊協定)，後來改名為 TLS (Transport Layer Security)(傳輸層安全協議)，不過大家在口語上還是通稱 SSLSSL 是一種安全協議或加密協議，一種以密碼學為基礎的訊息交換協議，目的是為為網際網路通訊，提供安全及資料完整性保障。 PKI 公開金鑰基礎建設 Public Key Infrastructure (PKI)(公開金鑰基礎建設) 一組由硬體、軟體、參與者、管理政策與流程組成的基礎架構，其目的在於創造、管理、分配、使用、儲存以及撤銷數位憑證；簡單說就是一份基本規則。 Certificate Authority(CA)(數位憑證認證機構) 負責儲存與簽發數位憑證 Registration Authority(RA)(註冊管理中心) 確保公開金鑰和特定個人或組織的身分鏈結(辨識身分) Central Directory(中央目錄) Certificate Management System Certificate Policy(CP) 憑證策略 SSL 伺服器憑證種類 SSL 伺服器數位憑證 EV SSL 伺服器數位憑證 萬用子網域 SSL 伺服器數位憑證 不同驗證等級的憑證Domain Validated SSL (DV SSL) 驗證等級最低的 SSL 憑證 通常此類憑證不是免費就是價格極其低廉 此類憑證通常不適合企業或電子商務網站 僅做網域認證 Organization Validated SSL (OV SSL) 公司組織認證 在憑證的 Organization(O)，含有組織資訊 Extended Validated SSL (EV SSL) 驗證等級最高的憑證，會打電話到公司確認該公司存在 各瀏覽器網址列安全顯示公司名稱 備註 HTTPS 相對 HTTP 而言會吃到一點點效能，因為需要加解密。 Chrome 瀏覽器中網址列驚嘆號，表示網站是安全的但是裡面內容有些是不安全的 參考資料 wiki HTTPS wiki TLS SSL]]></content>
      <categories>
        <category>心得筆記</category>
      </categories>
      <tags>
        <tag>other</tag>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript 透過 DOMParser 讀取 XML]]></title>
    <url>%2F2018%2F09%2F27%2Fjavascript-read-xml-by-DOMParser%2F</url>
    <content type="text"><![CDATA[DOMParser在前端讀取 XML 的 response 已經是字串了，再透過 DOMParser 來解析 XML ，使 XML 內容好取得。如果 response 指定 XML 格式，就直接已經讀取 XML 檔案，可以直接操作 DOMParser 轉換 XML 字串主要關鍵在於使用 DOMParser 轉換字串 1234567891011var text, parser, xmlDoc;text = "&lt;bookstore&gt;&lt;book&gt;" +"&lt;title&gt;Everyday Italian&lt;/title&gt;" +"&lt;author&gt;Giada De Laurentiis&lt;/author&gt;" +"&lt;year&gt;2005&lt;/year&gt;" +"&lt;/book&gt;&lt;/bookstore&gt;";parser = new DOMParser();xmlDoc = parser.parseFromString(text,"text/xml");var title = xmlDoc.getElementsByTagName("title")[0].textContent; 參考資料 MDN DOMParser 國土測繪中心 國土測繪中心 WMTS]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[無瑕的程式碼 番外篇讀書筆記]]></title>
    <url>%2F2018%2F09%2F21%2FThe-Clean-Coder-A-Code-of-Conduct-for-Professional-Programmers%2F</url>
    <content type="text"><![CDATA[讀書筆記無瑕的程式碼 番外篇－專業程式設計師的生存之道(The Clean Coder: A Code of Conduct for Professional Programmers)讀書筆記，摘要記錄個人筆記 三元分析法 (Program Evaluation and Review Technique) 樂觀預估 O常規預估 N悲觀預估 P 工具問題追蹤針對問題追蹤可以使用一下工具紀錄追蹤 Pivotal Tracker WiKi Lighthouse JIRA Redmine 編輯器 Emacs IntelliJ TextMate 文本編輯器，羽量級編輯器 Vi 功能雖然齊全，但是有比 Vi 便利的編輯器工具 測試工具 Fitnesse 此書作者主力開發的 Java 單元測試工具 Selenium RobotFX Cucumber Coutinuous Build (CI) Jenkins 練習場 (Kata)練習是培養類似熟能生巧的能力與思考方向 butunclebob.com Code Kata CodeKata 另一練習網址]]></content>
      <categories>
        <category>讀書筆記</category>
      </categories>
      <tags>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[API 壓力測試工具 SuperBenchmarker]]></title>
    <url>%2F2018%2F09%2F20%2FSuperBenchmarker%2F</url>
    <content type="text"><![CDATA[SuperBenchmarker這工具使用也一段時間，這次順手紀錄下來；這是一個 command-line 工具，可以很便利使用。 安裝方式可以透過 chocolatey 來安裝，安裝指令如下 1choco install superbenchmarker 指令與參數說明指令範例如下 1sb -u "https://reqres.in/api/users?page=&#123;&#123;&#123;Id&#125;&#125;&#125;" -n 800 -c 5 -m GET -t D:\temp\template.txt -f D:\temp\values.csv -v -h 常用參數說明 參數 說明 -u 設定要測試的 url -n 要發出的 request 數量 -c 同時的連線數 -m http method -t template 範本，要設定 header 可以使用此參數 -f 使用 csv 檔案來取代參數的指令 -v 顯示詳細訊息 -h 顯示 header 訊息 另外執行結束會產生報告圖表的 html 頁面，此 html 會儲存在指令執行的路徑下，所以需要注意登入帳號是否有權限寫入檔案 名詞說明 每秒需求處理能力 RPS( Requests Per Second) 參考資料 Github SuperBenchmarker Level Up SuperBenchmarker kkbruce 免費網站與REST服務壓力測試工具]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IIS 設定 MIME Type]]></title>
    <url>%2F2018%2F09%2F13%2Fmime-type-set-for-iis%2F</url>
    <content type="text"><![CDATA[IIS 設定 MIME Type簡單記錄一下設定方式，因為 IIS 預設的副檔名還是有些不足，有些部分需要擴充設定，設定方式有兩種，一種是直接撰寫在 web.config 內，但是需要注意 IIS 7.0 以上版本才有支援，主要是 staticContent 此元素，詳情可以參考 microsoft docs 環境資訊我的 IIS 環境 介面設定步驟 步驟 1 步驟 2 步驟 3 採用 web.config使用 config 的話，為了避免版本不同的預設設定，先使用 remove 移除預設值再添加 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;configuration&gt; &lt;system.webServer&gt; &lt;staticContent&gt; &lt;remove fileExtension=".eot" /&gt; &lt;mimeMap fileExtension=".eot" mimeType="application/vnd.ms-fontobject" /&gt; &lt;remove fileExtension=".ttf" /&gt; &lt;mimeMap fileExtension=".ttf" mimeType="font/ttf" /&gt; &lt;remove fileExtension=".otf" /&gt; &lt;mimeMap fileExtension=".otf" mimeType="font/otf" /&gt; &lt;remove fileExtension=".woff" /&gt; &lt;mimeMap fileExtension=".woff" mimeType="application/font-woff" /&gt; &lt;remove fileExtension=".woff2" /&gt; &lt;mimeMap fileExtension=".woff2" mimeType="application/font-woff2" /&gt; &lt;remove fileExtension=".kml" /&gt; &lt;mimeMap fileExtension=".kml" mimeType="application/vnd.google-earth.kml+xml" /&gt; &lt;remove fileExtension=".kmz" /&gt; &lt;mimeMap fileExtension=".kmz" mimeType="application/vnd.google-earth.kmz" /&gt; &lt;remove fileExtension=".json" /&gt; &lt;mimeMap fileExtension=".json" mimeType="application/json" /&gt; &lt;remove fileExtension=".mp4" /&gt; &lt;mimeMap fileExtension=".mp4" mimeType="video/mp4" /&gt; &lt;remove fileExtension=".ogv" /&gt; &lt;mimeMap fileExtension=".ogv" mimeType="video/ogg" /&gt; &lt;remove fileExtension=".webm" /&gt; &lt;mimeMap fileExtension=".webm" mimeType="video/webm" /&gt; &lt;remove fileExtension=".svg" /&gt; &lt;mimeMap fileExtension=".svg" mimeType="image/svg+xml" /&gt; &lt;remove fileExtension=".svgz" /&gt; &lt;mimeMap fileExtension=".svgz" mimeType="images/svg+xml" /&gt; &lt;remove fileExtension=".geojson" /&gt; &lt;mimeMap fileExtension=".geojson" mimeType="application/json" /&gt; &lt;remove fileExtension=".csv" /&gt; &lt;mimeMap fileExtension=".csv" mimeType="text/csv" /&gt; &lt;/staticContent&gt; &lt;/system.webServer&gt;&lt;/configuration&gt; 參考資料 microsoft support MDN_完整的 MIME Type 列表]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>IIS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Google Map Api 使用自訂底圖]]></title>
    <url>%2F2018%2F09%2F06%2Fgoogle-map-api-custom-basemap%2F</url>
    <content type="text"><![CDATA[google map api 使用自訂底圖在 Google map js api 中，不使用其預設底圖，改採用國土測繪中心的通用電子地圖 參考 Google 官方的 Map Types 說明文件，提到可以使用 setMapTypeId 此方法來指定底圖，記得更換以下的 google api key ，可以參考此篇 123456789101112131415161718192021222324252627282930313233343536373839404142434445&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;Overlay map types&lt;/title&gt; &lt;style&gt; html, body &#123; height: 100%; margin: 0; padding: 0; &#125; #map &#123; height: 100%; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id="map"&gt;&lt;/div&gt; &lt;script&gt; function initMap() &#123; const wmsMapType = new google.maps.ImageMapType(&#123; maxZoom: 18, minZoom: 7, name: "test", tileSize: new google.maps.Size(256, 256), isPng: true, getTileUrl: function (coord, zoom) &#123; return `http://wmts.nlsc.gov.tw/wmts/EMAP/default/GoogleMapsCompatible/$&#123;zoom&#125;/$&#123;coord.y&#125;/$&#123;coord.x&#125;`; &#125; &#125;); const map = new google.maps.Map(document.getElementById('map'), &#123; zoom: 12, center: new google.maps.LatLng(25.04, 121.505) &#125;); map.mapTypes.set('test', wmsMapType); map.setMapTypeId('test'); &#125; &lt;/script&gt; &lt;script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCmg6WKhPyvaIM7yJI-x3LtXkgvWJzjiZE&amp;callback=initMap"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; See the Pen GoogleMapCustomBaseMap by allen_yu (@shunnien) on CodePen. 參考資料 Google doc Map Types Google doc tutorial]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>Google Map</tag>
        <tag>Google</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ArcGIS JavaScript API 安裝在 IIS]]></title>
    <url>%2F2018%2F09%2F06%2FArcGIS-js-API-isolated-install%2F</url>
    <content type="text"><![CDATA[ArcGIS JavaScript API 安裝在 IISArcGIS JavaScript API 提供的是類似 CDN 的服務，但是假如客戶是內部系統並不對外的時候，就無法使用了，由於該 API 包含許多功能模組，官方提供了此說明步驟來設定，不只 js api ， SDK 也是類似的設定。 安裝設定步驟 1下載安裝程式， ESRI 的下載頁面僅提供會員使用，所以先註冊或是使用 google 帳號快速註冊(免費)，登入後在此連結即可下載。此次安裝使用 3.25 版本，API 會下載 arcgis_js_v325_api.zip ， Documentation 則是 arcgis_js_v325_sdk.zip ，假如只使用 JS 部分，可以只安裝 API 就好 步驟 2將下載檔案解壓縮 步驟 3在 IIS 根目錄中建立一個虛擬目錄 arcgis_js_api ，選擇剛剛解壓縮後的檔案路徑，注意是要選擇 rcgis_js_v325_api\arcgis_js_api 這個資料夾 步驟 4上述都是 IIS 部分的設定，接下來則是修改 javascript 內容；按照以下路徑(前一步驟設定的實體路徑)開啟 init.js 1arcgis_js_api\library\3.25\3.25\init.js 找尋 [HOSTNAME_AND_PATH_TO_JSAPI] 此關鍵字，替換成各自設定的網域與資料夾路徑，如下 1&lt;myhost.example.com&gt;/arcgis_js_api/library/&lt;myVersion&gt;/&lt;myVersion&gt;/ 以我此次 3.25 的設定則是 1http://127.0.0.1/arcgis_js_api/library/3.25/3.25/ 步驟 5開啟 IIS 路徑下的 dojo.js ，就是設定的實體路徑 1Default Web Site\arcgis_js_api\library\3.25\3.25\dojo\dojo.js 一樣找尋 [HOSTNAME_AND_PATH_TO_JSAPI] 關鍵字，用以下規則替換，同樣注意一下 protocol (http 與 https) 的差異 1&lt;myhost.example.com&gt;/arcgis_js_api/library/&lt;myVersion&gt;/&lt;myVersion&gt;/ 測試其實安裝檔案裏面都有說明教學檔案，裡面也有附上此測試頁面，將 link 與 script 替換成設定的路徑即可 12345678910111213141516171819202122232425262728293031323334&lt;!DOCTYPE HTML&gt;&lt;html&gt; &lt;head&gt; &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"/&gt; &lt;title&gt;Test Map&lt;/title&gt; &lt;link rel="stylesheet" href="http://127.0.0.1/arcgis_js_api/library/3.25/3.25/esri/css/esri.css" /&gt; &lt;script src="http://127.0.0.1/arcgis_js_api/library/3.25/3.25/init.js"&gt;&lt;/script&gt; &lt;style&gt; html, body, #map &#123; height: 100%; width: 100%; margin: 0; padding: 0; &#125; &lt;/style&gt; &lt;script&gt; require([ "esri/map", "esri/layers/ArcGISTiledMapServiceLayer", "dojo/domReady!" ],function(Map, ArcGISTiledMapServiceLayer) &#123; var map = new Map("map"); //If you do not have Internet access then you will need to point this url to your own locally accessible tiled service. var tiled = new ArcGISTiledMapServiceLayer("https://services.arcgisonline.com/arcgis/rest/services/Ocean/World_Ocean_Base/MapServer"); map.addLayer(tiled); &#125;); &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;div id="map"&gt;&lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 參考資料 esri 設定步驟 esri 安裝程式下載]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>IIS</tag>
        <tag>ArcGIS Js API</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PHP 安裝 MSSQL Driver]]></title>
    <url>%2F2018%2F08%2F10%2Fphp-install-sqlsrv-dll-on-windows%2F</url>
    <content type="text"><![CDATA[安裝 php_sqlsrv 與 php_pdo_sqlsrv使用 PHP 連接 MSSQL 進行 database migrate 時，發現出現以下訊息 瀏覽頁面也出現以下錯誤 此訊息已經說明找不到對應連接的程式，所以需要安裝 MSSQL 的對應套件。安裝流程在 stackoverflow 有人說明了，以下針對此次的流程進行說明 發生情形的環境123資料庫--&gt;docker for window / mssql-server-linuxPHP 開發環境--&gt;XAMPPPHP Version 5.6.36 安裝方法首先檢核目前的 PHP 版本，找尋對應的 dll 元件版本，其詳細對應可以參考 microsoft ，我的 PHP 版本是 5.6.36 所以需要安裝的是 3.2 PHP 7.x 版本，可以到 Github msphpsql 下載 PHP 5.x 版本，參考 microsoft 對照表內的下載連結 下載完成後，將對應的 php_sqlsrv.dll 檔案放至 C:\xampp\php\ext (因為我是使用 XAMPP)，之後進行 php.ini 檔案的設定 以我的環境而言，就是在檔案內容最後添加，此檔案設定完後， Apache 需要 Stop 再重新啟動，這樣設定才會重新讀取 12extension=php_sqlsrv_56_ts.dllextension=php_pdo_sqlsrv_56_ts.dll 此部分的設定還可以參考 microsoft docs Loading the Microsoft Drivers for PHP for SQL Server 設定完成指令就可順利執行 參考資料 stackoverflow microsoft docs system-requirements-for-the-php-sql-driver 找到的中文 step by step 教學 UCAMC]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用 PowerShell 來產生 Database Schema Script]]></title>
    <url>%2F2018%2F08%2F04%2Fpowershell-generate-database-schema-script%2F</url>
    <content type="text"><![CDATA[使用 PowerShell 來產生 database schema script前一篇文章提到了 DAC ，但是遇到了 DAC 匯出失敗的問題，看訊息是部分資料表的因素，但是那些資料又是客戶自己的需求，所以利用 sqlserver 的產生 script 來進行結構備份紀錄，而自動化紀錄可以省時省力，此篇透過 PowerShell 來自動產生與處理 PowerShell ISE要撰寫 PowerShell 可以透過 PowerShell ISE 這是一個方便撰寫的工具 撰寫內容首先簡單說明處理流程 將會依使用者變動的部分設定為變數 檢查目的地資料夾是否存在，並建立 透過 SMO 建立連線 匯出設定 匯出結構 以下將程式與註解說明 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980# 最後儲存匯出結構的路徑資料夾$Filepath = 'D:\MyScriptsDirectory'# 資料庫連線的 data source$DataSource = '127.0.0.1'# 資料庫名稱$Database = 'databaseName'# 取得今天日期，後續會利用此日期當檔案名稱的一部份$today = Get-Date -Format yyyy_MM_dd# 防呆設計，當目的資料夾不存在時，建立資料夾$homedir = "$Filepath\"if (!(Test-Path -path $homedir)) &#123; Try &#123; New-Item $homedir -type directory | out-null &#125; Catch [system.exception] &#123; Write-Error "error while creating '$homedir' $_" return &#125; &#125;# 開啟或關閉指令碼偵錯功能、設定追蹤層級和切換嚴格模式set-psdebug -strict# 可自訂 Windows PowerShell 行為的變數$ErrorActionPreference = "stop"# 讀取 SMO assembly, 假如使用 SQL 2008 DLLs 需要載入 SMOExtended 和 SQLWMIManagement libraries$ms = 'Microsoft.SqlServer'$v = [System.Reflection.Assembly]::LoadWithPartialName( "$ms.SMO")if ((($v.FullName.Split(','))[1].Split('='))[1].Split('.')[0] -ne '9') &#123; [System.Reflection.Assembly]::LoadWithPartialName("$ms.SMOExtended") | out-null&#125;$My = "$ms.Management.Smo" ## 設定連線資訊$mySrvConn = new-object Microsoft.SqlServer.Management.Common.ServerConnection$mySrvConn.ServerInstance = "$DataSource"$mySrvConn.MultipleActiveResultSets = $true$mySrvConn.LoginSecure = $false$mySrvConn.Login = "sa"$mySrvConn.Password = "1qaz@WSX"$mySrvConn.DatabaseName = "$Database"$s = new-object ("$My.Server") $mySrvConn# 進行連線if ($s.Version -eq $null ) &#123;Throw "Can't find the instance $Datasource"&#125;$db = $s.Databases[$Database]if ($db.name -ne $Database) &#123;Throw "Can't find the database '$Database' in $Datasource"&#125;;$transfer = new-object ("$My.Transfer") $db# 匯出設定$CreationScriptOptions = new-object ("$My.ScriptingOptions")# yes, we want these$CreationScriptOptions.ExtendedProperties = $true# and all the constraints$CreationScriptOptions.DRIAll = $true# Yup, these would be nice$CreationScriptOptions.Indexes = $true# This should be included when scripting a database$CreationScriptOptions.Triggers = $true# this only goes to the file$CreationScriptOptions.ScriptBatchTerminator = $true# of course$CreationScriptOptions.IncludeHeaders = $true;#no need of string output as well$CreationScriptOptions.ToFileOnly = $true# not necessary but it means the script can be more versatile$CreationScriptOptions.IncludeIfNotExists = $true$CreationScriptOptions.Filename = "$($FilePath)\$($Database)_$($today)_Build.sql";$transfer = new-object ("$My.Transfer") $s.Databases[$Database]# tell the transfer object of our preferences$transfer.options = $CreationScriptOptions$transfer.ScriptTransfer()"All done" 這是按照 Automated Script-generation with Powershell and SMO 此篇文章的資料，重新調整撰寫的範本，目的是設定排程進行定期結構備份，後續還可以參考 Database Deployment: The Bits – Database Version Drift 進行備份比較等… 排程設定排程設定主要是因為 .ps1 不像是 .bat 直接執行，所以需要透過 PowerShell 程式，再把撰寫的範本路徑設定到引數 參考資料我的 GIST powershell 學習資源 IT邦鐵人賽 powershell 延伸閱讀 Automated Script-generation with Powershell and SMO Database Deployment: The Bits – Database Version Drift Use PowerShell to Script SQL Database Objects Load the SMO Assemblies in Windows PowerShell 使用Windows PowerShell 來執行 Cloudberry 的指令並進行排程備份 powershell 檢查服務並且重新自動啟動 裡面包含建立排程與工作的設定教學 Powershell Wiki 其餘工具 WinMerge]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>Powershell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用 Sqlserver Data-Tier Applications 來進行備份]]></title>
    <url>%2F2018%2F07%2F21%2Fsqlserver-Data-tier-Applications%2F</url>
    <content type="text"><![CDATA[資料層應用程式 (Data-tier Applications)幾日前公司 MIS 維運 Server ，一些伺服器暫時關閉，所以測試資料庫也停了；幸好有針對資料結構進行版控，只好利用 docker 直接來建立資料庫，但是有些關聯資料表的建立，由於相依另外的資料表，變成建立順序需要調整；後來測試資料庫維運完成之後，才想到這些資料結構的建立可以利用 DAC 來建立。 DAC 定義資料層應用程式 (Data-tier Applications) 包含完整的資料庫物件，例如： table view store procedure 依照這些物件定義來進行資料庫的布署，其封裝檔案可以分為兩種格式： .dacpac 僅資料庫結構描述 用來佈署、升級資料庫 Schema 與版本 .bacpac 資料庫結構描述加上資料 (檔案會較大) 用來備份、還原，不能用來升級資料庫(內容包含資料庫中的資料) 其實這些產生出的檔案就是一個壓縮檔，加上 .zip 副檔名，可以看出裡面有許多 XML 檔案，這些檔案來描述資料結構 BACPAC 操作以下附上環境資訊 測試使用資料庫採用 northwind 北風資料庫 sql server 2017 採用 docker microsoft/mssql-server-linux 的 SQL Express edition 123$ systeminfo | findstr /B /C:"OS Name" /C:"OS Version"OS Name: Microsoft Windows 10 專業版OS Version: 10.0.17134 N/A Build 17134 匯出步驟匯出資料庫 DAC ，將資料庫 Schema 與資料封裝 目標資料庫右鍵 –&gt; Tasks –&gt; Export Data-tier Application… 簡單的說明介紹 匯出設定 進階設定，指定匯出項目等 設定總結 匯出結果 匯入步驟使用 BACPAC 進行資料與結構匯入 Databases 資料夾右鍵 –&gt; Import Data-tier Application… 匯入介紹 匯入設定，選擇 bacpac 檔案位置 資料庫設定，設定資料庫名稱與檔案存放路徑等 設定項目總結 匯入結果 參考資料 DAC channel9 保哥 SQL Server 資料庫版本控管影片] Yowko’s Notes 各操作的 step by step 操作 Powershell SMO 匯出資料結構 保哥 SQL Server 資料庫版本控管簡報]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>SQLServer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Json.net 的自訂 Serialize 與 Deserialize]]></title>
    <url>%2F2018%2F07%2F06%2Fjson-net-deserialize-object%2F</url>
    <content type="text"><![CDATA[Json.net 的自訂序列化與反序列化會使用 Json.net 此自訂序列化 (Serialize) 或是 反序列化 (Deserialize) 的原因主要是希望在序列化 Json 的時候，可以直接將時間的部分按照客戶要求輸出 先附上使用環境與套件版本 Newtonsoft.Json 版本 : 10.0.2 編輯器 LINQPad 版本 : 5.31.00(AnyCPU) 首先建立一個範例 Class 叫做 SampleModel ，然後利用時區讓兩個 DateTime 格式的屬性來做範例輸出 1234567891011121314151617181920void Main()&#123; SampleModel model = new SampleModel(); // 格式化輸出 var indented = Newtonsoft.Json.Formatting.Indented; var jsonModel = JsonConvert.SerializeObject(model, indented); jsonModel.Dump();&#125;/// &lt;summary&gt;/// Class SampleModel./// &lt;/summary&gt;public class SampleModel&#123; public int Id &#123; get; set; &#125; = 1; public DateTime UtcDate &#123; get; set; &#125; = DateTime.UtcNow; public DateTime NowDate &#123; get; set; &#125; = DateTime.Now;&#125; 序列化承襲上述的 SampleModel ，此部分針對 Json.net 的 JsonConverter 來自訂規則，主要需要撰寫的部分有 CanConvert 與 WriteJson 兩個方法 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475void Main()&#123; SampleModel model = new SampleModel(); // 格式化輸出 var indented = Newtonsoft.Json.Formatting.Indented; // 設定自訂規則轉換 DateTime 格式 var jsonModel = JsonConvert.SerializeObject(model, indented, new SampleModelConverter(typeof(DateTime))); jsonModel.Dump();&#125;// Class SampleModel. 請參照上述，此處省略/// &lt;summary&gt;/// Class SampleModelConverter./// &lt;/summary&gt;/// &lt;seealso cref="Newtonsoft.Json.JsonConverter" /&gt;public class SampleModelConverter : JsonConverter&#123; private readonly Type[] _types; /// &lt;summary&gt; /// 建構式 /// &lt;/summary&gt; /// &lt;param name="types"&gt;The types.&lt;/param&gt; public SampleModelConverter(params Type[] types) &#123; _types = types; &#125; /// &lt;summary&gt; /// Writes the JSON representation of the object. /// &lt;/summary&gt; /// &lt;param name="writer"&gt;The &lt;see cref="T:Newtonsoft.Json.JsonWriter" /&gt; to write to.&lt;/param&gt; /// &lt;param name="value"&gt;The value.&lt;/param&gt; /// &lt;param name="serializer"&gt;The calling serializer.&lt;/param&gt; public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) &#123; Type type = value.GetType(); if (type == typeof(DateTime)) &#123; var date = (DateTime)value; serializer.Serialize(writer, date.ToLocalTime().ToString("yyyy-MM-dd hh:mm:ss")); // 想寫入 json 物件，使用以下語法 // writer.WriteStartObject(); // writer.WritePropertyName(type.Name); // writer.WriteEndObject(); &#125; &#125; /// &lt;summary&gt; /// Reads the JSON representation of the object. /// &lt;/summary&gt; /// &lt;param name="reader"&gt;The &lt;see cref="T:Newtonsoft.Json.JsonReader" /&gt; to read from.&lt;/param&gt; /// &lt;param name="objectType"&gt;Type of the object.&lt;/param&gt; /// &lt;param name="existingValue"&gt;The existing value of object being read.&lt;/param&gt; /// &lt;param name="serializer"&gt;The calling serializer.&lt;/param&gt; /// &lt;returns&gt;The object value.&lt;/returns&gt; public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) &#123; return null; &#125; /// &lt;summary&gt; /// 判斷此物件是否符合自訂規則的設定型別，符合即可進行轉換 /// &lt;/summary&gt; /// &lt;param name="objectType"&gt;Type of the object.&lt;/param&gt; /// &lt;returns&gt;&lt;c&gt;true&lt;/c&gt; if this instance can convert the specified object type; otherwise, &lt;c&gt;false&lt;/c&gt;.&lt;/returns&gt; public override bool CanConvert(Type objectType) &#123; var result = _types.Any(t =&gt; t == objectType); return result; &#125;&#125; Deserialize反序列化反序列化要注意的是要自訂 ReadJson 這個方法 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051void Main()&#123; SampleModel model = new SampleModel(); // 格式化輸出 var indented = Newtonsoft.Json.Formatting.Indented; // 設定自訂規則轉換 DateTime 格式 var jsonModel = JsonConvert.SerializeObject(model, indented, new SampleModelConverter(typeof(DateTime))); jsonModel.Dump(); // 設定自訂規則轉換 DateTime 格式 var deserializeJson = JsonConvert.DeserializeObject&lt;SampleModel&gt;(jsonModel, new SampleModelConverter(typeof(DateTime))); deserializeJson.Dump();&#125;// Class SampleModel. 請參照上述，此處省略/// &lt;summary&gt;/// Class SampleModelConverter./// &lt;/summary&gt;/// &lt;seealso cref="Newtonsoft.Json.JsonConverter" /&gt;public class SampleModelConverter : JsonConverter&#123; // ... 其他方法與屬性同序列化的自訂，除 ReadJson 方法不同 /// &lt;summary&gt; /// Reads the JSON representation of the object. /// &lt;/summary&gt; /// &lt;param name="reader"&gt;The &lt;see cref="T:Newtonsoft.Json.JsonReader" /&gt; to read from.&lt;/param&gt; /// &lt;param name="objectType"&gt;Type of the object.&lt;/param&gt; /// &lt;param name="existingValue"&gt;The existing value of object being read.&lt;/param&gt; /// &lt;param name="serializer"&gt;The calling serializer.&lt;/param&gt; /// &lt;returns&gt;The object value.&lt;/returns&gt; public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) &#123; // reader Json 讀取出來的類型為 Date 格式就進行轉換 // 當序列化使用此規則時，此處可以省略，因為會沒有 Date 格式 if (reader.TokenType == JsonToken.Date) &#123; return ((DateTime)existingValue).ToLocalTime(); &#125; if (DateTime.TryParse(existingValue.ToString(), out DateTime dateValue)) &#123; return dateValue.ToLocalTime(); &#125; return null; &#125;&#125; 總結Json.net 的 JsonConverter 訂立的規則是通用的，不是針對單一型別的規則，當然此範例還可以使用 JsonSerializer.DateFormatString 等各種方式達到目的，不過此範例重點在於自訂規則與轉換型別的部分，最後附上完整的 sample code 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889void Main()&#123; SampleModel model = new SampleModel(); // 格式化輸出 var indented = Newtonsoft.Json.Formatting.Indented; var jsonModel = JsonConvert.SerializeObject(model, indented, new SampleModelConverter(typeof(DateTime))); jsonModel.Dump(); var deserializeJson = JsonConvert.DeserializeObject&lt;SampleModel&gt;(jsonModel, new SampleModelConverter(typeof(DateTime))); deserializeJson.Dump();&#125;/// &lt;summary&gt;/// Class SampleModel./// &lt;/summary&gt;public class SampleModel&#123; public int Id &#123; get; set; &#125; = 1; public DateTime UtcDate &#123; get; set; &#125; = DateTime.UtcNow; public DateTime NowDate &#123; get; set; &#125; = DateTime.Now;&#125;/// &lt;summary&gt;/// Class SampleModelConverter./// &lt;/summary&gt;/// &lt;seealso cref="Newtonsoft.Json.JsonConverter" /&gt;public class SampleModelConverter : JsonConverter&#123; private readonly Type[] _types; /// &lt;summary&gt; /// Initializes a new instance of the &lt;see cref="SampleModelConverter"/&gt; class. /// &lt;/summary&gt; /// &lt;param name="types"&gt;The types.&lt;/param&gt; public SampleModelConverter(params Type[] types) &#123; _types = types; &#125; /// &lt;summary&gt; /// Writes the JSON representation of the object. /// &lt;/summary&gt; /// &lt;param name="writer"&gt;The &lt;see cref="T:Newtonsoft.Json.JsonWriter" /&gt; to write to.&lt;/param&gt; /// &lt;param name="value"&gt;The value.&lt;/param&gt; /// &lt;param name="serializer"&gt;The calling serializer.&lt;/param&gt; public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) &#123; Type type = value.GetType(); if (type == typeof(DateTime)) &#123; var date = (DateTime)value; serializer.Serialize(writer, date.ToLocalTime().ToString("yyyy-MM-dd hh:mm:ss")); &#125; &#125; /// &lt;summary&gt; /// Reads the JSON representation of the object. /// &lt;/summary&gt; /// &lt;param name="reader"&gt;The &lt;see cref="T:Newtonsoft.Json.JsonReader" /&gt; to read from.&lt;/param&gt; /// &lt;param name="objectType"&gt;Type of the object.&lt;/param&gt; /// &lt;param name="existingValue"&gt;The existing value of object being read.&lt;/param&gt; /// &lt;param name="serializer"&gt;The calling serializer.&lt;/param&gt; /// &lt;returns&gt;The object value.&lt;/returns&gt; public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) &#123; if (reader.TokenType == JsonToken.Date) &#123; return ((DateTime)existingValue).ToLocalTime(); &#125; if (DateTime.TryParse(existingValue.ToString(), out DateTime dateValue)) &#123; return dateValue.ToLocalTime(); &#125; return null; &#125; /// &lt;summary&gt; /// 判斷此物件是否符合自訂規則的設定型別，符合即可進行轉換 /// &lt;/summary&gt; /// &lt;param name="objectType"&gt;Type of the object.&lt;/param&gt; /// &lt;returns&gt;&lt;c&gt;true&lt;/c&gt; if this instance can convert the specified object type; otherwise, &lt;c&gt;false&lt;/c&gt;.&lt;/returns&gt; public override bool CanConvert(Type objectType) &#123; var result = _types.Any(t =&gt; t == objectType); return result; &#125;&#125; 延伸閱讀文中的時區轉換都比較偷懶，都是使用 ToLocalTime 等方式處理，要執行轉換的話，建議可以使用 TimeZoneInfo 來轉換，如下範例 1234567var twtzinfo = TimeZoneInfo.FindSystemTimeZoneById("Taipei Standard Time");DateTime localdt = TimeZoneInfo.ConvertTime(DateTime.UtcNow,TimeZoneInfo.Utc, twtzinfo);DateTime localdt2 = TimeZoneInfo.ConvertTime(DateTime.UtcNow, twtzinfo);DateTime localdt3 = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, twtzinfo);localdt.Dump();localdt2.Dump();localdt3.Dump(); 附上拉取時區名稱與時區 ID 的作法，或是參考 microsoft 時區 ID 文件 12345678910111213141516TimeZoneInfo localZone = TimeZoneInfo.Local;Dictionary&lt;string, string&gt; timeZoneIdName = new Dictionary&lt;string, string&gt;()&#123; &#123; localZone.Id, localZone.DisplayName&#125;&#125;;timeZoneIdName.Dump();ReadOnlyCollection&lt;TimeZoneInfo&gt; list = TimeZoneInfo.GetSystemTimeZones();foreach (var zone in list)&#123; if (!timeZoneIdName.ContainsKey(zone.Id)) timeZoneIdName.Add(zone.Id, zone.DisplayName);&#125;timeZoneIdName.Dump(); microsoft docs 時區轉換時間 Newtonsoft DeserializeDateFormatString Newtonsoft CustomJsonConverter microsoft 時區 ID 參考 Will 保哥 .NET 日期結構(DateTime) 與 時區轉換 Darkthread DateTime時區與比較 Bulletproof Interface Deserialization in Json.NET Using custom converters in JSON.NET: Array or Object? JSON.NET Implementing Custom Serialization Encrypting values when serializing with JSON.NET Github 上的 Serialization]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Gitlab CE 透過 Rails Console 變更帳號資料]]></title>
    <url>%2F2018%2F07%2F04%2Freset-password-via-the-rails-console-on-the-gitlab-server%2F</url>
    <content type="text"><![CDATA[首先說明架設的環境， Gitlab CE(Community Edition) 架設在 Linux 上，其資訊如下 12345678[root@proj-git ~]# unameLinux[root@proj-git ~]# uname -v#1 SMP Thu Jan 25 20:13:58 UTC 2018[root@proj-git ~]# uname -r3.10.0-693.17.1.el7.x86_64[root@proj-git ~]# uname -mx86_64 設定方式要變更帳號資料，做法是連線至安裝主機 (Linux) 上，透過 rails console 來進行變更，以下按照步驟來說明 由於個人使用 windows 電腦，所以透過 PuTTY 進行 Linux Server 的連接 進入之後輸入 sudo bash 1sudo bash 接著輸入 gitlab-rails console ，啟動由 gitlab 內安裝的 rails console ，其執行畫面如下 123[root@proj-git ~]# gitlab-rails consoleLoading production environment (Rails 4.2.8)irb(main):001:0&gt; 最後則是透過 rails 語法，進行變更，以下附上幾個 method ，修改完成輸入 exit 即可退出 12345678# find the user:# user = User.find_by(email: "admin@example.com")# user = User.find_by(username: "root")# user = User.find_by(name: "Administrator")# user = User.find_by(admin: true)user = User.find_by(username: "root")user.state = "active"user.save 參考資料 Gitlab Gitlab 論壇討論 操作語法 Gist]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>Gitlab</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git Autocrlf 與 Safecrlf]]></title>
    <url>%2F2018%2F06%2F03%2Fgit-autocrlf-and-safecrlf%2F</url>
    <content type="text"><![CDATA[關於 autocrlf 產生的一些警告訊息，在很早以前使用 git 的時候，就有了解了，但是一直沒有單獨進行筆記，加上 safecrlf 這設定一直沒有很仔細去了解，這次順便進行比較詳細的筆記。 這兩個設定都是針對換行符的設定，主要是 Git 早期是為了維護 Linux kernel 設計而成的，所以絕大部分使用環境都是 Linux 平台，而在 Linux 平台下，文字檔案的斷行符號預設為 LF 字元 (\n ) ( 0x0A )。不過，在 Windows 環境下，文字檔案的預設斷行符號卻是 CRLF ( \r\n ) ( 0x0D 0x0A )。這種轉換功能，加上 Git 的檔案比對，此種設定會造成一些可能影響與風險 若是 Repository 中同時包含 LF 與 CRLF ，經過自動轉換之後，就會造成原始檔案內容不同，等於竄改或破壞原始檔案，增添辨識問題。 AutoCRLF此功能就上述提及，會自動轉換換行字元，主要的設定影響如下： 設定成 true 的作用是 commit 時會自動將 CRLF 轉成 LF ； checkout 時會自動將 LF 轉成 CRLF 1git config --global core.autocrlf true 設定成 input 的作用是 commit 時會自動將 CRLF 轉成 LF ； checkout 時不轉換 1git config --global core.autocrlf input 設定成 false 的則是停止自動轉換，不管 commit 或是 checkout 都不會進行轉換 1git config --global core.autocrlf false SafeCRLF這設定是更加嚴格的過濾換行符，只要 git add 或是 commit 或是 push 都會過濾 不允許 有 LF 與 CRLF 混合的檔案 1git config --global core.autocrlf true 允許 有 LF 與 CRLF 混合的檔案 1git config --global core.autocrlf false 允許 有 LF 與 CRLF 混合的檔案，但是會出現 warning 警告訊息 1git config --global core.autocrlf warn 延伸閱讀 Will 保哥 Git 在 Windows 平台處理斷行字元 (CRLF) 的注意事項 Will 保哥 Visual Studio Tools for Git 處理斷行字元 (CRLF) 的注意事項 Huan-Lin 學習筆記 Git 的 core.autocrlf 參數 Huan-Lin 學習筆記 “Git 在 Windows 平台的換行字元]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS Grid 的花園小遊戲教學網站]]></title>
    <url>%2F2018%2F05%2F30%2Fcss-grid-garden%2F</url>
    <content type="text"><![CDATA[承襲上篇 Flexbox 的青蛙練習網站，上篇的 CSS 練習遊戲，除了 Flexbox 外，尚有 CSS Grid ，此篇就是 CSS Grid 小遊戲闖關過程。 28 關以下針對是我針對各關的解答 第 1 關123456789#garden &#123; display: grid; grid-template-columns: 20% 20% 20% 20% 20%; grid-template-rows: 20% 20% 20% 20% 20%;&#125;#water &#123; grid-column-start: 3;&#125; 第 2 關123456789#garden &#123; display: grid; grid-template-columns: 20% 20% 20% 20% 20%; grid-template-rows: 20% 20% 20% 20% 20%;&#125;#poison &#123; grid-column-end:-1;&#125; 第 3 關12345678910#garden &#123; display: grid; grid-template-columns: 20% 20% 20% 20% 20%; grid-template-rows: 20% 20% 20% 20% 20%;&#125;#water &#123; grid-column-start: 1; grid-column-end:-3;&#125; 第 4 關12345678910#garden &#123; display: grid; grid-template-columns: 20% 20% 20% 20% 20%; grid-template-rows: 20% 20% 20% 20% 20%;&#125;#water &#123; grid-column-start: 5; grid-column-end: 2;&#125; 第 5 關12345678910#garden &#123; display: grid; grid-template-columns: 20% 20% 20% 20% 20%; grid-template-rows: 20% 20% 20% 20% 20%;&#125;#water &#123; grid-column-start: 1; grid-column-end: 5;&#125; 第 6 關123456789#garden &#123; display: grid; grid-template-columns: 20% 20% 20% 20% 20%; grid-template-rows: 20% 20% 20% 20% 20%;&#125;#poison &#123; grid-column-start:4;&#125; 第 7 關12345678910#garden &#123; display: grid; grid-template-columns: 20% 20% 20% 20% 20%; grid-template-rows: 20% 20% 20% 20% 20%;&#125;#water &#123; grid-column-start: 2; grid-column-end:4;&#125; 第 8 關12345678910#garden &#123; display: grid; grid-template-columns: 20% 20% 20% 20% 20%; grid-template-rows: 20% 20% 20% 20% 20%;&#125;#water &#123; grid-column-start: 1; grid-column-end: span 5;&#125; 第 9 關12345678910#garden &#123; display: grid; grid-template-columns: 20% 20% 20% 20% 20%; grid-template-rows: 20% 20% 20% 20% 20%;&#125;#water &#123; grid-column-start: span 3; grid-column-end: 6;&#125; 第 10 關123456789#garden &#123; display: grid; grid-template-columns: 20% 20% 20% 20% 20%; grid-template-rows: 20% 20% 20% 20% 20%;&#125;#water &#123; grid-column: -3/-1;&#125; 第 11 關123456789#garden &#123; display: grid; grid-template-columns: 20% 20% 20% 20% 20%; grid-template-rows: 20% 20% 20% 20% 20%;&#125;#water &#123; grid-column: 2 /span 3;&#125; 第 12 關123456789#garden &#123; display: grid; grid-template-columns: 20% 20% 20% 20% 20%; grid-template-rows: 20% 20% 20% 20% 20%;&#125;#water &#123; grid-row-start: 3;&#125; 第 13 關123456789#garden &#123; display: grid; grid-template-columns: 20% 20% 20% 20% 20%; grid-template-rows: 20% 20% 20% 20% 20%;&#125;#water &#123; grid-row: 3/span 3;&#125; 第 14 關12345678910garden &#123; display: grid; grid-template-columns: 20% 20% 20% 20% 20%; grid-template-rows: 20% 20% 20% 20% 20%;&#125;#poison &#123; grid-column-start: 2; grid-row-start: 5;&#125; 第 15 關12345678910#garden &#123; display: grid; grid-template-columns: 20% 20% 20% 20% 20%; grid-template-rows: 20% 20% 20% 20% 20%;&#125;#water &#123; grid-column: 2/-1; grid-row: 1/-1;&#125; 第 16 關123456789#garden &#123; display: grid; grid-template-columns: 20% 20% 20% 20% 20%; grid-template-rows: 20% 20% 20% 20% 20%;&#125;#water &#123; grid-area: 1/2/4/6;&#125; 第 17 關12345678910111213#garden &#123; display: grid; grid-template-columns: 20% 20% 20% 20% 20%; grid-template-rows: 20% 20% 20% 20% 20%;&#125;#water-1 &#123; grid-area: 1 / 4 / 6 / 5;&#125;#water-2 &#123; grid-area: 2/3/5/6;&#125; 第 18 關12345678910111213#garden &#123; display: grid; grid-template-columns: 20% 20% 20% 20% 20%; grid-template-rows: 20% 20% 20% 20% 20%;&#125;.water &#123; order: 0;&#125;#poison &#123; order: 1;&#125; 第 19 關12345678910111213#garden &#123; display: grid; grid-template-columns: 20% 20% 20% 20% 20%; grid-template-rows: 20% 20% 20% 20% 20%;&#125;.water &#123; order: 0;&#125;.poison &#123; order: -1;&#125; 第 20 關12345678910#garden &#123; display: grid; grid-template-columns: 1fr 1fr; grid-template-rows: 20% 20% 20% 20% 20%;&#125;#water &#123; grid-column: 1; grid-row: 1;&#125; 第 21 關12345678910#garden &#123; display: grid; grid-template-columns: repeat(8,12.5%); grid-template-rows: 20% 20% 20% 20% 20%;&#125;#water &#123; grid-column: 1; grid-row: 1;&#125; 第 22 關12345#garden &#123; display: grid; grid-template-columns: 100px 3em 40%; grid-template-rows: 20% 20% 20% 20% 20%;&#125; 第 23 關12345#garden &#123; display: grid; grid-template-columns: 1fr 5fr; grid-template-rows: 20% 20% 20% 20% 20%;&#125; 第 24 關12345678910111213#garden &#123; display: grid; grid-template-columns: 50px 1fr 1fr 1fr 50px; grid-template-rows: 20% 20% 20% 20% 20%;&#125;#water &#123; grid-area: 1 / 1 / 6 / 2;&#125;#poison &#123; grid-area: 1 / 5 / 6 / 6;&#125; 第 25 關12345#garden &#123; display: grid; grid-template-columns: 75px 3fr 2fr; grid-template-rows: 100%;&#125; 第 26 關12345678910#garden &#123; display: grid; grid-template-columns: 20% 20% 20% 20% 20%; grid-template-rows: 50px 0 0 0 1fr;&#125;#water &#123; grid-column: 1 / 6; grid-row: 5 / 6;&#125; 第 27 關12345678#garden &#123; display: grid; grid-template: 60% 1fr/ 200px 1fr;&#125;#water &#123; grid-column: 1; grid-row: 1;&#125; 第 28 關1234#garden &#123; display: grid; grid-template: 1fr 50px/20% 1fr;&#125; 參考資料 CSS Grid Garden]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Flexbox 的青蛙練習網站]]></title>
    <url>%2F2018%2F05%2F25%2Fflexbox-froggy%2F</url>
    <content type="text"><![CDATA[偶然看到這練習網站 Flexbox Froggy - A game for learning CSS flexbox 實在太有趣了，很快速地就可以完成所有題目，以下將題目解答附上。 24 題目解答Level 1第一題是送分題，簡單介紹怎麼撰寫 1234#pond &#123; display: flex; justify-content: flex-end&#125; Level 21234#pond &#123; display: flex; justify-content:center&#125; Level 31234#pond &#123; display: flex; justify-content: space-around&#125; Level 41234#pond &#123; display: flex; justify-content:space-between&#125; Level 51234#pond &#123; display: flex; align-items:flex-end&#125; Level 612345#pond &#123; display: flex; align-items:center; justify-content:center;&#125; Level 712345#pond &#123; display: flex; align-items:flex-end; justify-content:space-around;&#125; Level 81234#pond &#123; display: flex; flex-direction:row-reverse&#125; Level 91234#pond &#123; display: flex; flex-direction:column;&#125; Level 1012345#pond &#123; display: flex; flex-direction:row-reverse; justify-content:flex-end;&#125; Level 1112345#pond &#123; display: flex; flex-direction:column; justify-content:flex-end;&#125; Level 1212345#pond &#123; display: flex; flex-direction:column-reverse; justify-content:space-between;&#125; Level 13123456#pond &#123; display: flex; flex-direction: row-reverse; justify-content: center; align-items: flex-end;&#125; Level 141234567#pond &#123; display: flex;&#125;.yellow &#123;order: 1&#125; Level 151234567#pond &#123; display: flex;&#125;.red &#123;order: -1&#125; Level 1612345678#pond &#123; display: flex; align-items: flex-start;&#125;.yellow &#123;align-self:flex-end&#125; Level 17123456789#pond &#123; display: flex; align-items: flex-start;&#125;.yellow &#123;align-self: flex-end;order: 1&#125; Level 181234#pond &#123; display: flex; flex-wrap: wrap;&#125; Level 1912345#pond &#123; display: flex; flex-direction: column; flex-wrap: wrap;&#125; Level 201234#pond &#123; display: flex; flex-flow: column wrap&#125; Level 2112345#pond &#123; display: flex; flex-wrap: wrap; align-content: flex-start;&#125; Level 2212345#pond &#123; display: flex; flex-wrap: wrap; align-content: flex-end;&#125; Level 23123456#pond &#123; display: flex; flex-wrap: wrap; flex-direction: column-reverse; align-content: center;&#125; Level 241234567#pond &#123; display: flex; flex-direction: column-reverse; flex-wrap: wrap-reverse; align-content: space-between; justify-content: center;&#125; 重點屬性 justify-content flex-start: 元素和容器的左端對齊。 flex-end: 元素和容器的右端對齊。 center: 元素在容器裏居中。 space-between: 元素之間保持相等的距離。 space-around: 元素周圍保持相等的距離。 align-items flex-start: 元素與容器的頂部對齊。 flex-end: 元素與容器的底部對齊。 center: 元素縱向居中。 baseline: 元素在容器的基線位置顯示。 stretch: 元素被拉伸以填滿整個容器。 flex-direction row: 元素擺放的方向和文字方向一致。 row-reverse: 元素擺放的方向和文字的方向相反。 column: 元素從上放到下。 column-reverse: 元素從下放到上。 order align-self flex-start flex-end center baseline stretch flex-wrap nowrap: 所有的元素都在一行。 wrap: 元素自動換成多行。 wrap-reverse: 元素自動換成逆序的多行。 flex-flow align-content flex-start: 多行都集中在頂部。 flex-end: 多行都集中在底部。 center: 多行居中。 space-between: 行與行之間保持相等距離。 space-around: 每行的周圍保持相等距離。 stretch: 每一行都被拉伸以填滿容器。 參考資料 Flexbox Froggy - A game for learning CSS flexbox]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[利用 URL Rewrite 加入 Tracking Code]]></title>
    <url>%2F2018%2F05%2F10%2Fadd-ga-by-iis-rewrite%2F</url>
    <content type="text"><![CDATA[此篇介紹 URL Rewrite 的運用，利用 URL Rewrite 來附加追蹤程式碼，例如：GA 等。或是某些頁面添加一些特定 javascript code 。 操作環境 IIS使用 IIS 10 來進行示範 追蹤碼追蹤碼使用 google analytics ，以下先附上追蹤碼的範例程式 123456789&lt;!-- Global site tag (gtag.js) - Google Analytics --&gt;&lt;script async src="https://www.googletagmanager.com/gtag/js?id=GA_TRACKING_ID"&gt;&lt;/script&gt;&lt;script&gt; window.dataLayer = window.dataLayer || []; function gtag()&#123;dataLayer.push(arguments);&#125; gtag('js', new Date()); gtag('config', 'GA_TRACKING_ID');&lt;/script&gt; 設定方式主題是使用 URL Rewrite 來附加，所以記得首要條件是安裝好 URL Rewrite 模組。設定方式有兩種，一種是直接透過視窗操作介面設定，另一種是設定好 web.config 。需要注意的是使用 URL Rewrite 來附加，需要關閉動態內容壓縮，因為壓縮後，就無法判斷內容去附加了。 介面設定設定步驟其實在 Microsoft Docs 都有詳細介紹，這邊列出 IIS 的中文介面 開啟 IIS 選擇要設定的站台 選擇 URL Rewrite 模組 點選新增規則，接著選擇輸出規則內的空白規則 輸入規則名稱，接著設定先決條件 設定符合的條件，注意比對範圍是回應(Response)，另外這邊的模式可以不用使用 HTML Encode 編碼 設定動作屬性的值，就是要附加的追蹤碼 config 設定由於要設定在 web.config 所以注意一下標籤，透過 HTML Encode (HTML 編碼轉換)後，再把值設定進去 123456789101112131415&lt;system.webServer&gt; &lt;rewrite&gt; &lt;outboundRules&gt; &lt;rule name="Add tracking script" patternSyntax="ExactMatch" preCondition="IsHTML"&gt; &lt;match filterByTags="None" pattern="&amp;lt;/head&gt;" ignoreCase="true" /&gt; &lt;action type="Rewrite" value="&amp;lt;script async src=&amp;quot;https://www.googletagmanager.com/gtag/js?id=GA_TRACKING_ID&amp;quot;&gt;&amp;lt;/script&gt; &amp;lt;script&gt; window.dataLayer = window.dataLayer || []; function gtag() &#123; dataLayer.push(arguments); &#125; gtag('js', new Date()); gtag('config', 'GA_TRACKING_ID'); &amp;lt;/script&gt;&amp;lt;/head&gt;" /&gt; &lt;/rule&gt; &lt;preConditions&gt; &lt;preCondition name="IsHTML"&gt; &lt;add input="&#123;RESPONSE_CONTENT_TYPE&#125;" pattern="^text/html" /&gt; &lt;/preCondition&gt; &lt;/preConditions&gt; &lt;/outboundRules&gt; &lt;/rewrite&gt;&lt;/system.webServer&gt; 額外附上關閉動態內容壓縮 123&lt;system.webServer&gt; &lt;urlCompression doStaticCompression="true" doDynamicCompression="false" /&gt;&lt;/system.webServer&gt; 參考資料 Microsoft Docs add tracking code]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>IIS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IIS 關閉不安全的 SSL 加密方式(Cipher)]]></title>
    <url>%2F2018%2F05%2F09%2FSSL-Cipher%2F</url>
    <content type="text"><![CDATA[因為 3DES 加密沒有關閉，導致了這個問題，以下是檢測報告的資料。 Insecure Transport: Weak SSL Cipher ( 11285 )SummaryWebInspect has detected support for weak TLS/SSL ciphers on server https://xxx.xxx.xx:443/ . The Transport Layer Security (TLS) and Secure Sockets Layer (SSL) protocols provide a mechanism to help protect authenticity, confidentiality and integrity of the data transmitted between a client and web server. The strength of this protection mechanism is determined by the authentication, encryption and hashing algorithms, collectively known as a cipher suite, chosen for the transmission of sensitive information over the TLS/SSL channel. Most Web servers support a range of such cipher suites of varying strengths. Using a weak cipher or an encryption key of insufficient length, for example, could allow an attacker to defeat the protection mechanism and steal or modify sensitive information. If misconfigured, a web server could be manipulated into choosing weak cipher suites. Recommendations include updating the web server configuration to always choose the strongest ciphers for encryption. 檢查工具想要檢查 Cipher 的工具很多，也有許多線上網站提供線上檢測，以下列出幾種工具: 線上網站Qualys Labs 的 免費檢測工具，選擇 Test your server ，然後輸入網域名稱，以下使用 google 當作範例 輸入網域名稱 檢測結果 NmapNmap 是個指令列檢測工具，在 windows 上的安裝方式也挺容易的，檢查憑證與弱加密方式的測試指令如下： 1nmap --script ssl-cert,ssl-enum-ciphers -p 443,465,993,995 www.google.com OWASP 的Testing for Weak SSL/TLS Ciphers介紹了更多種檢測方式 IIS Crypto此章針對 IIS ，而 IIS 要調整加密方式，有些需要調整 Registry 登錄檔，所以 IIS Crypto 此工具不僅可以查看，還可以快速調整，是相當便利的工具 注意修改後，需要重新開機，不然調整的設定不會立即啟用。 參考資料 Wiki Cipher suite darkthread HTTPS網站被Chrome打臉？ OWASP Testing for Weak SSL/TLS Ciphers OWASP Transport Layer Protection Cheat Sheet 浮雲雅築瀏覽器預設 HTTPS SSL Cipher 加密優先順序]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>IIS</tag>
        <tag>security</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[透過 IIS 來設定 Hidden Segments]]></title>
    <url>%2F2018%2F05%2F08%2FHidden-Segments%2F</url>
    <content type="text"><![CDATA[此篇提到了網站的目錄不受保護，或者說是敏感性資料夾名稱；簡單說就是整個網站系統有幾個資料夾被使用者得知。 Web Server Misconfiguration: Unprotected Directory ( 10224 )SummaryIIS/Microsoft product directories were discovered within your web application during a Directory Enumeration scan. Risks associated with an attacker discovering a directory on your application server depend upon what type of directory is discovered, and what types of files are contained within it. The primary threat, other than accessing files containing sensitive discovered, and what types of files are contained within it. The primary threat, other than accessing files containing sensitive information, is that an attacker can utilize the information discovered in that directory to perform other types of attacks. Recommendations include restricting access to important directories or files by adopting a “need to know” requirement for both the document and server root, and turning off features such as Automatic Directory Listings that provide information that could be utilized by an attacker when formulating or conducting an attack. 處理方式此篇主要使用 Hidden Segments 來封閉網站的資料夾，此種作法會讓此資料夾的 URL 連線的時候回應 404 ，直接讓此資料夾不對外連線，所以此方式適用部分檔案不對外開放的資料夾，例如一些抽取的 appsetting 檔案等。 另外一種情形則是網站要求有權限的使用者才可以下載的檔案，這些資料夾路徑假如也是此種弱點的話，有兩種方式處理： 變換資料夾名稱，讓人不那麼容易一眼猜出其內容 轉換程式作法，檔案需要透過網站程式轉換資料流去提供使用者下載 IIS 設定方式 選擇要求篩選 (Request Filtering) 選擇隱藏區段 (Hidden Segments) 點選隱藏區段… (Add Hidden Segment…) 設定要隱藏的名稱 web.config 設定設定方式很簡單，如下 12345678910&lt;system.webServer&gt; &lt;security&gt; &lt;requestFiltering&gt; &lt;hiddenSegments&gt; &lt;!-- 資料夾名稱 --&gt; &lt;add segment="folderName" /&gt; &lt;/hiddenSegments&gt; &lt;/requestFiltering&gt; &lt;/security&gt;&lt;/system.webServer&gt; 假如想要設定副檔名、指令動詞、高位元字元，可以參考下列的設定，這幾項設定都是 true 或是 false 設定 1234567891011121314&lt;system.webServer&gt; &lt;security&gt; &lt;!-- 高位元字元 --&gt; &lt;requestFiltering allowHighBitCharacters="true"&gt; &lt;hiddenSegments&gt; &lt;add segment="folderName" /&gt; &lt;/hiddenSegments&gt; &lt;!-- 副檔名 --&gt; &lt;fileExtensions allowUnlisted="true" /&gt; &lt;!-- 指令動詞 --&gt; &lt;verbs allowUnlisted="true" /&gt; &lt;/requestFiltering&gt; &lt;/security&gt;&lt;/system.webServer&gt; 呈現效果設定完成後，其頁面會回傳 404.8 參考資料 Microsoft Docs]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>IIS</tag>
        <tag>security</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[在 IIS 設定 HSTS 標頭]]></title>
    <url>%2F2018%2F05%2F08%2FHSTS-Security%2F</url>
    <content type="text"><![CDATA[HSTS 對於公司專案內的部分單位而言幾乎是毫無作用，因為使用的瀏覽器不支援，所以此次被掃出來。 Insecure Transport: HSTS not Set ( 11365 )SummaryHttp Strict Transport Security (HSTS) policy enables web applications to enforce web browsers to restrict communication with the server over an encrypted SSL/TLS connection for a set period. Policy is declared via special Strict Transport Security response header. Encrypted connection protects sensitive user and session data from attackers eavesdropping on network connection.Consider following attack scenarios: Users often omit the URI scheme i.e. https:\\ when typing a URL in location bar to access a website. Also third party websites can link to the site using the “http” scheme instead of “”https”. This could result in an initial connection to a HTTPS-enabled site over an unencrypted channel. An eavesdropping attacker can hijack this unencrypted connection and replace the intended use of HTTPS protocol with HTTP in an attack known as SSLStrip, granting unauthorized access to all subsequent traffic. Websites often transfer non-sensitive resources such as help documents over an unencrypted HTTP connection. Any cookies without a secure flag are sent along with such requests potentially disclosing sensitive user and session data to eavesdropper. Man-in-the-Middle attacks that exploit user tendencies to override invalid certification warnings, e.g. SSLSniff. For web sites configured with an accurate HSTS policy, browsers automatically upgrade any HTTP connections to HTTPS. Furthermore, browsers prevent users from overriding any host certificate warnings. HSTS offers an effective defense against above attack scenarios. HSTS 介紹The HTTP Strict-Transport-Security response header (often abbreviated as HSTS) lets a web site tell browsers that it should only be accessed using HTTPS, instead of using HTTP.資料來源 - MDN HSTS(HTTP Strict Transport Security) 是一份國際標準規格 (RFC 6797) 網際網路瀏覽安全的機制，主要用來宣告瀏覽器與伺服器之間的通訊方式必須強制使用 TLS/SSL 加密通道，只要從伺服器端送出一個 Strict-Transport-Security 標頭 (Header) 給瀏覽器，就可以告訴瀏覽器在未來的某段時間內一律使用 SSL 連接該網站 (可設定包含所有子域名網站)，如果有發生憑證失效的情況，使用者將無法瀏覽該網站，如此一來便可大幅減少中間人攻擊的問題發生。 IIS 的設定此篇設定在 scott 的文章中提過，也詳細說明了如何設定，因為 HSTS 必須在 HTTPS 的 head 去附加才符合規範，比較好的做法是透過 Rewrite 設定條件式來附加，如下所示 123456789101112131415161718192021222324252627&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;configuration&gt; &lt;system.webServer&gt; &lt;rewrite&gt; &lt;rules&gt; &lt;rule name="HTTP to HTTPS redirect" stopProcessing="true"&gt; &lt;match url="(.*)" /&gt; &lt;conditions&gt; &lt;add input="&#123;HTTPS&#125;" pattern="off" ignoreCase="true" /&gt; &lt;/conditions&gt; &lt;action type="Redirect" url="https://&#123;HTTP_HOST&#125;/&#123;R:1&#125;" redirectType="Permanent" /&gt; &lt;/rule&gt; &lt;/rules&gt; &lt;outboundRules&gt; &lt;rule name="Add Strict-Transport-Security when HTTPS" enabled="true"&gt; &lt;match serverVariable="RESPONSE_Strict_Transport_Security" pattern=".*" /&gt; &lt;conditions&gt; &lt;add input="&#123;HTTPS&#125;" pattern="on" ignoreCase="true" /&gt; &lt;/conditions&gt; &lt;action type="Rewrite" value="max-age=31536000" /&gt; &lt;/rule&gt; &lt;/outboundRules&gt; &lt;/rewrite&gt; &lt;/system.webServer&gt;&lt;/configuration&gt; 參考資料 MDN HSTS Wiki HSTS Can I Use:HSTS OWASP HSTS SCOTT HANSELMAN]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>IIS</tag>
        <tag>security</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Cache-Control 在 IIS 上的設定]]></title>
    <url>%2F2018%2F05%2F08%2Fcache-control%2F</url>
    <content type="text"><![CDATA[前陣子公司專案由第三方弱掃，接下來的筆記就會紀錄多個專案都有的問題點 Cache Management: Insecure Policy ( 11306 )SummaryWebInspect has detected a potentially unsafe cache control policy for secure content. While content transmitted over an SSL/TLS channel is expected to guarantee confidentiality, administrators must nonetheless ensure that caching of sensitive content is disabled unless absolutely needed. The misconception that secure content caching is disabled by default by user-agents could cause the application to fail the organization’s cache policy by leaving the secure content cacheable by browsers. Unsafe specification such as Cache-Control: public would instruct the browser to persistently cache the content on the hard drive. Caching can be prevented by specifying one of the following three directives in the response headers · Cache-control: private· Cache-Control: no-cache· Cache-Control: no-store 第三方的掃描軟體為 Fortify WebInspect Enterprise ，這是一套付費軟體，提供 15 天的試用，而且功能全部開放試用，但是鎖定只能掃描 zero.webappsecurity.com IIS 設定方式在微軟的文件中有關於 Client Cache 的設定說明，以下列出 cache-control 在 response 的設定 Cache-Control: must-revalidate Cache-Control: no-cache Cache-Control: no-store Cache-Control: no-transform Cache-Control: public Cache-Control: private Cache-Control: proxy-revalidate Cache-Control: max-age=&lt;seconds&gt; Cache-Control: s-maxage=&lt;seconds&gt; 在 IIS 的操作介面中設定相當便利，只要選擇 HTTP 回應標頭 就可以進入設定 接著選擇設定一般標頭就可以設定快取時間 使用 web.config 設定設定不使用快取 1234567&lt;configuration&gt; &lt;system.webServer&gt; &lt;staticContent&gt; &lt;clientCache cacheControlMode="DisableCache" /&gt; &lt;/staticContent&gt; &lt;/system.webServer&gt;&lt;/configuration&gt; 設定過期時間為 8 天 1234567&lt;configuration&gt; &lt;system.webServer&gt; &lt;staticContent&gt; &lt;clientCache cacheControlMode="UseMaxAge" cacheControlMaxAge="8.00:00:00" /&gt; &lt;/staticContent&gt; &lt;/system.webServer&gt;&lt;/configuration&gt; 設定完成檢驗檢查方式可以透過 Chrome 等瀏覽器，開啟開發者工具，透過 Network 就可以觀察到 response headers 參考資料 IIS/ASP.NET responds with cache-control: private for all requests Microsoft docs]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>IIS</tag>
        <tag>security</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS Grid 筆記 21-Flexbox vs CSS Grid]]></title>
    <url>%2F2018%2F04%2F30%2Fcss-grid-21%2F</url>
    <content type="text"><![CDATA[此篇是透過幾個不同的練習範例，運用 flexbox 或是 css grid 來達成目標結果 Demo | Github Flexbox vs CSS Grid此篇練習了以下幾個主題 Axis Flipping! Controls on Right! Flex on Item! Perfectly Centered! Self Control! Stacked Layout! Unknown Content Size! Unknown Number of Items! Variable Widths on Each Row! Axis Flipping練習使用 auto-fit 來達到基準軸線的變動 123456789.flipper &#123; display: grid; grid-gap: 10px; grid-template-columns: repeat(auto-fit, minmax(50px, 1fr));&#125;.flipper.flip &#123; grid-template-columns: 1fr;&#125; Controls on Right把控制的項目置右，主要是 grid-auto-flow 12345678.track &#123; background: white; padding: 10px; border-bottom: 1px solid rgba(0, 0, 0, 0.1); display: grid; grid-template-columns: 1fr; grid-auto-flow: column;&#125; Flex on Item可以使用 flex 或是 grid 來達成 使用 flex 12345678910111213.controls &#123; margin: 200px 0; display:flex; align-items: center;&#125;.scrubber &#123; background: #BADA55; height: 10px; min-width: 100px; border-radius: 10px; flex: 1;&#125; 使用 grid 12345678910111213.controls &#123; margin: 200px 0; display: grid; grid-template-columns: auto auto auto 1fr auto auto; align-items: center;&#125;.scrubber &#123; background: #BADA55; height: 10px; min-width: 100px; border-radius: 10px;&#125; Perfectly Centered此練習也是兩種方法都可以達成 flex 12345678.hero &#123; height: 200px; background: rgba(255, 255, 255, 0.2); display: flex; align-items: center; justify-content: center; flex-direction: column;&#125; grid 1234567.hero &#123; height: 200px; background: rgba(255, 255, 255, 0.2); display: grid; align-content: center; justify-items: center;&#125; Self Control讓區塊資料按照邊框對齊 12345678910111213141516171819.corners &#123; display: grid; height: 200px; width: 200px; border: 10px solid var(--yellow); grid-template: 1fr 1fr/1fr 1fr; align-items: end; justify-items: end;&#125;.corner:nth-child(1),.corner:nth-child(2) &#123; align-self: start;&#125;.corner:nth-child(1),.corner:nth-child(3) &#123; justify-self: start;&#125; Stacked Layout排列多行，且內容的大小一致，其間格按照各行的剩餘空間平均分配 12345678910.stacked &#123; display: flex; flex-wrap: wrap; justify-content: space-around;&#125;.stacked&gt;* &#123; width: 30%; margin-bottom: 20px;&#125; Unknown Content Size把一個縱列變成橫列 1234567.known &#123; margin: 100px 0; display: grid; grid-template-columns: repeat(5,auto); grid-gap: 20px; justify-content: center;&#125; Unknown Number of Items不知道內容元素的數量，利用 auto-fit 來調整 12345.unknown &#123; display: grid; grid-template-columns: repeat(auto-fit ,minmax(50px, 1fr)); grid-gap: 20px;&#125; Variable Widths on Each Row每一元素寬度都不同 12345678910.flex-container &#123; display: flex; flex-wrap: wrap; border: 1px solid black;&#125;.flex-container&gt;* &#123; margin: 10px; flex: 1;&#125; 線上展示 筆記與備註事項flex-directionCSS flex-direction 属性指定了内部元素是如何在 flex 容器中布局的，定义了主轴的方向(正方向或反方向)。 注意，值 row 和 row-reverse 受 flex 容器的方向性的影响。 如果它的 dir 属性是 ltr，row 表示从左到右定向的水平轴，而 row-reverse 表示从右到左; 如果 dir 属性是 rtl，row 表示从右到左定向的轴，而 row-reverse 表示从左到右。 資料來源 - MDN flex-wrapCSS flex-wrap 指定 flex 元素单行显示还是多行显示 。如果允许换行，这个属性允许你控制行的堆叠方向。資料來源 - MDN 參考資料 CSS-Grid 課程 作者 Wes Bos CSS-Grid Github 我的 CSS-Grid 練習Github]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>CSSGrid25</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SQL Server 的 Bak 檔案還原]]></title>
    <url>%2F2018%2F04%2F27%2Frestore-backup-db-file-to-sql-server%2F</url>
    <content type="text"><![CDATA[此篇單純使用 GUI 介面操作，不使用 Query Script ，快速上手就好。以下操作範例之環境是使用 SQL Server 2008 R2 首先在物件總管中，按下滑鼠右鍵，選擇還原檔案和檔案群組 當顯示還原檔案和檔案群組的視窗畫面中，選擇目的地資料庫，或是自訂一個新的資料庫名稱(sql server 會自動還原建立該新資料庫名稱)，接著選擇來源裝置選取 .bak 檔案 選擇 .bak 檔案加入 選擇後不要忘記勾選還原的項目，設定畫面如下 注意新版 SQL Server 備份出來的檔案無法還原至較舊的 SQL Server 中 參考資料 microsoft docs restore full recovery]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>SQLServer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git 案例演練-完成的功能暫時不釋出]]></title>
    <url>%2F2018%2F04%2F21%2Fgit-case-001%2F</url>
    <content type="text"><![CDATA[git 的分支操作非常便利，有些人知道便利性，但是在實務上有些不太清楚如何操作，其遇到的情形如下:開發者單獨一人，所以僅使用 master 分支，添加的功能完成後，客戶說此功能暫時不釋出，另外進行其他功能開發 ；以下使用範例來做說明。 範例採用 Sourcetree 這 GUI 介面來操作，先列出一開始的畫面，預設已經有幾個 commit 在上面了 123456789git log --oneline --graph* cde5162 (HEAD -&gt; master, origin/master) Feature continue 02* c07f436 Feature continue 01* 784bbc1 Feature start* 8859082 寫入第五行資料* baae3d4 寫入第四行資料* d3a483d 寫入第三行資料* 53c074f 寫入第二行資料* 09369db 加入檔案 預定 Feature 開頭的 commit 都是客戶說暫時不釋出的新功能，所以先在最後的 (cde5162) Feature continue 02 這筆資料設定 Branch 附上操作指令 1git branch Feature cde5162 接著將現在所處的分支切換回 master ，直接連點 master 或是在 master 點擊滑鼠右鍵呼叫選單進行 附上操作指令 1git checkout master 切換好之後，就要將 master 切換到寫入第五行資料的 commit ，在這個 commit 上點擊滑鼠右鍵呼叫選單，選擇 reset 接著選擇 Hard 模式即可 附上操作指令 1git reset -q --hard 8859082 這樣操作就可以了，再來看一下 Graph ，會發現好像沒什麼變化 但是繼續添加 commit 的時候就會發現變動了 此範例使用的 Repo 已在 Github 上，並且只有初始的 commit ，這樣方便實際操作練習]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mklink 指令建立 Symbolic Link]]></title>
    <url>%2F2018%2F04%2F21%2Fmklink-command%2F</url>
    <content type="text"><![CDATA[這功能簡單說就是建立指向目錄或是檔案的連結，例如： C:\temp 資料夾設定指向 D:\temp ，這樣原本 C:\temp 都會儲存到 D:\temp 內，類似捷徑的概念，以下就來詳細看看用法語介紹。 mklink先看看 microsoft 文件上的說明 Creates a symbolic link.資料來源 - microsoft docs 語法 (Syntax)1mklink [[/d] | [/h] | [/j]] &lt;Link&gt; &lt;Target&gt; 參數 (Parameters)沒有參數設定的話，預設情形下，建立的會是檔案的 Symbolic link Parameter Description /d 建立資料夾的 Symbolic link /h 建立 hard link 取代 Symbolic link /j 建立資料夾的 Junction &lt;Link&gt; 指定建立的 Symbolic link 名稱 &lt;Target&gt; 指定新 Symbolic link 的相對 (relative) 或絕對 (absolute) 路徑 /? 顯示指令說明 範例建立一個資料夾的 Symbolic link ，由來源為 mklink_source 指向 mklink_target 操作環境123$ systeminfo | findstr /B /C:"OS Name" /C:"OS Version"OS Name: Microsoft Windows 10 ProOS Version: 10.0.16299 N/A Build 16299 在 windows 10 下，指向目標資料夾不需要建立，指令會自動建立 1mklink /d mklink_target mklink_source 建立完成後，比較一下資料夾外觀，需要注意的是，資料夾類型都是 File folder ，而且圖示與捷徑相同，但是捷徑的類型是 Shortcut 不需要的時候 symbolic link 直接移除資料夾即可 參考資料 microsoft docs mklink WiKi Symbolic link]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>Windows Commands</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SQL 中的 MERGE 語法]]></title>
    <url>%2F2018%2F04%2F19%2Fsql-merge-into%2F</url>
    <content type="text"><![CDATA[有新人在問，乾脆記錄下來，這樣方便查詢與說明，另外順便重新比較一下效能。 MERGE先來看看 microsoft docs 上的定義 根據與來源資料表聯結的結果，在目標資料表上執行插入、更新或刪除作業。 例如，您可以根據在另一個資料表中所找到的差異在資料表中插入、更新或刪除資料列，以同步處理兩個資料表。 效能提示：當兩個資料表有複雜的比對特性時，MERGE 陳述式的條件式行為表現最佳。 例如沒有資料列時插入資料列，或資料列相符時更新資料列。 只要根據另一個資料表的資料列更新資料表，基本 INSERT、 UPDATE 及 DELETE 陳述式就能提升效能及可調適性。資料來源 - microsoft docs 看到上述的說明指出這語法適用比對條件複雜的情境。範例語法如下：註：SQL Server (從 2008 開始) 1234567891011--Table A : 要 Update / Insert 的 Table--Table B : 要用來比較並取得相關資料的 Table (或 subQuery )-- ON : 表你自訂條件, 用以判斷 Matched 與否MERGE table_A AS targetUSING table_B AS source ON target.id = source.idWHEN MATCHED THEN UPDATE SET col = @colWHEN NOT MATCHED THEN INSERT (colkey) VALUES (@col); 當資料表只有簡易比對時可以考慮改用 EXISTS 判斷資料是否存在，再決定要 Insert 或 Update ，如下： 123456789101112131415161718-- 寫法 1IF EXISTS (SELECT 1 FROM table_A WHERE col = @col)BEGIN UPDATE table_A SET ... WHERE key = @colENDELSEBEGIN INSERT INTO table_A (col, ...) VALUES (@col, ...)END-- 寫法 2INSERT table_A (col, col2)SELECT col, col2FROM table_BWHERE NOT EXISTS (SELECT col FROM table_A WHERE table_A.col = table_B.col); 範例測試環境如下，採用 SQL Server Profiler 監測 12Microsoft SQL Server 2016 (SP1) (KB3182545) - 13.0.4001.0 (X64)Windows 10 Pro 6.3 &lt;X64&gt; (Build 16299) 實際看範例操作吧 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114SET NOCOUNT ON;-- 確認暫存表是否存在，並移除存在的暫存表IF OBJECT_ID('tempdb..#Merge_Target') IS NOT NULLDROP TABLE #Merge_TargetIF OBJECT_ID('tempdb..#Merge_Source') IS NOT NULLDROP table #Merge_SourceIF OBJECT_ID('tempdb..#Target') IS NOT NULLDROP TABLE #TargetIF OBJECT_ID('tempdb..#Source') IS NOT NULLDROP table #Source-- 建立測試用暫存表 (merge 目標資料表)CREATE TABLE #Merge_Target( ID BIGINT PRIMARY KEY ,Value INT);-- 建立測試用暫存表 (merge 資料來源資料表)CREATE TABLE #Merge_Source( ID BIGINT PRIMARY KEY ,Value INT);-- 建立測試用暫存表 (insert update 目標資料表)CREATE TABLE #Target( ID BIGINT PRIMARY KEY ,Value INT);-- 建立測試用暫存表 (insert update 資料來源資料表)CREATE TABLE #Source( ID BIGINT PRIMARY KEY ,Value INT);-- 清除暫存表資料TRUNCATE TABLE #Merge_Source;TRUNCATE TABLE #Merge_Target;TRUNCATE TABLE #Source;TRUNCATE TABLE #Target;-- 建立百萬筆隨機資料 (merge 目標資料表)WITH Tally (n) AS( SELECT TOP 1000000 ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) FROM sys.all_columns a CROSS JOIN sys.all_columns b)INSERT INTO #Merge_TargetSELECT 2*n, 1+ABS(CHECKSUM(NEWID()))%1000FROM Tally;-- 建立百萬筆隨機資料 (merge 資料來源資料表)WITH Tally (n) AS( SELECT TOP 1000000 ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) FROM sys.all_columns a CROSS JOIN sys.all_columns b)INSERT INTO #Merge_SourceSELECT CASE WHEN n &lt;= 500000 THEN 2*n-1 ELSE 2*n END ,1+ABS(CHECKSUM(NEWID()))%1000FROM Tally;GO-- 建立百萬筆隨機資料 (insert update 目標資料表)WITH Tally (n) AS( SELECT TOP 1000000 ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) FROM sys.all_columns a CROSS JOIN sys.all_columns b)INSERT INTO #TargetSELECT 2*n, 1+ABS(CHECKSUM(NEWID()))%1000FROM Tally;-- 建立百萬筆隨機資料 (insert update 資料來源資料表)WITH Tally (n) AS( SELECT TOP 1000000 ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) FROM sys.all_columns a CROSS JOIN sys.all_columns b)INSERT INTO #SourceSELECT CASE WHEN n &lt;= 500000 THEN 2*n-1 ELSE 2*n END ,1+ABS(CHECKSUM(NEWID()))%1000FROM Tally;GO-- MERGEMERGE #Merge_Target tUSING #Merge_Source sON s.ID = t.IDWHEN MATCHED THEN UPDATE SET Value = s.ValueWHEN NOT MATCHED THEN INSERT (ID, Value) VALUES(s.ID, s.Value);GO-- UPDATE/INSERTBEGIN TRANSACTION T1;UPDATE tSET Value = s.ValueFROM #Target tJOIN #Source s ON s.ID = t.ID;INSERT INTO #TargetSELECT s.ID, s.ValueFROM #Source sLEFT JOIN #Target t ON s.ID = t.IDWHERE t.ID IS NULL;COMMIT TRANSACTION T1;GODROP TABLE #Source;DROP TABLE #Target; 其效能評比如下圖，由於此測試是使用目標與來源資料表的比較方式進行，而且比對條件單純 CPU 事件使用的 CPU 時間(毫秒) Reads 由伺服器代表事件讀取邏輯磁碟的次數 Writes 由伺服器代表事件寫入物理磁碟的次數 Duration 事件占用的時間(平均執行時間) 參考資料 Microsoft Docs Microsoft technet Performance of the SQL MERGE vs. INSERT/UPDATE]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>T-SQL</tag>
        <tag>SQLServer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[專案發生 Error CS1010,CS1056 錯誤]]></title>
    <url>%2F2018%2F04%2F17%2Ferror-CS1010-CS1056-in-VS2017%2F</url>
    <content type="text"><![CDATA[接手一個悠久歷史的專案，但是版控有點混亂，所以正在重新整理。過程中，發生了各項問題，然後耗費最多時間的，就是標題上的錯誤了。 問題描述先附上開發環境 123OS Name: Microsoft Windows 10 ProOS Version: 10.0.16299 N/A Build 16299Editor: Visual Studio Enterprise 2017 Version 15.6.6 先說明這是一個 webform 的 website project ，發生的錯誤訊息如下 error CS1010: Newline in constanterror CS1056: Unexpected character ‘’error CS1056: Unexpected character ‘’error CS1056: Unexpected character ‘’error CS1010: Newline in constant 問題分析看說明，初步認為幾個可能： 檔案內容內的 { 之類的缺少或是跑掉，造成有些錯誤仔細看過後，發現完全沒有這種現象，直接排除 字串變數的內容有些文字的編碼問題調整了字串內容的編碼，但是毫無影響，也排除 換行符號等一開始認為這個可能性最高，除了換行符，或是其他特殊字元影響，透過 notepad++ 查看，發現也不是此可能 編碼問題上述的特殊字元排除後，就想到編碼問題，但是查看後，發現檔案是 utf-8 ，也沒有亂碼的現象，一度以為不是此可能了。最後發現 aspx 頁面的編碼與對應的 .cs 檔案編碼不同；aspx 頁面編碼是 utf-8 BOM 解決方式找到問題後，解決方式很簡易，讓兩個檔案的編碼相同即可；透過 notepad++ 或是 VSCode 或是 Visual Studio 2017 另存新檔，然後選擇編碼，以上這些都可以變更檔案編碼，以下附上 Visual Studio 2017 變更編碼的圖片。有興趣想了解 BOM 的，請看連結的 wiki]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>Visual Studio</tag>
        <tag>Troubleshooting</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS Grid 筆記 20-CSS Grid Image Gallery]]></title>
    <url>%2F2018%2F04%2F16%2Fcss-grid-20%2F</url>
    <content type="text"><![CDATA[結合前幾篇，使用 js 與 css 完成表格布置的排版，應用巢狀表格 完成圖片隨機大小的表格呈現 Demo | Github CSS Grid Image Gallery此練習初始 html 如下： 123456789&lt;div class="overlay"&gt; &lt;div class="overlay-inner"&gt; &lt;button class="close"&gt;× Close&lt;/button&gt; &lt;img&gt; &lt;/div&gt;&lt;/div&gt;&lt;section class="gallery"&gt;&lt;/section&gt; 接著撰寫 javascript ，以下 js 連帶說明一起附上 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596// 宣告 gallery 取得 .gallery elementconst gallery = document.querySelector('.gallery');// 宣告 overlay 取得 .overlay elementconst overlay = document.querySelector('.overlay');// 宣告 overlayImage 取得 img elementconst overlayImage = overlay.querySelector('img');// 宣告 overlayClose 取得 .close elementconst overlayClose = overlay.querySelector('.close');/** * 產生圖片畫廊的 html * h 是 grid-column 跨越 column 數量 * v 是 grid-row 跨越 row 數量 * @param &#123;any&#125; [h, v] [grid-column grid-row] * @returns html 字串 */function generateHTML([h, v]) &#123; // 圖片採用隨機選擇 images/$&#123;randomNumber(12)&#125;.jpg return ` &lt;div class="item h$&#123;h&#125; v$&#123;v&#125;"&gt; &lt;img src="images/$&#123;randomNumber(12)&#125;.jpg"&gt; &lt;div class="item__overlay"&gt; &lt;button&gt;View →&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; `;&#125;/** * 隨機數字 * @param &#123;any&#125; limit 範圍大小 * @returns 隨機數字 */function randomNumber(limit) &#123; return Math.floor(Math.random() * limit) + 1;&#125;/** * 按下 VIEW-&gt; 觸發事件 * 開啟原始圖片大小的畫面 * @param &#123;any&#125; e */function handleClick(e) &#123; // 取得點選 grid 圖片的路徑 const src = e.currentTarget.querySelector('img').src; // 設定呈現原始圖片大小的 html tag 路徑 overlayImage.src = src; // 設定 css 顯示 overlay.classList.add('open');&#125;/** * 關閉原始圖片大小的畫面 */function close() &#123; overlay.classList.remove('open');&#125;// 產生一組長度 50 的巢狀 array// 每一元素都是 array [隨機數字, 隨機數字]// 隨機數字最大值為 4 ，最小值為 1// 另外合併幾組 array [1,1]const digits = Array.from(&#123;length: 50&#125;, () =&gt; [randomNumber(4), randomNumber(4)]).concat([ [1, 1], [1, 1], [1, 1], [1, 1], [1, 1], [1, 1], [1, 1], [1, 1], [1, 1], [1, 1], [1, 1], [1, 1], [1, 1], [1, 1], [1, 1], [1, 1], [1, 1], [1, 1]]);// 利用 digits 的陣列，產生圖片 html const html = digits.map(generateHTML).join('');// 將產生的 html 寫入到畫面gallery.innerHTML = html;// 取得所有 .item 的元素const items = document.querySelectorAll('.item');// 進行觸發事件的綁定items.forEach(item =&gt; item.addEventListener('click', handleClick));// 關閉畫面的事件綁定overlayClose.addEventListener('click', close); 設定完成 javascript ，就可以來處理 css 了，針對 .gallery 讓圖片畫面集中，所以使用 grid-auto-flow 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134* &#123; box-sizing: border-box;&#125;body &#123; padding: 50px; font-family: sans-serif; background: linear-gradient(to right, #F93D66, #6D47D9);&#125;h1,h2,h3,h4,h5,h6 &#123; margin: 0 0 5px 0;&#125;p &#123; margin: 0 0 20px 0;&#125;/* 關閉按鈕樣式 */.close &#123; background: none; color: black; border: 0;&#125;.gallery &#123; display: grid; grid-template-columns: repeat(auto-fill, 100px); grid-auto-rows: 100px; /* 讓 grid 集中 */ grid-auto-flow: dense;&#125;.item &#123; overflow: hidden; display: grid; grid-template-columns: 1; grid-template-rows: 1;&#125;.item img &#123; grid-column: 1/-1; grid-row: 1/-1; width: 100%; height: 100%; /* 圖片填滿畫面 */ object-fit: cover;&#125;.item__overlay &#123; /* 背景顏色除了顏色加上透明度 rrggbbaa */ background: #ffc60032; grid-column: 1/ -1; grid-row: 1/-1; position: relative; display: grid; /* 排版置中 */ justify-items: center; align-items: center; transition: 0.2s; /* 將按鈕先隱藏 */ transform: translateY(100%);&#125;.item__overlay button &#123; background: none; border: 2px solid white; color: white; text-transform: uppercase; background: rgba(0, 0, 0, 0.7); padding: 5px;&#125;.item:hover .item__overlay &#123; /* 讓隱藏按鈕出現 */ transform: translateY(0);&#125;.item.v2 &#123; grid-row: span 2;&#125;.item.v3 &#123; grid-row: span 3;&#125;.item.v4 &#123; grid-row: span 4;&#125;.item.h2 &#123; grid-column: span 2;&#125;.item.h3 &#123; grid-column: span 3;&#125;.item.h4 &#123; grid-column: span 4;&#125;.overlay &#123; position: fixed; background: rgba(0, 0, 0, 0.7); top: 0; right: 0; bottom: 0; left: 0; display: none; z-index: 2;&#125;.overlay.open &#123; display: grid; align-items: center; justify-items: center;&#125;.overlay-inner &#123; background: white; width: 700px; padding: 20px;&#125;.overlay img &#123; width: 100%;&#125; 線上展示 筆記與備註事項object-fit首先來看一下 MDN 上的定義 The object-fit CSS property specifies how the contents of a replaced element should be fitted to the box established by its used height and width.資料來源 - MDN 此段說明了 object-fit 主要是設定 replaced element (置換元素)，置換元素的定義，請參考以下 CSS 中所謂的「置換元素 (Replaced element)」，即是該元素所呈現的內容不在 CSS 的控制範圍之內。這類外部物件所呈現的內容均獨立於 CSS 之外。常見的置換元素包含 &lt;img&gt;、&lt;object&gt;、&lt;video&gt;，或如 &lt;textarea&gt; 與 &lt;input&gt; 的表單元素。某些元素 (像是 &lt;audio&gt; 或 &lt;canvas&gt;) 只有在特殊情況下才是置替換元素。若是透過 CSS content 屬性所插入的物件，則稱為「不具名置換元素 (Anonymous replaced elements)」。資料來源 - MDN object-fit 的設定屬性有以下，其定義說明如下： fill：預設值，會填滿設定的容器大小，不管原檔比例 contain：保持原檔比例，並縮放至可以放進容器的大小。所以，容器內可能會有空白的地方 cover：保持原檔比例，替換內容大於容器尺寸。因此，部分內容可能會被遮蔽 none：保持原檔大小，不做任何調整 scale-down：會選擇 none 或 contain 兩者間呈現較小尺寸的那個設定 參考資料 CSS-Grid 課程 作者 Wes Bos CSS-Grid Github 我的 CSS-Grid 練習Github]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>CSSGrid25</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS Grid 筆記 19-Nesting Grid With Album Layouts]]></title>
    <url>%2F2018%2F04%2F11%2Fcss-grid-19%2F</url>
    <content type="text"><![CDATA[此篇介紹巢狀 grid 的佈置設定 Demo | Github Nesting Grid with Album Layouts使用的都是前幾篇提過的運用，需要注意的是圖片的寬度沒有設定的話，就會按照原本圖片大小顯示，會超出 grid 配置的欄位 所以只需要設定圖片寬度 100% 就會縮放大小至 grid 的大小 12345678910111213141516171819.albums &#123; display: grid; grid-template-columns: repeat(auto-fit, minmax(400px , 1fr)); grid-gap: 20px;&#125;.album &#123; background: rgba(255, 255, 255, 0.2); box-shadow: 0 0 5px rgba(0, 0, 0, 0.1); padding: 20px; display: grid; grid-template-columns: 150px 1fr; grid-gap: 10px; align-items: center;&#125;.album__artwork&#123; width: 100%;&#125; 線上展示 參考資料 CSS-Grid 課程 作者 Wes Bos CSS-Grid Github 我的 CSS-Grid 練習Github]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>CSSGrid25</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git Push 出現 Auto Packing the Repository in Background for Optimum Performance]]></title>
    <url>%2F2018%2F04%2F05%2Fgit-help-gc%2F</url>
    <content type="text"><![CDATA[發生時機不太能確定，但是發生後只好按照提示的說明進行 git gc 清理了，以下列出發生的環境 環境OS Name: Microsoft Windows 10 ProOS Version: 10.0.16299 N/A Build 16299git version: 2.17.0.windows.1 錯訊訊息如下 Auto packing the repository in background for optimum performance.See “git help gc” for manual housekeeping. 解決方式按照提供的訊息，需要進行 gc 處理，所以可以參照以下指令處理，首先使用 git fsck 此工具會檢查 git repository 的資料完整性 1git fsck 此指令會列出已經不在 git tree 上的物件資料，假如沒有這些資料的話，此指令就不會列出；所以當確定有這些資料，就可以進行 gc 清理 1git gc --prune=now 上述的指令請小心使用，因為這會清理掉這些物件 參考資料 stackoverflow git-fcsk document]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS Grid 筆記 18-Re-Ordering Grid Items]]></title>
    <url>%2F2018%2F04%2F05%2Fcss-grid-18%2F</url>
    <content type="text"><![CDATA[此篇相當簡易，說明 order 這個屬性的功能 Demo | Github Re-ordering Grid Itemsgrid 的表格排列順序是由左上開始向右遞增，如下表的形式 1 2 3 4 5 6 7 8 9 10 11 12 假如想調整位置，先前提過的設定可以直接針對 start 與 end 去設定，但是若是想要安排順序的話，使用 start 與 end 設定就必須針對每個表格進行計算，這樣的設定太過麻煩，有更好的方式可以進行處理，就是 order ，以下使用範例來說明： 首先原本樣式如此， logo 後是 nav 接著是 content ，用表格排列則是 logo nav content 1234567&lt;div class="container"&gt; &lt;div class="item logo"&gt;LOGO&lt;/div&gt; &lt;div class="item nav"&gt;NAV&lt;/div&gt; &lt;div class="item content"&gt; &lt;p&gt;I'm the Content!&lt;/p&gt; &lt;/div&gt;&lt;/div&gt; 當使用 order 排列，可以重新指定順序，需要注意的是 order 的預設值是 0 ，所以設定可以是由 0 開始，或是自訂 1234567891011121314151617181920.container &#123; display: grid; grid-gap: 20px; grid-template-columns: repeat(10, 1fr);&#125;.logo &#123; grid-column: span 2; order: 2;&#125;.nav &#123; grid-column: span 8; order: 1;&#125;.content &#123; grid-column: 1/-1; order: 3;&#125; nav logo content 線上展示 筆記與備註事項order預設的 order 值是 0 CSS order 屬性規定了彈性容器中的可伸縮項目在佈局時的順序。元素按照 order 屬性的值的增序進行佈局。擁有相同 order 屬性值的元素按照它們在源代碼中出現的順序進行佈局。資料來源 - MDN 參考資料 CSS-Grid 課程 作者 Wes Bos CSS-Grid Github 我的 CSS-Grid 練習Github]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>CSSGrid25</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS Grid 筆記 17-CSS Grid Alignment + Centering]]></title>
    <url>%2F2018%2F04%2F03%2Fcss-grid-17%2F</url>
    <content type="text"><![CDATA[接著，此篇主要說明對齊的設定了，如何行的對齊？列的對齊？置中的設定等等… Demo | Github CSS Grid Alignment + Centering此篇會使用到 justify-* 與 align-* 的排列設定，* 號可能是 items 、 content 或 self ； justify-* 為行的對齊設定（橫的那個） align-* 為欄的對齊設定（直的那個） items設定容器內的元素對齊 place-items 可以用來取代 justify-tiems 與 align-items 的設定，可以將兩者的設定寫在一個 12justify-items: center;align-items: center; content設定元素的內容對齊（文字之類） self設定元素與父元素之間的對齊（文字之類） items 、 content 或 self此三項的對比可以參照 W3C 資料來源 - W3C 其排列的對齊軸心線，可以參照 W3C 資料來源 - W3C 最後此篇練習的 css 123456789101112131415161718192021.container &#123; display: grid; grid-gap: 20px; height: 500px; border: 10px solid var(--yellow); grid-template-columns: repeat(5, 130px); /* justify-items: center; align-items: center; */ place-items: stretch stretch; justify-content: space-between; align-content: space-between;&#125;.itm &#123; background: white;&#125;.itm5 &#123; justify-self: center; align-self: center;&#125; 線上展示 筆記與備註事項justify-itemsThe CSS justify-items property defines the default justify-self for all items of the box, giving them all a default way of justifying each box along the appropriate axis.資料來源 - MDN justify-contentCSS justify-content 属性定义了浏览器如何分配顺着父容器主轴的弹性元素之间及其周围的空间。資料來源 - MDN 預設值是 start ，語法中可以輸入的設定有以下： start 從行首開始排列。每行第一個元素與行首對齊，同時所有後續的元素與前一個對齊 flex-start 從行首起始位置開始排列。每行第一個彈性元素與行首對齊，同時所有後續的彈性元素與前一個對齊。 flex-end 從行尾位置開始排列 center left right baseline first baseline last baseline space-between 均勻排列每個元素，首個元素放置於起點，末尾元素放置於終點 space-around 均勻排列每個元素，每個元素周圍分配相同的空間 space-evenly 均勻排列每個元素，每個元素之間的間隔相等 stretch safe unsafe align-contentalign-content 屬性定義了當作為一個彈性盒子容器的屬性時，瀏覽器如何在容器的側軸圍繞彈性盒子項目分配空間。該屬性對單行彈性盒子模型無效。資料來源 - MDN justify-selfThe CSS justify-self property defines the way of justifying a box inside its container along the appropriate axis.資料來源 - MDN 參考資料 CSS-Grid 課程 作者 Wes Bos CSS-Grid Github 我的 CSS-Grid 練習Github CSS Tricks]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>CSSGrid25</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS Grid 筆記 16-Grid-Auto-Flow Dense Block Fitting]]></title>
    <url>%2F2018%2F04%2F02%2Fcss-grid-16%2F</url>
    <content type="text"><![CDATA[此篇介紹 grid-auto-flow 這屬性設定 Demo | Github grid-auto-flow dense Block Fitting來個示範範例， HTML 先建立 70 個項目來，使用 nth-child 來設定 css ， 6 的倍數 item 就跨越 6 個欄位 1234567&lt;div class="container"&gt; &lt;div class="item item1"&gt;1&lt;/div&gt; &lt;div class="item item2"&gt;2&lt;/div&gt; &lt;div class="item item3"&gt;3&lt;/div&gt; ... &lt;div class="item item70"&gt;70&lt;/div&gt; &lt;/div&gt; 12345678910.container &#123; display: grid; grid-gap: 20px; grid-template-columns: repeat(10, 1fr);&#125;.item:nth-child(6n) &#123; background: cornflowerblue; grid-column: span 6;&#125; 如圖片示範，會有空白的空格，假如想要有效的利用所有空間的話，可以利用 dense 這個設定值，設定 grid-auto-flow ， dense 會最大化利用表格空間 線上展示可以測試 grid-auto-flow 屬性設定 column dense 與 row dense 筆記與備註事項grid-auto-flowThe grid-auto-flow CSS property controls how the auto-placement algorithm works, specifying exactly how auto-placed items get flowed into the grid.資料來源 - MDN 參考資料 CSS-Grid 課程 作者 Wes Bos CSS-Grid Github 我的 CSS-Grid 練習Github]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>CSSGrid25</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS Grid 筆記 15-Naming Lines in CSS Grid]]></title>
    <url>%2F2018%2F03%2F30%2Fcss-grid-15%2F</url>
    <content type="text"><![CDATA[此篇介紹行號的別名運用，目的是使用行號與別名都是一樣的結果 Demo | Github Naming Lines in CSS Grid前面幾篇都提到，關於行號的部分，記住使用數字，但是此篇提到了別名，也就是說可以自定義行號的別名，再利用別名去設定，以下先示範不使用行號的 css 與畫面 (html 可以參考以下的線上範例) 123456789101112.container &#123; display: grid; grid-gap: 20px; grid-template-columns: 1fr 500px 1fr; grid-template-rows: repeat(10, auto);&#125;.item3&#123; background: slateblue; grid-column: 2; grid-row: 1/ span 10;&#125; 使用了行號別名，其定義方式為直接在 grid-template-[columns/rows] 設定。例如： grid-template-columns 中，設定了三個 column ，所以行號會有 4 個，第一個就是第一行， [ ] 內可以放置多個別名，但是都代表同一行號。 1grid-template-columns: [line1] 1fr [line2] 1fr [line3] 1fr [line4]; 以下就是使用別名取代行號的練習範例 12345678910111213.container &#123; display: grid; grid-gap: 20px; grid-template-columns: [sidebar-start site-left] 1fr [sidebar-end content-start] 500px [content-end] 1fr [site-right]; grid-template-rows: [content-top] repeat(10, auto) [content-bottom];&#125;.item3&#123; background: slateblue; grid-column: content-start; grid-row: content-top / content-bottom;&#125; 線上範例 筆記與備註事項Layout using named grid linesIn previous guides we’ve looked at placing items by the lines created by defining grid tracks and also how to place items using named template areas. In this guide we are going to look at how these two things work together when we use named lines. Line naming is incredibly useful, but some of the more baffling looking grid syntax comes from this combination of names and track sizes. Once you work through some examples it should become clearer and easier to work with.資料來源 - MDN 參考資料 CSS-Grid 課程 作者 Wes Bos CSS-Grid Github 我的 CSS-Grid 練習Github]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>CSSGrid25</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Visual Studio 2017 使用 Nuget 還原小技巧]]></title>
    <url>%2F2018%2F03%2F29%2Fnuget-reinstall%2F</url>
    <content type="text"><![CDATA[使用 Visual Studio 2017 編輯器的時候，透過 nuget 安裝套件非常便利，而且當偵測到尚未安裝套件的時候，也會自動提示需要還原 (resotre)；但是有時候版控取得的專案，裡面已經有套件了，需要手動清除 packages 資料夾，才能還原，以下介紹手動的方式與使用指令的方式 手動此方式就是手動清除 packages 資料夾，假設取得的專案裡面已經有 packages 這時候 nuget 就不會提示還原，所以可以在專案資料夾下找到 packages 資料夾，將之移除 12345678D:.├─ConsoleApplication2│ ├─Properties│ │ └─DataSources│ └─Service References│ └─ServiceReference1└─packages └─Newtonsoft.Json.8.0.2 移除後，有兩個地方都可以點下還原 可以在 Package Manager Console 中，看到還原按鈕 在方案總管中 (Solution Explorer) 針對方案按下滑鼠右鍵，就可以看到還原選項 Package Manager Console 指令還原在 Package Manager Console 中，直接輸入以下指令即可 1Update-Package -reinstall 除了全部套件還原的指令，尚有針對單一套件還原，其指令參考如下，更多指令可以參考 Microsoft Doc 1Update-Package -Id &lt;package_name&gt; –reinstall 參考資料與連結 Microsoft Doc Nuget]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>Visual Studio</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS Grid 筆記 14-Grid Template Areas]]></title>
    <url>%2F2018%2F03%2F28%2Fcss-grid-14%2F</url>
    <content type="text"><![CDATA[此篇講述 grid-template-areas 的運用，再利用 media 達到 responsive (自適應) Demo | Github Grid Template Areas首先說明 grid-template-areas ，其 css 如下，顯示畫面如最上面的圖； grid-template-areas 此屬性裡面設定 cell 的區域名稱，同名稱的話表示跨越的幅度，比較特別的是使用 . 這個表示區域名稱的時候，表示這個區域是跳過的，可以參考一下的 jsfiddle 範例 練習的 css 如下： 1234567891011121314151617181920212223242526.container &#123; display: grid; grid-gap: 20px; grid-template-columns: 1fr 10fr 1fr; grid-template-rows: 150px 150px 100px; grid-template-areas: "siderbar-1 content siderbar-2" "siderbar-1 content siderbar-2" "footer footer footer"&#125;.footer &#123; grid-area: footer;&#125;.container&gt;.item1 &#123; grid-area: siderbar-1;&#125;.container&gt;.item2 &#123; grid-area: content;&#125;.container&gt;.item3 &#123; grid-area: siderbar-2;&#125; 既然已經設定好了區域，再利用 @media 就可以透過不同的尺寸來調整畫面表格的分布 12345678@media (max-width: 700px) &#123; .container &#123; grid-template-areas: "content content content" "siderbar-1 siderbar-1 siderbar-2" "footer footer footer" &#125;&#125; grid-template-areas 除了上述的設定之外，還可以針對 column 或是 row 進行設定，搭配 grid-template-areas 設定的區域名稱，此區域名稱可以替代數字的編號，以這些區域名稱來進行 column 或是 row 的跨越設定 1234567891011121314.container &#123; display: grid; grid-gap: 20px; grid-template-areas: "💩 💩 💩 💩 🍔 🍔 🍔 🍔" "💩 💩 💩 💩 🍔 🍔 🍔 🍔" "💩 💩 💩 💩 🍔 🍔 🍔 🍔" "💩 💩 💩 💩 🍔 🍔 🍔 🍔";&#125;.item3 &#123; grid-column: 💩-start / 🍔-end; grid-row-end: 💩-end;&#125; 線上展示 筆記與備註事項需要注意的是 grid-template-areas 裡面的區域名稱設定的區塊必須都是矩形，否則 grid-template-areas 設定會無效 grid-template-areasThe grid-template-areas CSS property specifies named grid areas.資料來源 - MDN @media@media CSS at-rule 與一組被大括弧隔開、並由 media query 條件定義的 CSS 巢狀區塊有關。@media at-rule 不只能用在最頂層的 CSS 區塊，也能在任何 CSS conditional-group at-rule 使用。 @media at-rule 能透過 CSS object model 介面 CSSMediaRule 通行。資料來源 - MDN 參考資料 CSS-Grid 課程 作者 Wes Bos CSS-Grid Github 我的 CSS-Grid 練習Github]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>CSSGrid25</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS Grid 筆記 13-Using Minmax() for Responsive Grids]]></title>
    <url>%2F2018%2F03%2F26%2Fcss-grid-13%2F</url>
    <content type="text"><![CDATA[上一篇提到了 auto-fit 與 auto-fill ，此篇就是說明想要達到自適應的表格，還需要搭配 minmax() 這方法 Demo | Github Using minmax() for Responsive Gridsminmax() 這方法裡面可以放置兩個參數，第一個參數表示最小的設定，第二個則是最大的設定，其示範如此頁最上的動態圖 123456.container &#123; display: grid; grid-gap: 20px; border: 10px solid var(--yellow); grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));&#125; 接下來介紹另一種情境則是 grid-template-columns 設定固定欄位大小的時候，當某欄想針對其欄位內容進行自動調整，之前提到過可以使用 auto ，但是又想指定其大小的話，則可以使用 fit-content() ，裡面的參數可以放置想指定的大小 123456.container &#123; display: grid; grid-gap: 20px; border: 10px solid var(--yellow); grid-template-columns: fit-content(100px) 150px 150px 150px;&#125; 線上示範 筆記與備註事項稍微總結一下 minmax() 裡面參數設定縮放的尺寸下限與上限 fit-content() 設定縮放尺寸的上限，就是最大只可以到達設定的尺寸，不會按照內容去 auto 調整 minmax()The minmax() CSS function defines a size range greater than or equal to min and less than or equal to max. It is used with CSS Grids.資料來源 - MDN fit-content()The fit-content() CSS function clamps a given size to an available size according to the formula min(maximum size, max(minimum size, argument)).資料來源 - MDN 參考資料 CSS-Grid 課程 作者 Wes Bos CSS-Grid Github 我的 CSS-Grid 練習Github]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>CSSGrid25</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Cordova Error for vs 2017 15.6.4]]></title>
    <url>%2F2018%2F03%2F26%2Fcordova-error-for-vs-2017-15-6-4%2F</url>
    <content type="text"><![CDATA[開發 cordova 專案，在 Visual Studio 2017 更新到 version 15.6.4 後，要建置的時候就發生錯誤了，錯誤訊訊息如下： Invalid command line switch for “tsc.exe”. Value cannot be null. Parameter name: path1 這時候去 microsoft developer community 查詢，發現國外也有一些人遇到這個問題，處理方式都是打開專案檔案來調整，一種是指定 typescript 的編譯版本工具，另一種是乾脆取消使用 typescript 指定 typescript 版本 不過我使用方式的時候，還是會建置失敗，原因也還是上述的問題。 1234&lt;PropertyGroup&gt; &lt;TypeScriptCompileOnSaveEnabled&gt;false&lt;/TypeScriptCompileOnSaveEnabled&gt; &lt;TypeScriptToolsVersion&gt;2.3&lt;/TypeScriptToolsVersion&gt;&lt;/PropertyGroup&gt; 取消使用 typescript 1234&lt;PropertyGroup&gt; &lt;TypeScriptCompileBlocked&gt;True&lt;/TypeScriptCompileBlocked&gt; &lt;TypeScriptCompileOnSaveEnabled&gt;false&lt;/TypeScriptCompileOnSaveEnabled&gt;&lt;/PropertyGroup&gt; 參考資料 microsoft developer community]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>Visual Studio</tag>
        <tag>Troubleshooting</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS Grid 筆記 12-Auto-Fit and Auto-Fill]]></title>
    <url>%2F2018%2F03%2F24%2Fcss-grid-12%2F</url>
    <content type="text"><![CDATA[設定 grid 的各項設定中， auto 還有 auto-fit 與 auto-fill 兩種不同的設定，其差別在於 Explicit 的差異 Demo | Github auto-fit and auto-fill建立觀察兩者差異的 html 與 css 如下 123456&lt;div class="container"&gt; &lt;div class="item item1"&gt;Item 01&lt;/div&gt; &lt;div class="item item2"&gt;Item 02&lt;/div&gt; &lt;div class="item item3"&gt;Item 03&lt;/div&gt; &lt;div class="item item4"&gt;Item 04&lt;/div&gt;&lt;/div&gt; 123456.container &#123; display: grid; grid-gap: 20px; border: 10px solid var(--yellow); grid-template-columns: repeat(auto-fill, 150px);&#125; 主要可以觀察到最右邊的邊線在畫面接近卷軸的位置 這時候更換為 auto-fit ，其邊線位置只會按照內容項目的位置調整，就會在 item04 的右邊 兩者的差異就是 explicit 邊線的位置，所以這會有什麼影響？可以將 item04 的位置調整為固定在最後一欄，這時候兩者的差異就會造成當瀏覽器寬度不同時候的位置影響了。 123.item4 &#123; grid-column-end: -1;&#125; 筆記與備註事項auto-fillIf the grid container has a definite or maximal size in the relevant axis, then the number of repetitions is the largest possible positive integer that does not cause the grid to overflow its grid container. Treating each track as its maximal track sizing function, if that is definite. Otherwise, as its minimum track sizing function, and taking grid-gap into account. If any number of repetitions would overflow, then the repetition is 1. Otherwise, if the grid container has a definite minimal size in the relevant axis, the number of repetitions is the smallest possible positive integer that fulfills that minimum requirement. Otherwise, the specified track list repeats only once.資料來源 - MDN auto-fitBehaves the same as auto-fill, except that after placing the grid items any empty repeated tracks are collapsed. An empty track is one with no in-flow grid items placed into or spanning across it. (This can result in all tracks being collapsed, if they’re all empty.) A collapsed track is treated as having a fixed track sizing function of 0px, and the gutters on either side of it collapse. For the purpose of finding the number of auto-repeated tracks, the user agent floors the track size to a user agent specified value (e.g., 1px), to avoid division by zero.資料來源 - MDN 參考資料 CSS-Grid 課程 作者 Wes Bos CSS-Grid Github 我的 CSS-Grid 練習Github]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>CSSGrid25</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS Grid 筆記 11-Spanning and Placing Cardio]]></title>
    <url>%2F2018%2F03%2F23%2Fcss-grid-11%2F</url>
    <content type="text"><![CDATA[此篇為之前筆記的總結練習 Demo | Github Spanning and Placing Cardio練習的 html 內容已經預訂好，在 body 內的內容如下所示 123456789101112131415161718192021222324252627282930313233&lt;div class="container"&gt; &lt;div class="item item1"&gt;1&lt;/div&gt; &lt;div class="item item2"&gt;2&lt;/div&gt; &lt;div class="item item3"&gt;3&lt;/div&gt; &lt;div class="item item4"&gt;4&lt;/div&gt; &lt;div class="item item5"&gt;5&lt;/div&gt; &lt;div class="item item6"&gt;6&lt;/div&gt; &lt;div class="item item7"&gt;7&lt;/div&gt; &lt;div class="item item8"&gt;8&lt;/div&gt; &lt;div class="item poop"&gt;💩&lt;/div&gt; &lt;div class="item item9"&gt;9&lt;/div&gt; &lt;div class="item item10"&gt;10&lt;/div&gt; &lt;div class="item item11"&gt;11&lt;/div&gt; &lt;div class="item item12"&gt;12&lt;/div&gt; &lt;div class="item item13"&gt;13&lt;/div&gt; &lt;div class="item item14"&gt;14&lt;/div&gt; &lt;div class="item item15"&gt;15&lt;/div&gt; &lt;div class="item item16"&gt;16&lt;/div&gt; &lt;div class="item item17"&gt;17&lt;/div&gt; &lt;div class="item item18"&gt;18&lt;/div&gt; &lt;div class="item item19"&gt;19&lt;/div&gt; &lt;div class="item item20"&gt;20&lt;/div&gt; &lt;div class="item item21"&gt;21&lt;/div&gt; &lt;div class="item item22"&gt;22&lt;/div&gt; &lt;div class="item item23"&gt;23&lt;/div&gt; &lt;div class="item item24"&gt;24&lt;/div&gt; &lt;div class="item item25"&gt;25&lt;/div&gt; &lt;div class="item item26"&gt;26&lt;/div&gt; &lt;div class="item item27"&gt;27&lt;/div&gt; &lt;div class="item item28"&gt;28&lt;/div&gt; &lt;div class="item item29"&gt;29&lt;/div&gt; &lt;div class="item item30"&gt;30&lt;/div&gt;&lt;/div&gt; 練習題以下題目會大致說明其中文的意思，並不是翻譯，請諒解。 這兩題因為都在 .container class 中，所以就一起進行 Make the grid 10 columns wide, every other taking up twice the free space 製作一個 10 欄表格，其每隔一個就是使用兩倍的空間 Make the grid have 10 explicit rows, 50px high each 使表格有明確的 10 行，其高為 50 px 12345678.container &#123; display: grid; grid-gap: 20px; /* Make the grid 10 columns wide, every other taking up twice the free space */ grid-template-columns: repeat(5, 1fr 2fr); /* Make the grid have 10 explicit rows, 50px high each */ grid-template-rows: repeat(10,50px);&#125; With Item 1, start at col 3 and go until 5 針對 item1 由欄位 3 開始跨越到 欄位 5 1234/* With Item 1, start at col 3 and go until 5 */.item1 &#123; grid-column: 3/5;&#125; With Item 2, start at col 5 and go until the end 由欄位 5 開始，填滿整行 1234/* With Item 2, start at col 5 and go until the end */.item2 &#123; grid-column: 5/-1;&#125; Make Item 5 double span 2 cols and rows 跨越 2 欄與 2 行 12345/* Make Item 5 double span 2 cols and rows */.item5 &#123; grid-column: span 2; grid-row: span 2;&#125; Make Item 8 two rows high 就是跨越 2 行 1234/* Make Item 8 two rows high */.item8 &#123; grid-row: span 2;&#125; Make Item 15 span the entire grid width 使其跨越所有欄位，等於整行 1234/* Make Item 15 span the entire grid width */.item15 &#123; grid-column: 1/-1;&#125; Make item 18 span 4 widths, but end 9 指定跨越 4 欄，但是指定結束在欄位 9 1234/* Make item 18 span 4 widths, but end 9 */.item18 &#123; grid-column: span 4/9;&#125; Make item 20 start at row 4 and go for 3 由行 4 開始跨越 3 行 1234/* Make item 20 start at row 4 and go for 3 */.item20 &#123; grid-row: 4/ span 3;&#125; 參考資料 CSS-Grid 課程 作者 Wes Bos CSS-Grid Github 我的 CSS-Grid 練習Github]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>CSSGrid25</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS Grid 筆記 10-Placing Grid Items]]></title>
    <url>%2F2018%2F03%2F22%2Fcss-grid-10%2F</url>
    <content type="text"><![CDATA[上一篇提到了 grid-column ，針對此設定還可以延伸為 grid-column-start 與 grid-column-end 的設定方法，以及利用 / 的簡略設定方式 Demo | Github Placing Grid Items12345.poop &#123; background: #bada55; grid-column-start: 2; grid-column-end: 5;&#125; 也可以使用 grid-column 來表示，利用 / 來區隔 start 與 end 的數字 1234.poop &#123; background: #bada55; grid-column: 2/5;&#125; 除了整數外， / 還可以設定負數，利用 firefox 的 devTool 可以清楚觀看到負數其實就是正數大小的反向 grid-row 也是可以使用此種方式設定，甚至可以直接在 / 的部分指定 span 的數量 12345.poop &#123; background: #bada55; grid-column: 1/-4; grid-row: 3/span 2;&#125; 需要注意的是指定 start 與 end 的數值，其資料是必須因應 Explicit Tracks (明確邊線)來劃分，所以當劃分結束後，其餘的資料會變成額外設定 123456789101112.container &#123; display: grid; grid-gap: 20px; grid-template-columns: repeat(5, 1fr); grid-template-rows: repeat(5, 1fr);&#125;.poop &#123; background: #bada55; grid-column: 1/-1; grid-row: 1/-1;&#125; See the Pen Placing Grid Items by allen_yu (@shunnien) on CodePen. 筆記與備註事項grid-column-startThe grid-column-start CSS property specifies a grid item’s start position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement. This start position defines the block-start edge of the grid area.資料來源 - MDN grid-column-endThe grid-column-end CSS property specifies a grid item’s end position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the block-end edge of its grid area.資料來源 - MDN 參考資料 CSS-Grid 課程 作者 Wes Bos CSS-Grid Github 我的 CSS-Grid 練習Github]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>CSSGrid25</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS Grid 筆記 09-Sizing Grid Items]]></title>
    <url>%2F2018%2F03%2F22%2Fcss-grid-09%2F</url>
    <content type="text"><![CDATA[由於筆記 08提到了 repeat ，此 function 的設定與其內元素的大小設定，以及元素內容文字的大小影響是如何，其自動計算又是以哪個為依據？此篇主要探討此方向。 Demo | Github Sizing Grid Items建立多筆項目，並使用 repeat 與 fr 來自動分配 1234&lt;div class="container"&gt; &lt;div class="item item1"&gt;1&lt;/div&gt; ...&lt;/div&gt; 1grid-template-columns: repeat(5, 1fr); 此時各項 item 應該都是同一大小，產生 5 欄的表格 現在針對 item9 這一項目建立 class ，並給予寬度設定 500px ，會發現 repeat 中設定的 1fr 失去效果了； 1234.item9 &#123; background: mistyrose; width: 500px;&#125; 或是直接針對 html 去變更 item9 的內容，將內容文字加長， 1fr 的設定也會失效；這是因為 fr 是依據表格設定後，剩餘的空間進行分配，所以當設定了寬度，或是內容文字，都會先行在表格中進行分配 1&lt;div class="item item9"&gt;9asadfbasdfzxcvmnmqweruiopytkjl;&lt;/div&gt; 展示跨行/欄的屬性，當跨越的行/列在 repeat 的範圍內的時候，表格會依據行列的限制給予設定是否換行；反之要是超出了行/欄的設定，則會依照跨越的設定，自動增加行/欄 12345.item9 &#123; background: mistyrose; grid-column: span 10; grid-row: span 2;&#125; 筆記與備註事項grid-columnThe grid-column CSS property is a shorthand property for grid-column-start and grid-column-end specifying a grid item’s size and location within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area.資料來源 - MDN grid-rowThe grid-row CSS property is a shorthand property for grid-row-start and grid-row-end specifying a grid item’s size and location within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area.資料來源 - MDN 參考資料 CSS-Grid 課程 作者 Wes Bos CSS-Grid Github 我的 CSS-Grid 練習Github]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>CSSGrid25</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS Grid 筆記 08-CSS Grid Repeat Function]]></title>
    <url>%2F2018%2F03%2F21%2Fcss-grid-08%2F</url>
    <content type="text"><![CDATA[CSS Grid repeat function此篇介紹 repeat function 的使用，在 grid 中可以減少一些重複設定的瑣碎動作 Demo | Github repeat 這方法可以減少重複設定，如下的 grid-template-columns 設定了四欄 12345.container &#123; display: grid; grid-gap: 20px; grid-template-columns: 1fr 1fr 1fr 1fr;&#125; 上述的方式使用 repeat 可以轉寫成 repeat(4,1fr) ，第一個參數表示重複次數，第二個參數為設定大小 12345.container &#123; display: grid; grid-gap: 20px; grid-template-columns: repeat(4,1fr);&#125; 所以當參數設定多個大小時，表示此 column 或 row 按照設定大小的數量去重複，如以下設定了 1fr auto 表示設定 2 columns ，然後此 2 columns 重複兩次 1grid-template-columns: repeat(2, 1fr auto); repeat()The repeat() CSS function represents a repeated fragment of the track list, allowing a large number of columns or rows that exhibit a recurring pattern to be written in a more compact form. This function can be used in the CSS Grid properties grid-template-columns and grid-template-rows.資料來源 - MDN 參考資料 CSS-Grid 課程 作者 Wes Bos CSS-Grid Github 我的 CSS-Grid 練習Github]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>CSSGrid25</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS Grid 筆記 07-Sizing Tracks in CSS Grid]]></title>
    <url>%2F2018%2F03%2F21%2Fcss-grid-07%2F</url>
    <content type="text"><![CDATA[目標此篇介紹格線佈局中的 fr 此單位的使用，以及如何使用此單位來填滿格線佈局 Demo | Github 首先，來個預定情境如下，使用百分比來設定，但是由於設定了 gap 所以會造成設定溢出 12345.container &#123; display: grid; grid-gap: 20px; grid-template-columns: 25% 25% 25% 25%;&#125; 加上邊框來觀察會更明顯 123456.container &#123; display: grid; grid-gap: 20px; border: 10px solid var(--yellow); grid-template-columns: 25% 25% 25% 25%;&#125; 這時候可以使用 fr 單位，此單位會自動計算表格中剩餘可以使用的空間，然後分配 123456.container &#123; display: grid; grid-gap: 20px; border: 10px solid var(--yellow); grid-template-columns: 2fr 1fr 2fr 1fr;&#125; 當然，除了 grid-template-columns 外，在 grid-template-rows 也可以使用 fr 單位；而另一個 auto 的設定則是會依照內容的大小去自動調整表格大小，可以觀看如下範例 12345.container &#123; display: grid; grid-gap: 20px; border: 10px solid var(--yellow); grid-template-columns: auto 1fr auto 1fr; 筆記與備註事項fr 單位Tracks can be defined using any length unit.資料來源 - MDN 參考資料 CSS-Grid 課程 作者 Wes Bos CSS-Grid Github 我的 CSS-Grid 練習Github]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>CSSGrid25</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS Grid 筆記 06-CSS Grid-Auto-Flow Explained]]></title>
    <url>%2F2018%2F03%2F18%2Fcss-grid-06%2F</url>
    <content type="text"><![CDATA[grid-auto-flow css grid 筆記 05提到了 grid-auto-columns 但是在其範例中看不到 column 自動增長，其設定需要透過 grid-auto-flow Demo | Github 當不使用 grid-auto-flow 的時候，會依照設定的 grid-template-columns 數量去設定 column ，但假如是 row 的話，還是會自動增加，此部分可以參考css grid 筆記 05，grid-auto-flow 設定了 column 後，假如有超出 template 的設定，就會依照 grid-auto-columns 設定的大小去調整新增加的 column 1234567.container &#123; display: grid; grid-gap: 20px; grid-template-columns: 400px 200px; grid-auto-flow: column; grid-auto-columns: 200px;&#125; grid-auto-flowgrid-auto-flow 属性通过控制自动布局算法的运作原理，精确指定自动布局的元素在网格中排列的方向。資料來源 - MDN 參考資料 CSS-Grid 課程 作者 Wes Bos CSS-Grid Github 我的 CSS-Grid 練習Github]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>CSSGrid25</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS Grid 筆記 05-CSS Grid Implicit vs Explicit Tracks]]></title>
    <url>%2F2018%2F03%2F18%2Fcss-grid-05%2F</url>
    <content type="text"><![CDATA[CSS Grid Implicit vs Explicit Tracks此篇介紹 Implicit Tracks (隱式邊線) 與 Explicit Tracks (顯式邊線)的差異點 Demo | Github 主要著重在 grid-template-columns 與 grid-template-rows 兩個 template 的設定對應 grid-auto-rows 與 grid-auto-columns ，以下說明這幾個項目的邊界範圍 grid-template-columns12345.container &#123; display: grid; grid-gap: 20px; grid-template-columns: 200px 400px; &#125; 這是設定直列的寬度，設定幾個數字表示設定幾列，例如上述的設定只有 200px 400px ，所以第一列是 200px 第二列式 400px ，其邊界範圍如下圖，左右的黑色實線表示 Explicit Tracks (顯式邊線)，而虛線表示 Implicit Tracks (隱式邊線) grid-template-rows與 grid-template-columns 類似，但是其設定為橫向的行，設定幾個數字表示設定幾行，上下的黑色實線為其設定範圍，超出的部分則為虛線顯示。 123456.container &#123; display: grid; grid-gap: 20px; grid-template-columns: 200px 400px; grid-template-rows: 100px 200px;&#125; grid-auto-rows 與 grid-auto-columns這兩個 CSS 屬性則是剛剛上述提到的 template 設定範圍外，就是虛線顯示的部分，其表格的寬高設定 grid-auto-rows 表示超出設定範圍的行的高度 grid-auto-columns 表示超出設定範圍的列的寬度 12345678.container &#123; display: grid; grid-gap: 20px; grid-template-columns: 200px 400px; grid-template-rows: 100px 200px; grid-auto-rows: 100px; grid-auto-columns: 100px;&#125; 參考資料 CSS-Grid 課程 作者 Wes Bos CSS-Grid Github 我的 CSS-Grid 練習Github]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>CSSGrid25</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS Grid 筆記 04-CSS Grid Dev Tools]]></title>
    <url>%2F2018%2F02%2F28%2Fcss-grid-04%2F</url>
    <content type="text"><![CDATA[CSS Grid Dev Tools ， 顧名思義就是介紹開發者工具，主要是使用 firefox 的開發者工具 Demo | Github CSS 的範例程式跟前幾次相同，主要是觀察在 grid 配置下的畫面區塊，以及 gap 的間距 範例12345.container &#123; display: grid; grid-gap: 20px; grid-template-columns: 100px 200px;&#125; 在開發者工具中，選擇檢測，在選擇版面，可以選擇覆蓋格線與格線顯示選項，在每個元素上都可以再點選區塊顯示 說明顯式邊線(explicit track)與隱式邊線(implict track)，還有網格間格(gap) 參考資料 CSS-Grid 課程 作者 Wes Bos CSS-Grid Github 我的 CSS-Grid 練習Github]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>CSSGrid25</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS Grid 筆記 03-CSS Grid Fundamentals]]></title>
    <url>%2F2018%2F02%2F26%2Fcss-grid-03%2F</url>
    <content type="text"><![CDATA[目標此篇熟悉grid的布置與設定，與下一篇搭配 Firefox 開發工具觀測 Demo | Github 範例123456789.container&#123; display: grid; /* grid-template-columns: 100px 500px 50px; */ /* grid-template-columns: 100rem auto 200px 50px; */ /*grid-template-columns: repeat(5, auto);*/ grid-template-columns: 200px 500px; grid-template-rows: 200px 100px 400px; grid-gap: 20px;&#125; 筆記與備註事項gridThe grid CSS property is a shorthand property that sets all of the explicit grid properties (grid-template-rows, grid-template-columns, and grid-template-areas), and all the implicit grid properties (grid-auto-rows, grid-auto-columns, and grid-auto-flow), in a single declaration. 資料來源 - MDN grid-template-columnsThe grid-template-columns CSS property defines the line names and track sizing functions of the grid columns.資料來源 - MDN 設定列的數目與寬度 grid-template-rowsThe grid-template-rows CSS property defines the line names and track sizing functions of the grid rows.資料來源 - MDN 設定行的高度，依序設定第 N 行的高度 gird-gapThe grid-gap CSS property is a shorthand property for grid-row-gap and grid-column-gap specifying the gutters between grid rows and columns.資料來源 - MDN 設定行列之間的間距 參考資料 CSS-Grid 課程 作者 Wes Bos CSS-Grid Github 我的 CSS-Grid 練習Github]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>CSSGrid25</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[下載 Blob 在 IE 11 遇到的問題]]></title>
    <url>%2F2018%2F02%2F21%2Fdownload-blob-by-IE%2F</url>
    <content type="text"><![CDATA[透過 JavaScript 下載 Blob ，發現在 IE 11 上，不能下載 範例程式如下，以下程式在 IE 就無法下載 123456789101112131415161718var saveData = (function () &#123; var a = document.createElement("a"); return function (data, fileName) &#123; var json = JSON.stringify(data), blob = new Blob([json], &#123;type: "octet/stream"&#125;), url = window.URL.createObjectURL(blob); a.href = url; a.download = fileName; a.click(); a.remove(); window.URL.revokeObjectURL(url); &#125;;&#125;());var data = &#123; x: 42, s: "hello, world", d: new Date() &#125;, fileName = "my-download.json";saveData(data, fileName); 主要原因是 createObjectURL 在 IE 11 中沒有作用 雖然 createObjectURL 在 MDN 中寫了支援 IE 11 ，但是不知道為什麼就是沒有效；參考了 stackoverflow 此篇討論 更改使用 navigator.msSaveOrOpenBlob 12345678910111213141516171819var saveData = function() &#123; var a = document.createElement("a"); var json = JSON.stringify(data), blob = new Blob([json], &#123; type: "octet/stream" &#125;); if (window.navigator &amp;&amp; window.navigator.msSaveOrOpenBlob) &#123; // for IE window.navigator.msSaveOrOpenBlob(blob, fileName); &#125;&#125;;var data = &#123; t: "hello, world", d: new Date() &#125;, fileName = "my-download.json";document.querySelector('button').addEventListener('click', saveData); 參考資料 stackoverflow]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>IE</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS Grid 筆記 02-Starter Files and Tooling Setup]]></title>
    <url>%2F2018%2F02%2F13%2Fcss-grid-02%2F</url>
    <content type="text"><![CDATA[Wesbos 的 CSS Grid 課程筆記第二天，至於為什麼沒有第一天是因為課程內容的第一天， Wesbos 在簡單介紹此課程，至於第二天的則是環境設定、工具介紹等。 Demo | Github 編輯器可以參考 Wesbos 的 Editor + Terminal ，文字編輯器有很多選擇 Atom、Brackets、SublimeText 或是 Visual Studio Code 編輯器之外，尚有編輯器的擴充功能，此處提到的是 emmet ，此功能可以快速建置 html 頁面，假如使用 Visual Studio Code 則是已經內建在編輯器功能中了，使用方式相當簡易，直接在 html 頁面上輸入如下語法後，會顯示智能提示訊息 1.container*1&gt;.item*3 上述語法會轉換為 12345&lt;div class="container"&gt; &lt;div class="item"&gt;&lt;/div&gt; &lt;div class="item"&gt;&lt;/div&gt; &lt;div class="item"&gt;&lt;/div&gt;&lt;/div&gt; Firefox 開發者版本此次主題是 CSS Grid ，由於 Firefox 內建的開發工具有支援 grid 的呈現，其他瀏覽器的開發工具對於 grid 的支援度較不完整，所以此次建議使用 Firefox 瀏覽器，至於是否使用開發者版本則見仁見智 Node.js開發前端大部分都會使用到的 Node.js ，安裝後，即可透過 npm 安裝 browser-sync ，其 package.json 如下所示，瀏覽器路徑請按照各自安裝路徑調整 123456789101112131415161718&#123; "name": "css-grid", "version": "1.0.0", "description": "", "main": "index.js", "scripts": &#123; "start": "run-script-os", "start:win32": "browser-sync start --server --files '**/*.css, **/*.html, **/*.js, !node_modules/**/*' --directory --port 7777 --browser \"C:\\Program Files (x86)\\Mozilla Firefox\\firefox.exe", "//": "Hello! If you are having trouble running this command. Try changing Firefox Developer Edition to FirefoxDeveloperEdition", "start:darwin:linux": "browser-sync start --server --files '**/*.css, **/*.html, **/*.js, !node_modules/**/*' --directory --port 7777 --browser 'Firefox Developer Edition'" &#125;, "author": "", "license": "ISC", "devDependencies": &#123; "browser-sync": "^2.18.13", "run-script-os": "^1.0.3" &#125;&#125; 建立好 package.json 後，直接輸入以下指令，安裝套件 1npm i 筆記與備註事項CSS 變數CSS變量是由CSS作者定義的實體，其中包含要在整個文檔中重複使用的特定值。使用自定義屬性來設置變量名，並使用特定的var()來訪問。（比如color: var(–main-color) ;）。資料來源 - MDN 參考資料 CSS-Grid 課程 作者 Wes Bos CSS-Grid Github 我的 CSS-Grid 練習Github]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>CSSGrid25</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows 10 下 Chrome 瀏覽器顯示正在下載 PROXY 指令碼]]></title>
    <url>%2F2018%2F02%2F10%2Fchrome-download-proxy-code%2F</url>
    <content type="text"><![CDATA[筆電之前設定開啟了 WIFI ，在家裡又接上了網路線，這時候開機後，開啟 Chrome 瀏覽器一直顯示正在下載 PROXY 指令碼 開啟其他瀏覽器瀏覽又是正常的，調整 Chrome 的 PROXY 設定 首先開啟 Chrome 的設定，找尋 開啟 Proxy 設定 接著開啟 LAN 設定 (LAN Settings) 取消勾選自動偵測設定 (Automatically detect settings) 按照以上步驟設定好， Chrome 應該就可以正常瀏覽網站，但是此時我的 GMail 在兩步驟驗證時，一直出現錯誤，所以還是取消 WIFI 來讓 Chrome 確定驗證通過的電腦吧]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>Chrome</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JS30紀錄 30-Whack a Mole]]></title>
    <url>%2F2018%2F02%2F05%2FJavascript30days-30%2F</url>
    <content type="text"><![CDATA[目標製作打地鼠小遊戲 Demo | Github 處理步驟先了解地鼠是隨機出現在 6 個地洞中，而且出現時間也是隨機的長度 步驟 1.建立隨機時間 function 設定隨機範圍 12345678/** * 地鼠出現的時間 * @param &#123;*&#125; min * @param &#123;*&#125; max */function randomTime(min, max) &#123; return Math.round(Math.random() * (max - min) + min);&#125; 步驟 2.建立隨機出現地鼠的地洞 function ，並且由於隨機的數值可能重複，利用遞迴 與變數 lastHole 來排除 123456789101112131415161718192021const holes = document.querySelectorAll(".hole");const scoreBoard = document.querySelector(".score");const moles = document.querySelectorAll(".mole");// 紀錄上次隨機的地洞let lastHole;/** * 隨機出現地鼠的地洞 * @param &#123;*&#125; holes */function randomHole(holes) &#123; // holes 是陣列，由 0 開始，所以利用 random 直接設定 random 範圍 const idx = Math.floor(Math.random() * holes.length); const hole = holes[idx]; // 隨機有可能重複的地洞，所以建立變數排除重複 if (hole === lastHole) &#123; console.log("Ah nah thats the same one bud"); return randomHole(holes); &#125; lastHole = hole; return hole;&#125; 步驟 3.地鼠出現的樣式與呼叫前幾個步驟的 function ，並建立 timeUp 標註遊戲時間是否到達 12345678910111213141516171819// 遊戲時間是否已經到達let timeUp = false;/** * 地鼠出現 */function peep() &#123; // 地鼠出現的隨機時間 const time = randomTime(500, 2000); // 地鼠出現的隨機地洞 const hole = randomHole(holes); // 變更該地洞的地鼠樣式，讓其顯示 hole.classList.add("up"); // 地鼠出現的時間 setTimeout(() =&gt; &#123; hole.classList.remove("up"); // 讓地鼠出現連續，遊戲時間到則停止 if (!timeUp) peep(); &#125;, time);&#125; 步驟 4.建立開始遊戲按鈕的功能，宣告分數變數 score ； setTimeout 的時間是毫秒。 1234567891011121314151617// 遊戲得分let score = 0;/** * 遊戲開始 */function startGame() &#123; // 分數版歸 0 scoreBoard.textContent = 0; // 遊戲時間標示 timeUp = false; // 遊戲得分歸 0 score = 0; // 地鼠開始出現 peep(); // 遊戲截止時間 setTimeout(() =&gt; (timeUp = true), 30000);&#125; 步驟 5.打擊地鼠後計算得分，並移除地鼠樣式(可以考慮替換成地鼠挨打樣式)，並使用 isTrusted 判斷是否使用程式碼作弊 123456789101112131415/** * 打擊地鼠後得分 * @param &#123;*&#125; e */function bonk(e) &#123; // 判斷是否真的使用滑鼠點擊 if (!e.isTrusted) return; // cheater! // 分數 + 1 score++; // 移除地鼠顯示 this.parentNode.classList.remove("up"); // 顯示得分 scoreBoard.textContent = score;&#125;moles.forEach(mole =&gt; mole.addEventListener('click', bonk)); 步驟 6.此步驟是自行延伸部分，增加顯示遊戲時間，參照 day_29 調整 html 顯示倒數遊戲時間 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970// 倒數計時的顯示元素const timerDisplay = document.querySelector(".controllPanel span");// 建立計時器let countdown;/** * 遊戲開始 */function startGame() &#123; // 分數版歸 0 scoreBoard.textContent = 0; // 遊戲時間標示 timeUp = false; // 遊戲得分歸 0 score = 0; // 地鼠開始出現 peep(); // 遊戲截止時間 setTimeout(() =&gt; (timeUp = true), 30000); // 啟動計時器 timer(30);&#125;/** * 倒數計時器 * @param &#123;*&#125; seconds */function timer(seconds) &#123; // 先清除其他計時器，避免相互影響 clearInterval(countdown); // 顯示倒數計時 displayTimeLeft(seconds); countdown = setInterval(() =&gt; &#123; // 每秒鐘執行，所以直接每次減 1 就好 seconds--; // 小於 0 時，清除計時器 if (seconds &lt; 0) &#123; clearInterval(countdown); return; &#125; displayTimeLeft(seconds); &#125;, 1000);&#125;/** * 顯示倒數計時 * @param &#123;*&#125; seconds 秒數 */function displayTimeLeft(seconds) &#123; // 計算幾分鐘 const minutes = Math.floor(seconds / 60); // 計算剩餘秒數 const remainderSeconds = seconds % 60; // 組合顯示文字(剩餘時間) const display = `$&#123;paddingLeft(minutes.toString(), 2)&#125;:$&#123;paddingLeft( remainderSeconds.toString(), 2 )&#125;`; // 顯示倒數計時 timerDisplay.textContent = display;&#125;/** * 文字在指定長度中左邊補 0 * @param &#123;*&#125; str 輸入文字 * @param &#123;*&#125; lenght 補 0 的長度 */function paddingLeft(str, lenght) &#123; if (str.length &gt;= lenght) return str; else return paddingLeft("0" + str, lenght);&#125; 筆記與備註事項JavaScript 部分isTrustedEvent 介面的 isTrusted 唯讀屬性為一個布林值，若事件物件是由使用者操作而產生，則 isTrusted 值為 true。若事件物件是由程式碼所建立、修改，或是透過 EventTarget.dispatchEvent() 來觸發，則 isTrusted 值為 false。資料來源 - MDN CSS 部分cursor定義滑鼠游標樣式，亦可以選擇 url 可以參考 RealWorld Graphics 取得游標 cur file 參考資料 JavaScript 30 day 作者 Github Wes Bos Js 30 day 中文指南 瓜瓜的 JS 30 我的 JS 30 練習Github]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>JavaScript30</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JS30紀錄 29-Countdown Timer]]></title>
    <url>%2F2018%2F02%2F03%2FJavascript30days-29%2F</url>
    <content type="text"><![CDATA[目標製作一個倒數計時器，頁面上已經有固定秒數的選項，也有 form 的自訂時間的倒數 Demo | Github 處理步驟要製作一個倒數計時器，就要使用到 setInterval ，練習的範本上已經有幾個固定秒數按鈕，所以先把顯示文字呈現出來，最後在處理計時器 步驟 1.顯示文字的部分有兩個，一個是倒數計時，一個是時間截止的時間，另外還要變更網頁標題(頁籤上的標題文字) 1234567891011121314151617181920212223242526272829303132333435// 取得所有 buttonsconst buttons = document.querySelectorAll("[data-time]");// 倒數計時的顯示元素const timerDisplay = document.querySelector(".display__time-left");// 結束時間的顯示元素const endTime = document.querySelector(".display__end-time");/** * 顯示倒數計時 * @param &#123;*&#125; seconds 秒數 */function displayTimeLeft(seconds) &#123; // 計算幾分鐘 const minutes = Math.floor(seconds / 60); // 計算剩餘秒數 const remainderSeconds = seconds % 60; // 組合顯示文字(剩餘時間) const display = `$&#123;minutes&#125;:$&#123;remainderSeconds&#125;`; // 變更網頁標題 document.title = display; // 顯示倒數計時 timerDisplay.textContent = display;&#125;/** * 顯示結束時刻 * @param &#123;*&#125; timestamp */function displayEndTime(timestamp) &#123; // 轉換為時間 const end = new Date(timestamp); // 顯示結束時間 endTime.textContent = `Be Back At $&#123;end.getHours()&#125;:$&#123;end.getMinutes()&#125;:$&#123;end.getSeconds()&#125;`;&#125; 步驟 2.各按鈕事件與計時器撰寫，利用 setInterval 來顯示上一步驟的時間。由於 setInterval 設定為每秒鐘進行，所以顯示時間直接根據秒數去扣除顯示。 123456789101112131415161718192021222324252627282930313233343536373839// 建立計時器let countdown;/** * 按鈕事件，啟動計時器 */function startTimer() &#123; // dataset 轉換數值 const seconds = parseInt(this.dataset.time); timer(seconds);&#125;/** * 倒數計時器 * @param &#123;*&#125; seconds */function timer(seconds) &#123; // 先清除其他計時器，避免相互影響 clearInterval(countdown); // 計算倒數計時完成的時刻(使用毫秒) const then = Date.now() + seconds * 1000; // 顯示倒數計時 displayTimeLeft(seconds); // 顯示完成時刻 displayEndTime(then); countdown = setInterval(() =&gt; &#123; // 每秒鐘執行，所以直接每次減 1 就好 seconds--; // 小於 0 時，清除計時器 if (seconds &lt; 0) &#123; clearInterval(countdown); return; &#125; displayTimeLeft(seconds); &#125;, 1000);&#125;buttons.forEach(button =&gt; button.addEventListener("click", startTimer)); 步驟 3.表單的自訂時間功能，同樣呼叫上一步驟的計時器；並將顯示時間的文字調整；注意表單送出的時候需要取消預設功能，避免頁面重整。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455/** * 顯示倒數計時 * @param &#123;*&#125; seconds 秒數 */function displayTimeLeft(seconds) &#123; // 計算幾分鐘 const minutes = Math.floor(seconds / 60); // 計算剩餘秒數 const remainderSeconds = seconds % 60; // 組合顯示文字(剩餘時間) const display = `$&#123;paddingLeft(minutes.toString(), 2)&#125;:$&#123;paddingLeft( remainderSeconds.toString(), 2 )&#125;`; // 變更網頁標題 document.title = display; // 顯示倒數計時 timerDisplay.textContent = display;&#125;/** * 顯示結束時刻 * @param &#123;*&#125; timestamp */function displayEndTime(timestamp) &#123; // 轉換為時間 const end = new Date(timestamp); const hour = end.getHours().toString(); const minute = end.getMinutes().toString(); const second = end.getSeconds().toString(); // 顯示結束時間 endTime.textContent = `Be Back At $&#123;paddingLeft(hour, 2)&#125;:$&#123;paddingLeft( minute, 2 )&#125;:$&#123;paddingLeft(second, 2)&#125;`;&#125;/** * 文字在指定長度中左邊補 0 * @param &#123;*&#125; str 輸入文字 * @param &#123;*&#125; lenght 補 0 的長度 */function paddingLeft(str, lenght) &#123; if (str.length &gt;= lenght) return str; else return paddingLeft("0" + str, lenght);&#125;document.customForm.addEventListener("submit", function(e) &#123; // 取消事件 e.preventDefault(); const mins = this.minutes.value; timer(mins * 60); // 表單清單 this.reset();&#125;); 筆記與備註事項JavaScript 部分Date.now()Date.now() 方法回傳自 1970/01/01 00:00:00 UTC 起經過的毫秒數。資料來源 - MDN 參考資料 JavaScript 30 day 作者 Github Wes Bos Js 30 day 中文指南 瓜瓜的 JS 30 我的 JS 30 練習Github]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>JavaScript30</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JS30紀錄 28-Video Speed Controller]]></title>
    <url>%2F2018%2F02%2F01%2FJavascript30days-28%2F</url>
    <content type="text"><![CDATA[目標使用 div 來製作一個速度條，來調整影片播放速度 Demo | Github 處理步驟不使用 input ，改使用 div ，透過滑鼠位置與 div 大小來計算播放速度 步驟 1.取得速度元素的 DOM ，然後建立 mousemove 滑鼠移動事件的觸發 12345678910111213// 取得 speed divconst speed = document.querySelector(".speed");// 取得 speed bar divconst bar = speed.querySelector(".speed-bar");/** * 速度條上滑鼠移動 * @param &#123;*&#125; e window.event */function handleMove(e) &#123;&#125;speed.addEventListener("mousemove", handleMove); 步驟 2.計算滑鼠在速度條上的位置，利用相對位置與速度條的大小計算比例；然後依照該比例去計算播放速度 1234567891011121314/** * 速度條上滑鼠移動 * @param &#123;*&#125; e window.event */function handleMove(e) &#123; // 取得滑鼠在速度條上的位置 const mousePoint = e.pageY - this.offsetTop; // 計算移動的速度條百分比 const mousePercent = mousePoint / this.offsetHeight; // 速度條的最小倍速與最大倍速 const min = 0.4, max = 4; // 播放速度計算 const playSpeed = mousePercent * (max - min) + min;&#125; 步驟 3.更換速度條的樣式與內容文字，以及播放器的播放速度 12345678910111213141516171819202122// 取得播放器 DOMconst video = document.querySelector("video");/** * 速度條上滑鼠移動 * @param &#123;*&#125; e window.event */function handleMove(e) &#123; // 取得滑鼠在速度條上的位置 const mousePoint = e.pageY - this.offsetTop; // 計算移動的速度條百分比 const mousePercent = mousePoint / this.offsetHeight; // 速度條的最小倍速與最大倍速 const min = 0.4, max = 4; // 播放速度計算 const playSpeed = mousePercent * (max - min) + min; // 速度條的樣式 bar.style.height = `$&#123;Math.round(mousePercent * 100)&#125;%`; // 速度條的內容文字更新 bar.textContent = `$&#123;playSpeed.toFixed(2)&#125;X`; // 調整播放速度 video.playbackRate = playSpeed;&#125; 筆記與備註事項JavaScript 部分toFixed()格式化數字，設定顯示小數位，最多到 20 位數 1234567891011var numObj = 12345.6789;numObj.toFixed(); // Returns '12346': note rounding, no fractional partnumObj.toFixed(1); // Returns '12345.7': note roundingnumObj.toFixed(6); // Returns '12345.678900': note added zeros(1.23e+20).toFixed(2); // Returns '123000000000000000000.00'(1.23e-10).toFixed(2); // Returns '0.00'2.34.toFixed(1); // Returns '2.3'2.35.toFixed(1); // Returns '2.4'. Note that it rounds up in this case.-2.34.toFixed(1); // Returns -2.3 (due to operator precedence, negative number literals don't return a string...)(-2.34).toFixed(1); // Returns '-2.3' (...unless you use parentheses) 參考資料 JavaScript 30 day 作者 Github Wes Bos Js 30 day 中文指南 瓜瓜的 JS 30 我的 JS 30 練習Github]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>JavaScript30</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JS30紀錄 27-Click and Drag]]></title>
    <url>%2F2018%2F01%2F31%2FJavascript30days-27%2F</url>
    <content type="text"><![CDATA[目標左右移動卷軸，使用滑鼠拖曳來移動左右 Demo | Github 處理步驟目的是拖拉畫面的時候等於移動卷軸，所以需要知道卷軸的 offsetLeft 與滑鼠橫軸位置的 pageX ，計算出滑鼠移動距離後，將卷軸位置重新設定，以達到移動的目的。 步驟 1.滑鼠點擊的時候，有樣式變換，離開畫面或是按鍵放開就樣式還原，建立 mousedown 、 mouseup 、 mouseleave 等事件，並切換樣式 1234567891011121314151617181920212223// 取得最外層的 div itemsconst slider = document.querySelector(".items");/** * 移除樣式 */function handleRemoveActive() &#123; slider.classList.remove("active");&#125;/** * 滑鼠按鍵按下 * @param &#123;*&#125; e */function handleMouseDown(e) &#123; slider.classList.add("active");&#125;// 滑鼠按鍵按下slider.addEventListener("mousedown", handleMouseDown);// 滑鼠離開元素slider.addEventListener("mouseleave", handleRemoveActive);// 滑鼠按鍵鬆開slider.addEventListener("mouseup", handleRemoveActive); 步驟 2.建立滑鼠移動的事件，並判斷滑鼠左鍵未點選時返回 1234567891011/** * 移動事件 * @param &#123;*&#125; e window.event */function handleMove(e) &#123; // 判斷滑鼠左鍵點選，未點選直接返回停止 if (e.buttons !== 1) return;&#125;// 滑鼠移動slider.addEventListener("mousemove", handleMove); 步驟 3.宣告變數 startX 紀錄滑鼠目前的 X 軸位置，以及 scrollLeft 卷軸目前的位置；接著計算移動距離與設定 12345678910111213141516171819202122232425262728293031// 紀錄滑鼠點擊的起始位置let startX;// 紀錄卷軸左邊位置let scrollLeft;/** * 滑鼠按鍵按下 * @param &#123;*&#125; e */function handleMouseDown(e) &#123; slider.classList.add("active"); // 設定起始位置 startX = e.pageX - slider.offsetLeft; // 紀錄卷軸目前位置 scrollLeft = slider.scrollLeft;&#125;/** * 移動事件 * @param &#123;*&#125; e window.event */function handleMove(e) &#123; // 判斷滑鼠左鍵點選，未點選直接返回停止 if (e.buttons !== 1) return; // 停止冒泡 e.stopPropagation(); // 移動距離 const walk = e.pageX - slider.offsetLeft - startX; // 卷軸設定位置 slider.scrollLeft = scrollLeft - walk;&#125; 筆記與備註事項JavaScript 部分offsetLeft取得元素的左邊界的相對值 pageX由滑鼠事件取得目前游標在畫面上的 X 座標 CSS 部分perspectiveperspective 属性指定了观察者与z=0平面的距离，使具有三维位置变换的元素产生透视效果。z&gt;0的三维元素比正常大，而z&lt;0时则比正常小，大小程度由该属性的值决定。 三维元素在观察者后面的部分不会绘制出来，即z轴坐标值大于perspective属性值的部分。 默认情况下，消失点位于元素的中心，但是可以通过设置perspective-origin属性来改变其位置資料來源 - MDN user-select實驗性功能，控制是否能被選取； 參考資料 JavaScript 30 day 作者 Github Wes Bos Js 30 day 中文指南 瓜瓜的 JS 30 我的 JS 30 練習Github]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>JavaScript30</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JS30紀錄 26-Stripe Follow Along Nav]]></title>
    <url>%2F2018%2F01%2F30%2FJavascript30days-26%2F</url>
    <content type="text"><![CDATA[目標類似 day22 Follow Along Link Highlighter 的概念，製作一個跟隨移動的強調下拉選單。 Demo | Github 處理步驟先製作強調的外框 DOM 與下拉選單的內容，利用 CSS 中的 opacity 與 display 來隱藏，之後透過 JS 在移動至選單標題時，進行外框大小的變化與 CSS 的顯示 步驟 1.取的所有標題元素，並建立移動到元素上與離開的觸發事件 123456789101112131415161718const triggers = document.querySelectorAll('.cool &gt; li');/** * 移動到元素上的觸發事件 */function handleEnter() &#123;&#125;/** * 離開元素的觸發事件 */function handleLeave() &#123;&#125;// 移動到元素上的觸發事件triggers.forEach(trigger =&gt; trigger.addEventListener('mouseenter',handleEnter));// 離開元素的觸發事件triggers.forEach(trigger =&gt; trigger.addEventListener('mouseleave',handleLeave)); 步驟 2.透過 CSS 操作顯示與隱藏 123456789101112131415161718/** * 移動到元素上的觸發事件 */function handleEnter() &#123; this.classList.add('trigger-enter'); background.classList.add('open'); // 內容最後顯示 this.classList.add('trigger-enter-active');&#125;/** * 離開元素的觸發事件 */function handleLeave() &#123; this.classList.remove('trigger-enter','trigger-enter-active'); background.classList.remove('open');&#125; 步驟 3.調整箭頭指向框位置與大小，使其符合下拉選單的內容 1234567891011121314151617181920212223242526272829303132// 指向框元素const background = document.querySelector('.dropdownBackground');// 取得指向框的位置const backgroundCoords = background.getBoundingClientRect();/** * 移動到元素上的觸發事件 */function handleEnter() &#123; this.classList.add('trigger-enter'); background.classList.add('open'); // 取得下拉選單內容 DOM const dropdown = this.querySelector('.dropdown'); // 取得位置資料 const dropCoords = dropdown.getBoundingClientRect(); // 設定指向框大小為下拉選單大小 background.style.width = `$&#123;dropCoords.width&#125;px`; background.style.height = `$&#123;dropCoords.height&#125;px`; // 使用 setProperty // background.style.setProperty('width', `$&#123;dropCoords.width&#125;px`); // background.style.setProperty('height', `$&#123;dropCoords.height&#125;px`); // 移動指向框 background.style.transform = `translate($&#123;dropCoords.left - backgroundCoords.left&#125;px,$&#123;dropCoords.top - backgroundCoords.top&#125;px)`; // 使用 setProperty // background.style.setProperty('transform', `translate($&#123;dropCoords.left - backgroundCoords.left&#125;px,$&#123;dropCoords.top - backgroundCoords.top&#125;px)`); // 調整內容最後顯示 this.classList.add('trigger-enter-active');&#125; 筆記與備註事項JavaScript 部分mouseenter當滑鼠移動到元素上的時候觸發；類似 mouseover ，其差異點在於 mouseenter 不會冒泡。 mouseleave當滑鼠離開元素的時候觸發；類似 mouseout ，其差異點在於 mouseleave 不會冒泡。 getBoundingClientRect取得元素的位置各項資料 setProperty設定 CSS 樣式 CSS 部分will-change為實驗性功能，簡單說就是當某個 css 需要 參考資料 JavaScript 30 day 作者 Github Wes Bos Js 30 day 中文指南 瓜瓜的 JS 30 我的 JS 30 練習Github]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>JavaScript30</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JS30紀錄 25-Event Capture, Propagation, Bubbling and Once]]></title>
    <url>%2F2018%2F01%2F27%2FJavascript30days-25%2F</url>
    <content type="text"><![CDATA[事件捕捉，冒泡事件的觀察與選擇參數的運用，先捕獲，再冒泡觀察，搭配 Console 觀看 Demo | Github 處理步驟首先觀察冒泡事件的觸發順序，變更為捕獲，觀察傳遞順序，最後使用 once 來觀察 步驟 1.建立三組 Div ，以及 click 觸發，觀察觸發順序 123456789101112const divs = document.querySelectorAll("div");/** * 顯示目前觸發的 DOM * * @param &#123;any&#125; e */function logText(e) &#123; console.log(this.classList.value);&#125;divs.forEach(div =&gt; div.addEventListener("click", logText)); 其結果會是 three &gt; two &gt; one 步驟 2.變更為捕獲 123456789101112131415const divs = document.querySelectorAll("div");/** * 顯示目前觸發的 DOM * * @param &#123;any&#125; e */function logText(e) &#123; console.log(this.classList.value);&#125;// 變更為捕獲divs.forEach(div =&gt; div.addEventListener("click", logText,&#123; capture: true&#125;)); 觸發順序變成 one &gt; two &gt; three 步驟 3.其後增加使用 once 參數，此參數將使觸發進行一次 筆記與備註事項JavaScript 部分EventTarget.addEventListener()EventTarget.addEventListener() 方法能將指定的事件監聽器註冊到 EventTarget 實作物件上。EventTarget 可能是 Document 中的 Element 物件、Document 物件本身、Window 物件，或是其它支援事件的物件（如：XMLHttpRequest）。資料來源 - MDN 參考資料 JavaScript 30 day 作者 Github Wes Bos Js 30 day 中文指南 瓜瓜的 JS 30 我的 JS 30 練習Github DOM 的事件傳遞機制：捕獲與冒泡]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>JavaScript30</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[.NET Core 入門筆記]]></title>
    <url>%2F2018%2F01%2F26%2FNET-Core-first-touch%2F</url>
    <content type="text"><![CDATA[紀錄 Will 保哥 的給 C# 開發人員的第一堂 .NET Core 入門的內容筆記，內容介紹詳細，從 .NET 介紹開始說明， .NET Framework 框架.NET Framework 大約在西元 2002 年推出 .NET 1.0 版，是一套由微軟主導的軟體開發平台，幫助開發人員可以更快的開發出各式各樣的應用程式，並且確保應用程式可以不受作業系統、CPU 架構等平台限制，在任意環境都可以正確執行。 微軟與其合作夥伴，共同訂製了 Common Language Infrastructure (CLI) 共通語言基礎架構，這是一份開放式的技術規範，讓所有符合 CLI 規範的應用程式，都能夠正常的運作在不同的電腦系統之中，而不用重新撰寫或編譯應用程式。 .NET 可攜式類別庫 (PCL)我們通常會將常用或是習慣使用的功能撰寫為 Class Library (類別庫)，使其產生組件 (Assembly) ，以利重複使用；但由於 .NET Framework 支援的平台時做太多，例如： .NET Framework 、.NET Core 、Mono 、Windows Phone …，所以才出現 PCL ，不過現在除非還有需要使用 Windows Phone 與 Silverlight 這兩個平台，不然 PCL 已經不需要使用了，直接使用 .NET Standard .NET Core 2.0.NET Core 就是微軟最新強調跨平台的的實作(雖然以前也推了一些，但是都不是真正跨平台) .NET Core 的組成包括 一個 .NET 執行階段 (Runtime)提供型別系統、組件載入、記憶體回收機制、原生 Interop 及其他基本服務。 一組 Framework 函式庫 (Framework Libraries)提供基礎資料型別 (primitive data types) 與一些好用的應用程式類別與工具類別。 一組 SDK 工具組及語言編譯器提供軟體開發過程所需的基礎工具，此工具組可以透過 .NET Core SDK 取得。 一個 dotnet 主程式 ( app host )它主要用來啟動與執行 .NET Core 應用程式 ( 例如你可以用 dotnet ConsoleApp1.dll 命令來啟動 .NET Core 應用程式 )，過程中它會自動選取正確的 Runtime，並將 Runtime 裝載到記憶體內，提供 DLL 組件的載入原則，然後啟動應用程式執行。 .NET Core 並不是一套全新的框架，它是一份 .NET Framework 的跨平台實作。 .NET Standard 標準類別庫.NET Standard 標準類別庫 (簡稱 .NET Standard)，說穿了就是一種類別庫的類型；其實就是希望支援所有 .NET 平台能擁有一致的 BCL 基礎類別庫 .NET Standard 版本越新，代表你可以使用的 API 就越多 .NET Standard 版本越舊，代表你可以支援的平台就越多 ( 相對的可使用的 API 就會減少 ) 下表列出所有 .NET Standard 版本和支援的平台： 工具.NET Portability AnalyzerVisual Studio 2017 的擴充套件，檢查目前專案是否適合轉換為 .NET Core ，就是檢查是否有使用到不支援的 API 使用方式相當簡單，只要在 solution explore 中，選取要比較的專案，再使用滑鼠右鍵呼叫選單，選取 Analyzer Project Portability NuGetPackageExplorer安裝方式可以透過 Microsoft Store 直接快速安裝；此工具可以分析 Nuget 上的套件相容性，可以清楚得知，此套件是不是可以運用在 .NET Core 上。 相關連結 Managed 程式碼 Common Language Runtime 語言獨立性以及與語言無關的元件 Framework 程式庫 Developing for Multiple Platforms with the .NET Framework Portable Class Library (PCL) now available on all platforms .NET Core 指南 .NET Core 使用者入門 .NET Core Roadmap .NET Standard Target frameworks .NET Core SDK Downloads .NET API 瀏覽器 .NET Portability Analyzer ( VS2017 擴充套件 ) .NET Portability Analyzer-.NET | Microsoft Docs NuGetPackageExplorer | Github]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JS30紀錄 24-Sticky Nav]]></title>
    <url>%2F2018%2F01%2F25%2FJavascript30days-24%2F</url>
    <content type="text"><![CDATA[目標利用 CSS 來讓製作網站的置頂選單 Demo | Github 處理步驟利用 CSS 的 position 固定後，再使用 transform 來強調凸顯內容，撰寫一部分 JS ，調整內容的位置。 步驟 1.建立卷軸移動觸發事件 1234567891011const nav = document.querySelector("#main");// 取得選單 toplet topOfNav = nav.offsetTop;// 修正選單function fixNav() &#123;&#125;// 建立卷軸移動事件window.addEventListener("scroll", fixNav); 步驟 2.建立固定標題列的 CSS 12345* 固定標題 */body.fixed-nav nav &#123; position: fixed; box-shadow:0 5px 0 rgba(0,0,0,0.1);&#125; 然後在 fixNav 中，判斷卷軸移動位置，動態增加樣式 12345678// 修正選單function fixNav() &#123; if (window.scrollY &gt;= topOfNav) &#123; document.body.classList.add("fixed-nav"); &#125; else &#123; document.body.classList.remove("fixed-nav"); &#125;&#125; 步驟 3.增加標題列的 logo 樣式，並讓標題列置頂時顯示，並調整內文的文字大小 123456789/* 顯示標題 logo */.fixed-nav li.logo &#123; max-width:500px;&#125;/* 內容比例調整為原本文字大小 */body.fixed-nav .site-wrap &#123; transform: scale(1);&#125; 增加內文 padding 避免內文因為凍結標題列而被遮蔽 12345678910111213// 修正選單function fixNav() &#123; if (window.scrollY &gt;= topOfNav) &#123; // 增加內文 padding 避免內文因為凍結標題列而被遮蔽 document.body.style.paddingTop = nav.offsetHeight + 'px'; document.body.classList.add("fixed-nav"); &#125; else &#123; document.body.classList.remove("fixed-nav"); document.body.style.paddingTop = 0; &#125;&#125; 筆記與備註事項CSS 部分positionCSS position属性用于指定一个元素在文档中的定位方式。top，right，bottom 和 left 属性则决定了该元素的最终位置。 定位类型 定位元素（positioned element）是其计算后位置属性为 relative, absolute, fixed 或 sticky 的一个元素。 相对定位元素（relatively positioned element）是计算后位置属性为 relative 的元素。 绝对定位元素（absolutely positioned element）是计算后位置属性为 absolute 或 fixed 的元素。 粘性定位元素（stickily positioned element）是计算后位置属性为 sticky 的元素。 資料來源 - MDN 參考資料 JavaScript 30 day 作者 Github Wes Bos Js 30 day 中文指南 瓜瓜的 JS 30 我的 JS 30 練習Github]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>JavaScript30</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SQL Server 移除預設值]]></title>
    <url>%2F2018%2F01%2F19%2FSQL-Drop-Default-Constraint%2F</url>
    <content type="text"><![CDATA[已經設定好了的預設值，現在要變更，需要先把 Constraint 移除，再行新增 要移除某個資料表某個欄位的預設值 constraint ，所以需要先取得此 constraint 的 OBJECT_NAME 1234567891011-- 取得 Object_Name-- TableName:請填入要變更的資料表名稱-- ColumnName:請填入要變更的欄位名稱DECLARE @defcon SYSNAME;SELECT @defcon = OBJECT_NAME(sc.default_object_id)FROM SYS.COLUMNS AS scWHERE sc.[object_id] = OBJECT_ID('TableName') AND sc.[name] = 'ColumnName';-- 取得了 Object_Name，就可以來移除它EXEC ('ALTER TABLE TableName DROP CONSTRAINT ' + @defcon) 參考資料 OBJECT_NAME sys.columns OBJECT_ID]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>T-SQL</tag>
        <tag>SQLServer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JS30紀錄 23-Speech Synthesis]]></title>
    <url>%2F2018%2F01%2F17%2FJavascript30days-23%2F</url>
    <content type="text"><![CDATA[目標使用合成語音來按照畫面文字播放語音 Demo | Github 處理步驟步驟 1.設定合成語音 API 物件，並取得畫面文字為語音內容 1msg.text = document.querySelector('[name="text"]').value; 步驟 2.合成語音的下拉選單填充，並設定選單變更事件 先填充選單內容 123456789101112// 填充下拉選單function populateVoices() &#123; // 取得目前支援的所有語音 voices = this.getVoices(); voicesDropdown.innerHTML = voices .filter(voice =&gt; voice.lang.includes("en")) .map( voice =&gt; `&lt;option value="$&#123;voice.name&#125;"&gt;$&#123;voice.name&#125; ($&#123;voice.lang&#125;)&lt;/option&gt;` ) .join("");&#125; 選單變更事件 123456789// 設定語音function setVoice() &#123; msg.voice = voices.find(voice =&gt; voice.name === this.value);&#125;speechSynthesis.addEventListener("voiceschanged", populateVoices);// 語音下拉選單變更voicesDropdown.addEventListener("change", setVoice); 步驟 3.設定播放速度、文字與聲道 12345// 設定播放速度、文字、聲道function setOption() &#123; console.log(this.name, this.value); msg[this.name] = this.value;&#125; 步驟 4.設定播放與停止按鍵功能 123456789101112// 播放與停止function toggle(startOver = true) &#123; speechSynthesis.cancel(); if (startOver) &#123; speechSynthesis.speak(msg); &#125;&#125;// 播放speakButton.addEventListener("click", toggle);// 停止播放stopButton.addEventListener("click", () =&gt; toggle(false)); 筆記與備註事項JavaScript 部分SpeechSynthesisUtteranceThe SpeechSynthesisUtterance interface of the Web Speech API represents a speech request. It contains the content the speech service should read and information about how to read it (e.g. language, pitch and volume.)資料來源 - MDN Web Speech API 中的 SpeechSynthesis 語音合成服務 SpeechSynthesisThe SpeechSynthesis interface of the Web Speech API is the controller interface for the speech service; this can be used to retrieve information about the synthesis voices available on the device, start and pause speech, and other commands besides.資料來源 - MDN 語音 API 的服務介面；以下是此次範例使用的屬性說明 pitch 聲道 text 播放內容文字 rate 說話速度 參考資料 JavaScript 30 day 作者 Github Wes Bos Js 30 day 中文指南 瓜瓜的 JS 30 我的 JS 30 練習Github]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>JavaScript30</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JS30紀錄 22-Follow Along Link Highlighter]]></title>
    <url>%2F2018%2F01%2F17%2FJavascript30days-22%2F</url>
    <content type="text"><![CDATA[目標製作一個凸顯高亮度來跟隨文章中的超連結 Demo | Github 處理步驟此次實作內容也很簡易，建立一個 span 元素，並設定 highlight class ，然後移動這個元素到選取的文字上。 步驟 1.取得所有超連結 12// 取得所有超連結const triggers = document.querySelectorAll("a"); 步驟 2.建立 highlight 元素 123456//建立 highlight 元素const highlight = document.createElement("span");// 設定 CSShighlight.classList.add("highlight");// 加入到 bodydocument.body.appendChild(highlight); 步驟 3.針對所有超連結元素綁定 mouseenter 事件 123456// create function highlight linkfunction highlightLink() &#123;&#125;// 對所有超連結綁定事件triggers.forEach(a =&gt; a.addEventListener("mouseenter", highlightLink)); 步驟 4.function highlightLink 內容撰寫，主要是設定 highlight 大小與位置，先利用 getBoundingClientRect 取得目前元素大小與位置 1234567891011121314function highlightLink() &#123; // 取得元素的大小與位置 const domRect = this.getBoundingClientRect(); console.dir(domRect); // 設定 highlight 寬度等於目前元素寬度 highlight.style.width = `$&#123;domRect.width&#125;px`; // 設定 highlight 高度等於目前元素高度 highlight.style.height = `$&#123;domRect.height&#125;px`; // 移動 highlight 元素到目前元素位置，考量因為有 scroll bar highlight.style.transform = `translate($&#123;domRect.left + window.scrollX&#125;px, $&#123;domRect.top + window.scrollY&#125;px)`; //console.log([window.scrollX,window.scrollY]);&#125; 筆記與備註事項JavaScript 部分getBoundingClientRect()取得元素的大小與相對位置 mouseenter當滑鼠移動到元素上時觸發。 參考資料 JavaScript 30 day 作者 Github Wes Bos Js 30 day 中文指南 瓜瓜的 JS 30 我的 JS 30 練習Github]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>JavaScript30</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JS30紀錄 21-Geolocation]]></title>
    <url>%2F2018%2F01%2F15%2FJavascript30days-21%2F</url>
    <content type="text"><![CDATA[目標操作 Geolocation API ，取得目前所在方位，與行進速度。 Demo | Github 處理步驟由於教學影片使用 Xcode 來針對行動裝置模擬，並模擬行進速度與方向，而我使用 Windows 10 ，要直接在模擬器開啟尚須要一些設定，加上不確定 Android 有無 Geolocation 的模擬範例(模擬步行或是開車)，所以就直接上 Github 看結果。 另外也可以直接連接手機測試，透過 Chrome 的 remote-debugging 步驟 1.取得 DOM 資料 1234// 取得方向 DOMconst arrow = document.querySelector(".arrow");// 取得速度 DOMconst speed = document.querySelector(".speed-value"); 步驟 2.改變顯示資料，但是因為瀏覽器支援因素，目前手上的測試 speed 與 heading 皆是 null 12345678910navigator.geolocation.watchPosition( data =&gt; &#123; console.log(data); speed.textContent = data.coords.speed; arrow.style.transform = `rotate($&#123;data.coords.heading&#125;deg)`; &#125;, err =&gt; &#123; console.error(err); &#125;); 筆記與備註事項JavaScript 部分地理位置定位 (Geolocation)Web Apps 若需要使用者的位置，可透過 Geolocation API 取得相關資訊。而基於隱私權的考量，這些 Web Apps 均必須取得使用者的許可之後，才能發佈位置資訊。資料來源 - MDN Geolocation.watchPosition()Geolocation.watchPosition() 這個方法是用來註冊一個處理的函式，當使用者的裝置位置更新時，這個函式所傳入的回呼函式(callback function) 就會自動被呼叫。你也可以選擇性的定義錯誤時哪些錯誤回呼函式(error callback function) 需要被呼叫。資料來源 - MDN CoordinatesCoordinates 這個介面用來存取裝置的經緯度，速度以及這些數值的準確度。資料來源 - MDN 參考資料 JavaScript 30 day 作者 Github Wes Bos Js 30 day 中文指南 瓜瓜的 JS 30 我的 JS 30 練習Github]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>JavaScript30</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JS30紀錄 20-Speech Detection]]></title>
    <url>%2F2018%2F01%2F12%2FJavascript30days-20%2F</url>
    <content type="text"><![CDATA[目標語音識別 API 操作，透過 SpeechRecognition 來進行語音辨識，並呈現文字 Demo | Github 處理步驟步驟 1. 啟動語音 1window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition; 宣告變數為語音辨識 1const recognition = new SpeechRecognition(); 建立 p tag ，等下將辨識文字顯示在上 啟用識別 recognition.start(); 當識別結束，重複識別 1recognition.addEventListener("end", recognition.start); 參考資料SpeechRecognition()interimResultsSpeechRecognition event startSpeechRecognition event end 步驟 2.產生識別結果後，將文字呈現在 p tag 內容中，識別結果為 SpeechRecognitionResultList 取得 transcript 屬性，就是辨識文字 當確認辨識結束，建立新的 p tag 元素 12345678910111213141516recognition.addEventListener("result", e =&gt; &#123; // 識別結果為 SpeechRecognitionResultList 取得 transcript 屬性，就是辨識文字 const transcript = Array.from(e.results) .map(result =&gt; result[0]) .map(result =&gt; result.transcript) .join(""); // 輸出辨識文字內容 p.textContent = transcript; // 確認辨識結束，就產生新的 p 元素 if (e.results[0].isFinal) &#123; p = document.createElement("p"); words.appendChild(p); &#125;&#125;); 參考資料SpeechRecognition event result 步驟 3.當辨識文字出現特定文字的時候，可以使用 replace 取代呈現。 123// 特殊內容使用符號文字取代 const poopScript = transcript.replace(/poop|poo|shit|dump/gi, '💩'); p.textContent = poopScript; 筆記與備註事項JavaScript 部分SpeechRecognition()實驗性功能，所以是尚未確定所有瀏覽器支援的功能。 SpeechRecognition.interimResults此屬性為布林值，控制是否取得即時辨識結果，預設為 false SpeechRecognition.start()啟動語音識別服務 SpeechRecognition Events 觸發事件以下為 Web Speech API 事件 result語音辨識結束返回結果的時候觸發。 12345678910111213recognition.onresult = function(event) &#123; // The SpeechRecognitionEvent results property returns a SpeechRecognitionResultList object // The SpeechRecognitionResultList object contains SpeechRecognitionResult objects. // It has a getter so it can be accessed like an array // The first [0] returns the SpeechRecognitionResult at position 0. // Each SpeechRecognitionResult object contains SpeechRecognitionAlternative objects that contain individual results. // These also have getters so they can be accessed like arrays. // The second [0] returns the SpeechRecognitionAlternative at position 0. // We then return the transcript property of the SpeechRecognitionAlternative object var color = event.results[0][0].transcript; diagnostic.textContent = 'Result received: ' + color + '.'; bg.style.backgroundColor = color;&#125; end語音辨識服務結束時觸發。 12345var recognition = new SpeechRecognition();recognition.onend = function() &#123; console.log('Speech recognition service disconnected');&#125; 參考資料 JavaScript 30 day 作者 Github Wes Bos Js 30 day 中文指南 瓜瓜的 JS 30 我的 JS 30 練習Github]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>JavaScript30</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JS30紀錄 19-Webcam Fun]]></title>
    <url>%2F2018%2F01%2F09%2FJavascript30days-19%2F</url>
    <content type="text"><![CDATA[目標練習操作 Webcam 攝像頭，將攝像頭影像投射到 Video 上，並利用 canvas 來擷取圖片，練習濾鏡的操作。 Demo | Github 處理步驟前置作業必須先安裝 node.js，之後按照以下的設定，設定 package.json1234567891011121314&#123; "name": "gum", "version": "1.0.0", "description": "", "main": "index.js", "scripts": &#123; "start": "browser-sync start --server --files \"*.css, *.html, *.js\"" &#125;, "author": "", "license": "ISC", "devDependencies": &#123; "browser-sync": "^2.12.5" &#125;&#125; 由於此篇主題需要伺服器模擬，所以使用了 Browsersync ，其啟動方式透過 1npm start 或是 1browser-sync start --server --files "*.css, *.html, *.js" 步驟 1.啟動視訊裝置，並寫入 video tag 呈現出來 123456789101112131415161718192021222324252627282930313233343536const video = document.querySelector(".player");const canvas = document.querySelector(".photo");const ctx = canvas.getContext("2d");/** * 啟動 webcam */function getVideo() &#123; // 取得user的視訊裝置 navigator.mediaDevices .getUserMedia(&#123; video: true, audio: false &#125;) // 把回傳的 MediaStream 寫進 html 的 video tag 中並播放 .then(localMediaStream =&gt; &#123; //console.log(localMediaStream); video.src = window.URL.createObjectURL(localMediaStream); video.play(); &#125;) .catch(err =&gt; &#123; console.error(`OH NO!!!`, err); &#125;);&#125;/** * 將 webcam 拍攝影像繪製到 canvas 上 */function paintToCanvas() &#123; const width = video.videoWidth; const height = video.videoHeight; canvas.width = width; canvas.height = height; return setInterval(() =&gt; &#123; ctx.drawImage(video, 0, 0, width, height); &#125;, 16);&#125;getVideo();video.addEventListener("canplay", paintToCanvas); 參考資料Navigator.mediaDevicesMediaDevices.getUserMedia()URL.createObjectURL()canplayCanvasRenderingContext2D.drawImage() 步驟 2.拍照截圖按鍵觸發功能 12345678910111213141516171819/** * 攝像頭截圖 */function takePhoto() &#123; // played the sound snap.currentTime = 0; snap.play(); // take the data out of the canvas const data = canvas.toDataURL("image/jpeg"); const link = document.createElement("a"); // 設置連結位置為轉圖檔後的base64位置 link.href = data; // 設置連結為下載並設定預設下載檔名 link.setAttribute("download", "handsome"); link.innerHTML = `&lt;img src="$&#123;data&#125;" alt="Handsome Man" /&gt;`; // strip.firsChild 永遠為 null 因為 strip 為 const 所以無法得到最新的資料 strip.insertBefore(link, null);&#125; 參考資料Node.insertBefore() 步驟 3.添加畫面與色彩分離功能 12345678910111213141516171819202122232425262728293031/** * 畫面色彩分割 * @param &#123;*&#125; pixels */function rgbSplit(pixels) &#123; for (let i = 0; i &lt; pixels.data.length; i += 4) &#123; pixels.data[i - 150] = pixels.data[i + 0]; // RED pixels.data[i + 500] = pixels.data[i + 1]; // GREEN pixels.data[i - 550] = pixels.data[i + 2]; // Blue &#125; return pixels;&#125;function paintToCanvas() &#123; const width = video.videoWidth; const height = video.videoHeight; canvas.width = width; canvas.height = height; return setInterval(() =&gt; &#123; ctx.drawImage(video, 0, 0, width, height); // take the pixels out let pixels = ctx.getImageData(0, 0, width, height); //console.log(pixels); pixels = rgbSplit(pixels); // 重置分割畫面 ctx.putImageData(pixels, 0, 0); &#125;, 16);&#125; 參考資料getImageData()putImageData() 步驟 4.添加紅色濾鏡功能 123456789101112/** * 紅色濾鏡效果 * @param &#123;*&#125; pixels */function redEffect(pixels) &#123; for (let i = 0; i &lt; pixels.data.length; i += 4) &#123; pixels.data[i + 0] = pixels.data[i + 0] + 200; // RED pixels.data[i + 1] = pixels.data[i + 1] - 50; // GREEN pixels.data[i + 2] = pixels.data[i + 2] * 0.5; // Blue &#125; return pixels;&#125; 步驟 5.綠幕功能效果 12345678910111213141516171819202122232425262728function greenScreen(pixels) &#123; const levels = &#123;&#125;; document.querySelectorAll(".rgb input").forEach(input =&gt; &#123; levels[input.name] = input.value; &#125;); for (i = 0; i &lt; pixels.data.length; i = i + 4) &#123; red = pixels.data[i + 0]; green = pixels.data[i + 1]; blue = pixels.data[i + 2]; alpha = pixels.data[i + 3]; if ( red &gt;= levels.rmin &amp;&amp; green &gt;= levels.gmin &amp;&amp; blue &gt;= levels.bmin &amp;&amp; red &lt;= levels.rmax &amp;&amp; green &lt;= levels.gmax &amp;&amp; blue &lt;= levels.bmax ) &#123; // take it out! pixels.data[i + 3] = 0; &#125; &#125; return pixels;&#125; 筆記與備註事項HTML 部分a tag attribute download此屬性告知瀏覽器下載這個連結，假如屬性有設定資料，則為下載檔案的預設檔名。 JavaScript 部分Navigator.mediaDevices唯讀屬性，取得 MediaDevices 物件，連接視訊裝置，包含攝影鏡頭與麥克風。 MediaDevices.getUserMedia()MediaDevices.getUserMedia()方法提示用户允许使用一个视频和/或一个音频输入设备，例如相机或屏幕共享和/或麦克风。如果用户给予许可，就返回一个Promise 对象，MediaStream对象作为此Promise对象的Resolved［成功］状态的回调函数参数，相应的，如果用户拒绝了许可，或者没有媒体可用的情况下，PermissionDeniedError 或者NotFoundError作为此Promise的Rejected［失败］状态的回调函数参数。注意，由于用户不会被要求必须作出允许或者拒绝的选择，所以返回的Promise对象可能既不会触发resolve 也不会触发 reject。資料來源 - MDN URL.createObjectURL()靜態方法 URL.createObjectURL() 用於建立一個帶有URL的 DOMString 以代表參數中所傳入的物件. 該URL的生命週期與創造它的window中的 document一致. 這個新的物件URL 代表了所指定的 File 物件 或是 Blob 物件.資料來源 - MDN canplay播放媒體檔案時候觸發 CanvasRenderingContext2D.drawImage()Canvas 2D API 中的方法，在 Canvas 上繪製圖案 CanvasRenderingContext2D.getImageData()返回一个ImageData对象，用来描述canvas区域隐含的像素数据，这个区域通过矩形表示，起始点为(sx, sy)、宽为sw、高为sh。資料來源 - MDN CanvasRenderingContext2D.putImageData()CanvasRenderingContext2D.putImageData() 是 Canvas 2D API 将数据从已有的 ImageData 对象绘制到位图的方法。 如果提供了一个绘制过的矩形，则只绘制该矩形的像素。此方法不受画布转换矩阵的影响。資料來源 - MDN Node.insertBefore()在目前元素 ( DOM ) 中的子節點中插入一個子元素 12345678910// Get a reference to the element in which we want to insert a new nodevar parentElement = document.getElementById('parentElement');// Get a reference to the first childvar theFirstChild = parentElement.firstChild;// Create a new elementvar newElement = document.createElement("div");// Insert the new element before the first childparentElement.insertBefore(newElement, theFirstChild); setInterval()需要每隔一段時間就重複執行的 function 就可以呼叫此方法。 .globalAlphaCanvas 2D API 設定透明度的屬性，設定區間在 0.0 和 1.0 之間。預設值為 1.0 參考資料 JavaScript 30 day 作者 Github Wes Bos Js 30 day 中文指南 瓜瓜的 JS 30 我的 JS 30 練習Github]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>JavaScript30</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JS30紀錄 18-Adding Up Times With Reduce]]></title>
    <url>%2F2018%2F01%2F07%2FJavascript30days-18%2F</url>
    <content type="text"><![CDATA[目標計算列表中的 dataset 時間的總和，在 console 輸出時、分、秒的數據，此篇需要搭配 console 觀看 123456789101112131415161718&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;Videos&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;ul class="videos"&gt; &lt;li data-time="5:43"&gt; Video 1 &lt;/li&gt; &lt;li data-time="2:33"&gt; Video 2 &lt;/li&gt; &lt;!-- 以下省略... --&gt; &lt;/ul&gt;&lt;/body&gt;&lt;/html&gt; Demo | Github 處理步驟步驟 1.一開始取得所有 data-time 的 DOM，並注意轉換為 Array querySelectorAll 取出來的資料是類似 Array 而已，所以加上 Array.from 轉換為 Array 1const timeNodes = Array.from(document.querySelectorAll("[data-time]")); 步驟 2. 利用 map 來取得 dataset 資料 12const seconds = timeNodes .map(node =&gt; node.dataset.time) 繼續利用 map 將分與秒轉換為秒數 1234567const seconds = timeNodes .map(node =&gt; node.dataset.time) .map(timeCode =&gt; &#123; const [mins, secs] = timeCode.split(":").map(parseFloat); return mins * 60 + secs; console.log(mins, secs); &#125;) 透過 reduce 來加總資料 12345678const seconds = timeNodes .map(node =&gt; node.dataset.time) .map(timeCode =&gt; &#123; const [mins, secs] = timeCode.split(":").map(parseFloat); return mins * 60 + secs; console.log(mins, secs); &#125;) .reduce((total, vidSeconds) =&gt; total + vidSeconds); 步驟 3.總秒數取出來後，劃分時、分、秒的數值，利用 Math.floor 與 % 取得餘數的方式 123456789let secondsLeft = seconds;const hours = Math.floor(secondsLeft / 3600);// 取得餘數secondsLeft = secondsLeft % 3600;const mins = Math.floor(secondsLeft / 60);secondsLeft = secondsLeft % 60;console.log(hours,mins,secondsLeft); 筆記與備註事項JavaScript 部分Math.floor()類似無條件捨去，直接取整數，需要注意的是負數的運用 12345678910Math.floor( 45.95); // 45 Math.floor( 45.05); // 45 Math.floor( 4 ); // 4 Math.floor(-45.05); // -46 Math.floor(-45.95); // -46 參考資料 JavaScript 30 day 作者 Github Wes Bos Js 30 day 中文指南 瓜瓜的 JS 30 我的 JS 30 練習Github]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>JavaScript30</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JS30紀錄 17-Sort Without Articles]]></title>
    <url>%2F2018%2F01%2F07%2FJavascript30days-17%2F</url>
    <content type="text"><![CDATA[目標文章的排序，排除量詞等不必要的詞彙，再來排序，例如原本資料為 1const bands = ['The Plot in You', 'The Devil Wears Prada', 'Pierce the Veil', 'Norma Jean', 'The Bled', 'Say Anything', 'The Midway State', 'We Came as Romans', 'Counterparts', 'Oh, Sleeper', 'A Skylit Drive', 'Anywhere But Here', 'An Old Dog']; 要排除 a 、 an 、 the 這些詞彙後，排序列表 Demo | Github 處理步驟步驟 1.利用 sort 先行排序 步驟 2.因為是文字排序所以自動採用 unicode 編碼排序，但是要排除 a 、 an 、 the 這些詞彙，所以建立 strip 方法來排除 步驟 3.排序結果使用 arrow function ，並將結果呈現到 HTML 上 筆記與備註事項此篇為應用 sort 的部分，應用的方法都是之前的主題學習過的內容，算是進階應用的部分。 參考資料 JavaScript 30 day 作者 Github Wes Bos Js 30 day 中文指南 瓜瓜的 JS 30 我的 JS 30 練習Github]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>JavaScript30</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JS30紀錄 16-Mouse Move Shadow]]></title>
    <url>%2F2018%2F01%2F05%2FJavascript30days-16%2F</url>
    <content type="text"><![CDATA[目標讓文字陰影因為滑鼠移動而移動。 Demo | Github 處理步驟步驟 1. 因為 .hero 的樣式被設定滿版，所以直接取得 .hero 的 DOM 建立 mousemove 事件與綁定 shadow 步驟 2.此步驟需要注意的是，利用 offset 來計算，另外因為事件綁定是 mousemove 所以在移動到文字上時，所取得的 offset 值會變成該文字 DOM 內的資料，所以需要進行判斷式，來針對數值調整 設定變數 walk 為陰影移動固定值 shadow 內，取得 hero 的長寬，利用 offsetWidth 與 offsetHeight shadow 內，利用 e 取得目前滑鼠在畫面中的 offsetX 與 offsetY 當 e.target 為文字 DOM 時，讓數值添加 offsetLeft 或是 offsetTop 步驟 3. 使用 Math.round() 來取整數近似值 為了使陰影移動到文字的上邊與左邊，計算出來的值扣除 walk 的一半 12const xWalk = Math.round(mouseX / width * walk - walk / 2);const yWalk = Math.round(mouseY / height * walk - walk / 2); 添加多組陰影 筆記與備註事項HTML 部分contenteditable表示該元素是否可以被使用者編輯 JavaScript 部分Math.round()Math.round() 函數回傳四捨五入後的近似值.資料來源 - MDN MouseEvent.offsetX 與 MouseEvent.offsetY滑鼠移動點與事件對象在 X 軸或是 Y 軸的偏移量值。 HTMLElement.offsetLeft 與 HTMLElement.offsetTopoffsetLeft 返回當前元素左上角相對於 HTMLElement.offsetParent 節點的左邊界偏移的像素值。 offsetTop 返回當前元素相對於 offsetParent 元素頂部的偏移值。 HTMLElement.offsetWidth 與 HTMLElement.offsetHeight資料來源 - MDN 參考資料 JavaScript 30 day 作者 Github Wes Bos Js 30 day 中文指南 瓜瓜的 JS 30 我的 JS 30 練習Github]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>JavaScript30</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JS30紀錄 15-LocalStorage]]></title>
    <url>%2F2018%2F01%2F04%2FJavascript30days-15%2F</url>
    <content type="text"><![CDATA[目標讓使用者可以自行記錄該小吃的項目，並確認是否選擇，只要使用同電腦同瀏覽器，前一次輸入資料將會保留(不主動清除的話)；此篇主題為使用 LocalStorage ，所以除了看畫面之外，可以搭配 Console 來觀看。 Demo | Github 處理步驟步驟 1. 讓變數讀取 localStorage 的資料，沒有的話給予空陣列 設定按鈕事件，並讓事件停止冒泡 添加各種瀏覽器的停止冒泡功能 1234567891011121314/** * 事件停止冒泡 * @param &#123;*&#125; event */function stopPopup(event) &#123; if (!event) event = window.event; event.cancelBubble = true; event.returnValue = false; if (event.stopPropagation) &#123; event.preventDefault(); event.stopPropagation(); &#125; return false;&#125; 步驟 2. 取得輸入框的輸入值 將輸入資料增加到陣列變數 將陣列資料回存至 localStorage 步驟 3. 使用 JS 來動態增加 html tag ，此處範例直接使用 Template literals 將方法分解至單筆資料新增的 populateItem function 利用 forEach 來完成 步驟 4. 進行選單勾選的事件 勾選後更新 items 變數與更新 localStorage 筆記與備註事項HTML 部分此次範例中的魚標誌，是使用 SVG 繪製 SVG可縮放向量圖形 (Scalable Vector Graphics，SVG) 是用於描述二維向量圖形的 XML 標記語言。基本上，SVG 用於圖形，而 XHTML 用於文字。SVG 類似 Adobe 專有的 Flash 技術，SVG 與 Flash 兩者最大的分別在於 SVG 為 W3C 所推薦 (即標準)，並以 XML 為基礎，而非封閉的二進制格式。SVG 設計為與其他 W3C 標準 (如 CSS、DOM 及 SMIL) 一同運作。資料來源 - MDN JavaScript 部分Window.localStorage資料暫存在瀏覽器上，並且不會自動刪除，除非自行清除瀏覽資料；使用無痕瀏覽的話，關閉視窗等於清除掉。 Document.createElement()於 HTML 文件中，Document.createElement() 方法可以依指定的標籤名稱（tagName）建立 HTML 元素，或是在未定義標籤名稱下建立一個 HTMLUnknownElement。在 XUL 文件中，Document.createElement() 將會建立指定的 XUL 元素。而在其它文件，則會建立一個 namespace URI 為 null 的元素。資料來源 - MDN 參考資料 JavaScript 30 day 作者 Github Wes Bos Js 30 day 中文指南 瓜瓜的 JS 30 我的 JS 30 練習Github]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>JavaScript30</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JS30紀錄 14-JavaScript References vs Copying]]></title>
    <url>%2F2018%2F01%2F03%2FJavascript30days-14%2F</url>
    <content type="text"><![CDATA[目標熟悉了解 References 位址與複製指向的差異，此篇需要對照 Console 才能觀看。 Demo | Github 處理步驟步驟 1. 比較普通變數字串、整數或布林變數的參照，只要宣告一變數複製，兩者即為不同；這幾個類型類似實值型別的參照 1234567891011let age = 100;let age2 = age;console.log(age, age2); // 100,100age = 200;console.log(age, age2); // 200,100let name = "Wes";let name2 = name;console.log(name, name2); // Wes,Wesname = "wesley";console.log(name, name2); // wesley,Wes 步驟 2. 比較陣列陣列物件的複製就類似參照型別了，所以可以透過一些函式回傳新的陣列，有以下幾種方式 slice() [].concat Spread Array.from 步驟 3. 比較物件物件的複製也是類似參照型別，所以跟陣列類似，有以下幾個方式處理： Object.assign Spread syntax 但是物件裡面尚有巢狀物件的情形需要考慮，陣列其實也是有巢狀的情形，所以可以利用 JSON 來處理 1234567891011const wes = &#123; name: "Wes", age: 100, social: &#123; twitter: "@wesbos", facebook: "wesbos.developer" &#125;&#125;;const dev2 = JSON.parse(JSON.stringify(wes));dev2.social.twitter = "@coolman";console.log(dev2.social, wes.social); 筆記與備註事項JavaScript 部分Spread syntaxES 6 出現的快速語法，針對 function 、 array 、 object ，皆可以使用，用來結合物件或陣列等。 12345678// For function calls:myFunction(...iterableObj);// For array literals or strings:[...iterableObj, '4', 'five', 6];// For object literals (new in ECMAScript; stage 3 draft):let objClone = &#123; ...obj &#125;; Array.prototype.concat()concat() 方法回傳一個包含呼叫者陣列本身的值，以及被當作參數提供的陣列或是值的而成的新陣列。資料來源 - MDN Object.assign()Object.assign() 被用來複製一個或多個物件自身所有可數的屬性到另一個目標物件。回傳的值為該目標物件。資料來源 - MDN 參考資料 JavaScript 30 day 作者 Github Wes Bos Js 30 day 中文指南 瓜瓜的 JS 30 我的 JS 30 練習Github]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>JavaScript30</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JS30紀錄 13-Slide in on Scroll]]></title>
    <url>%2F2017%2F12%2F31%2FJavascript30days-13%2F</url>
    <content type="text"><![CDATA[目標隨著卷軸移動到中央，讓圖片動態顯示。 Demo | Github 處理步驟步驟 1.首先取得所有圖片 HTML ，並建立空的 Function checkSlide 與綁定 scroll 捲軸移動事件。 步驟 2. 因為 scroll 每次觸發頻率過高，所以呼叫 debounce 來降低呼叫頻率，避免效能損耗 針對所有圖片 HTML 進行 foreach 迴圈 取得目前畫面所在的高度 取得圖片所在的高度 步驟 3.依照上一步驟取得的高度位置，進行判斷，然後添加 active class 筆記與備註事項此練習有幾個要熟悉的要點： 熟悉畫面的位置，包含相對位置與絕對座標 另一是 debounce 這 Function 利用了 setTimeout 與 apply JavaScript 部分window.clearTimeout清除 setTimeout 設定。 Function.prototype.apply()apply() 方法會呼叫一個以 this 的代表值和一個陣列形式的值組(或是一個 array-like object )為參數的函式。資料來源 - MDN CSS 部分參考資料 JavaScript 30 day 作者 Github Wes Bos Js 30 day 中文指南 瓜瓜的 JS 30 我的 JS 30 練習Github]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>JavaScript30</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JS30紀錄 12-Key Sequence Detection]]></title>
    <url>%2F2017%2F12%2F30%2FJavascript30days-12%2F</url>
    <content type="text"><![CDATA[目標此章節也要對照 Console 才能觀看，主要是偵測輸入按鍵，一開始設定一組密碼，例如: wesbos ，當輸入的內容符合到 wesbos 就顯示提示。 Demo | Github 處理步驟步驟 1. 宣告記錄按鍵的變數陣列 pressed 宣告特殊密碼變數 secretCode 步驟 2. 綁定 keyup 事件 利用 push() 將輸入的按鍵記錄到變數 pressed 步驟 3.此步驟為重點處理 判斷 pressed 陣列長度是否超過 secretCode 利用 shift() 判斷符合即可移除首位元素 再利用陣列的 join() 與 includes() 判斷是否為密碼 筆記與備註事項教學說明中使用的 splice() ，不過使用 splice() 需要設定最少一個參數，所以練習的部分就使用 shift() JavaScript 部分Array.prototype.splice()splice() 這方法可刪除或新增一個 Array 的內容。 undefined 資料來源 - MDN Array.prototype.shift()shift() 方法 (method) 會從陣列移除第一個元素 (element)，並回傳該元素。此方法會改變陣列的長度。 undefined 資料來源 - MDN 參考資料 JavaScript 30 day 作者 Github Wes Bos Js 30 day 中文指南 瓜瓜的 JS 30 我的 JS 30 練習Github]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>JavaScript30</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JS30紀錄 11-Custom Video Player]]></title>
    <url>%2F2017%2F12%2F29%2FJavascript30days-11%2F</url>
    <content type="text"><![CDATA[目標自製一個影片播放器可以操控播放速度與音量大小，並隨著 progress bar (進度條) 進行動態調整的播放器 Demo | Github 處理步驟此次處理步驟沒有很複雜，簡單說就是將播放器的各項 DOM ，都建立監聽事件，好進行播放器的操作，唯一比較需要計算的部分，則是進度條 (progress bar) 的部分。要熟悉的是播放器的屬性與方法。 步驟 1. 播放的呈現 取得 HTML 上的各個元素 綁定撥放功能 增加變換播放按鈕圖案功能 添加播放後，進度條的動態顯示 步驟 2. 跳轉按鈕 利用 html 上的 name 與值 觸發狀態的綁定 步驟 3. 進度條的動態切換 建立播放進度條跳轉至指定時間 scrub function 簡單的拉動綁定事件 click 與 mousemove 避免播放器的點擊功能互相影響，建立 mousedown 變數 並在進度條上點擊時觸發 筆記與備註事項HTML 部分videoHTML &lt;video&gt; 元素用於在 HTML 或者 XHTML 文檔中嵌入視頻內容。資料來源 - MDN Media eventsvideo 或是 audio 使用到的事件與方法 Event name Description abort Sent when playback is aborted; for example, if the media is playing and is restarted from the beginning, this event is sent. canplay Sent when enough data is available that the media can be played, at least for a couple of frames. This corresponds to the HAVE_ENOUGH_DATA readyState. canplaythrough Sent when the ready state changes to CAN_PLAY_THROUGH, indicating that the entire media can be played without interruption, assuming the download rate remains at least at the current level. It will also be fired when playback is toggled between paused and playing. Note: Manually setting the currentTime will eventually fire a canplaythrough event in firefox. Other browsers might not fire this event. durationchange The metadata has loaded or changed, indicating a change in duration of the media. This is sent, for example, when the media has loaded enough that the duration is known. emptied The media has become empty; for example, this event is sent if the media has already been loaded (or partially loaded), and the load() method is called to reload it. encrypted The user agent has encountered initialization data in the media data. ended Sent when playback completes. error Sent when an error occurs. The element’s error attribute contains more information. See HTMLMediaElement.error for details. interruptbegin Sent when audio playing on a Firefox OS device is interrupted, either because the app playing the audio is sent to the background, or audio in a higher priority audio channel begins to play. See Using the AudioChannels API for more details. interruptend Sent when previously interrupted audio on a Firefox OS device commences playing again — when the interruption ends. This is when the associated app comes back to the foreground, or when the higher priority audio finished playing. See Using the AudioChannels API for more details. loadeddata The first frame of the media has finished loading. loadedmetadata The media’s metadata has finished loading; all attributes now contain as much useful information as they’re going to. loadstart Sent when loading of the media begins. mozaudioavailable Sent when an audio buffer is provided to the audio layer for processing; the buffer contains raw audio samples that may or may not already have been played by the time you receive the event. pause Sent when playback is paused. play Sent when playback of the media starts after having been paused; that is, when playback is resumed after a prior pause event. playing Sent when the media begins to play (either for the first time, after having been paused, or after ending and then restarting). progress Sent periodically to inform interested parties of progress downloading the media. Information about the current amount of the media that has been downloaded is available in the media element’s buffered attribute. ratechange Sent when the playback speed changes. seeked Sent when a seek operation completes. seeking Sent when a seek operation begins. stalled Sent when the user agent is trying to fetch media data, but data is unexpectedly not forthcoming. suspend Sent when loading of the media is suspended; this may happen either because the download has completed or because it has been paused for any other reason. timeupdate The time indicated by the element’s currentTime attribute has changed. volumechange Sent when the audio volume changes (both when the volume is set and when the muted attribute is changed). waiting Sent when the requested operation (such as playback) is delayed pending the completion of another operation (such as a seek). CSS 部分::-webkit-slider-runnable-track 與 ::-moz-range-track非標準的語法，依照 MDN 上的說明，可能會變換，主要是針對 &lt;input&gt; 中 type=&quot;range&quot; 的類型設定進度調軌跡的背景與邊框樣式 ::-webkit-slider-thumb 與 ::-moz-range-thumbThe ::-webkit-slider-thumb CSS pseudo-element represents the “thumb” that the user can move within the “groove” of an &lt;input&gt; of type=&quot;range&quot; to alter its numerical value.資料來源 - MDN 這兩個的功能相同，簡單說就是移動時候的顯示樣式，主要是在不同瀏覽器的支援。 -moz-appearance (-webkit-appearance, appearance)其實就是變更元素的外觀而已。 參考資料 JavaScript 30 day 作者 Github Wes Bos Js 30 day 中文指南 瓜瓜的 JS 30 我的 JS 30 練習Github]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>JavaScript30</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[web.config 中的 maxJsonLength 設定]]></title>
    <url>%2F2017%2F12%2F28%2FmaxJsonLength%2F</url>
    <content type="text"><![CDATA[主要是傳送某個表單資料時，發生以下錯誤 Error during serialization or deserialization using the JSON JavaScriptSerializer. The length of the string exceeds the value set on the maxJsonLength property.\r\nParameter name: input”,”StackTrace”:” … 加上後端程式已經採用 json.net 解析了，所以想起 config 還沒設定，所以需要設定一下 web.config 123456789&lt;configuration&gt; &lt;system.web.extensions&gt; &lt;scripting&gt; &lt;webServices&gt; &lt;jsonSerialization maxJsonLength="20000"/&gt; &lt;/webServices&gt; &lt;/scripting&gt; &lt;/system.web.extensions&gt;&lt;/configuration&gt; 不設定的話，預設值是 2097152 字元，換算就是 4 MB 參考資料 stackoverflow issue forums.asp.net MSDN maxjsonlength]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>IIS</tag>
        <tag>Troubleshooting</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JS30紀錄 10-Hold Shift and Check Checkboxes]]></title>
    <url>%2F2017%2F12%2F27%2FJavascript30days-10%2F</url>
    <content type="text"><![CDATA[目標類似 Gmail 信箱的 checkbox 多選功能，當選取一個 checkbox 後，按住 shift 不放，在選取另一 checkbox ，此兩個 checkbox 中間的 checkbox 皆會選取。 Demo | Github 處理步驟與範本的方法與步驟可能不太相同，依照個人的方式去解決就好。 步驟 1.取得所有的 checkbox DOM 並綁定 click 事件，建立的 handleCheck function 中可以利用 console 查看一下 e 的物件，為 MouseEvent 123456const checkboxes = document.querySelectorAll('.inbox input[type="checkbox"]');function handleCheck(e) &#123; // e is MouseEvent console.log(e);&#125;Array.from(checkboxes).map(ele =&gt; ele.addEventListener("click", handleCheck)); 步驟 2.開始針對 handleCheck function 撰寫判斷，首先是 shift 鍵按下並選取該 checkbox 時，進行全部的 checkbox DOM 巡覽。這時候調整一下 checkboxes 變數，因為 querySelectorAll 取得的結果不是 Array ，所以先轉換 12345678910111213141516const checkboxes = Array.from( document.querySelectorAll('.inbox input[type="checkbox"]'));function handleCheck(e) &#123; // e is MouseEvent //console.log(e); const self = this; if (e.shiftKey &amp;&amp; e.target.checked) &#123; console.info("this is shift &amp; checked"); checkboxes.map(ele =&gt; &#123; &#125;); &#125;&#125;checkboxes.map(ele =&gt; ele.addEventListener("click", handleCheck)); 步驟 3.在巡覽的過程中，加入判斷式，決定要變更 checkbox 選取狀態的變更。 加入 checkEle 變數紀錄 click 每次觸發後，上次的選取 DOM 判斷 目前觸發元素是否等於巡覽的元素，或是 checkEle 是否等於巡覽的元素，並且 checkEle 不能等於目前觸發元素 加入 isBetween 變數，用來記錄是否符合上述的條件 最後將巡覽的所有元素 checked 都設定為 true 的值 12345678910111213141516171819202122let checkEle = null;function handleCheck(e) &#123; // e is MouseEvent //console.log(e); const self = this; if (e.shiftKey &amp;&amp; e.target.checked) &#123; //console.info("this is shift &amp; checked"); let isBetween = false; checkboxes.map(ele =&gt; &#123; // 避免選取第一個項目就全選 if ((self === ele || checkEle === ele) &amp;&amp; checkEle &amp;&amp; checkEle !== self) &#123; // console.info("slef equal ele"); // console.dir(ele); isBetween = !isBetween; &#125; if (isBetween) ele.checked = true; &#125;); &#125; checkEle = self.checked ? self : null;&#125;checkboxes.map(ele =&gt; ele.addEventListener("click", handleCheck)); 延伸部分此解法，是按照範例的方式去處理；延伸課題是仿照類似 Gmail 的選取方式選取區間，所以需要取得距離目前選取最近的選取框 建立 extenCheck function 找尋索引小於目前選取元素的索引，並且有選取的 checkbox ，取得此索引 找尋索引大於目前選取元素的索引，並且有選取的 checkbox ，取得此索引 判斷前 2 操作都是有取得索引後，直接更新選取狀態 抽取選取狀態 function 12345678910111213141516171819202122232425262728293031323334353637383940414243/** * 延伸部分 * * @param &#123;any&#125; e */function extenCheck(e) &#123; const self = this; if (!e.target.checked) return; // 目前的選取元素 const nowSelIndex = checkboxes.findIndex(ele =&gt; ele === self); if (!e.shiftKey) return; const nearMinCheckboxIndex = checkboxes.findIndex( (ele, index) =&gt; index !== nowSelIndex &amp;&amp; index &lt; nowSelIndex &amp;&amp; ele.checked === true ); const nearMaxCheckboxIndex = checkboxes.findIndex( (ele, index) =&gt; index !== nowSelIndex &amp;&amp; index &gt; nowSelIndex &amp;&amp; ele.checked === true ); if (nearMaxCheckboxIndex !== -1) &#123; setCheckbox(nowSelIndex, nearMaxCheckboxIndex); &#125; if (nearMinCheckboxIndex !== -1) &#123; setCheckbox(nearMinCheckboxIndex, nowSelIndex); &#125;&#125;/** * 設定 checkboxes 為選取 * * @param &#123;any&#125; initIndex 索引初始 * @param &#123;any&#125; aryLength 迴圈長度 */function setCheckbox(initIndex, aryLength) &#123; for (let index = initIndex; index &lt; aryLength; index++) &#123; checkboxes[index].checked = true; &#125;&#125; 參考資料 JavaScript 30 day 作者 Github Wes Bos Js 30 day 中文指南 瓜瓜的 JS 30 我的 JS 30 練習Github]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>JavaScript30</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JS30紀錄 09-Dev Tools Domination]]></title>
    <url>%2F2017%2F12%2F26%2FJavascript30days-9%2F</url>
    <content type="text"><![CDATA[目標開發工具 Console 的運用說明。介紹 log 、 warn 、 error 、 info 、 assert 、 clear 、 dir 、groupCollapsed 、 groupEnd 、 count 、 time 、 timeEnd 等指令運用。 Demo | Github 處理步驟步驟 1.console.log 基本運用，利用 log(string) 裡面輸出字串。進階運用是透過字符的替換 ％s：字串 ％f：浮點數 ％o：物件 ％d：整數 ％c：設定輸出的樣式，在之後的文字將按照第二個參數里的設置進行顯示 12345console.log("I am a string: %s ", "log"); //logconsole.log("I am a float number: %f ", 1.23); //1.23console.log("I am a object: %o ", &#123;name:"allen"&#125;); // &#123;name:"allen"&#125;console.log("I am a int number: %d ", 1); //1console.log("%c other style", "color: #00fdff; font-size: 2em;"); 步驟 2.各式不同的訊息類型 warning 訊息前出現此符號 Error 訊息前出現此符號 Info 單純只有訊息 步驟 3.測試使用的 assert 與清除 console 的方法 clear。使用 chrome 的時候，看一下有沒有設定 Preserve log ，這個選項勾選的話， clear 會無法清除 console 喔 查看 DOM 元素，分別使用基本方式 log() 與 dir() log() 假如是物件的話，會直接輸出物件內容；假如是 DOM 則會輸出 HTML 標籤 dir() 以樹狀結構呈現結果 步驟 4.進行分組、統計計算與時間計算等。分別運用 groupCollapsed 、 count 與 time 筆記與備註事項此篇主題都是 Console 的運用，可以參考 MDN 上的說明來學習。 JavaScript 部分Console.assert()測試使用，當判斷的條件式成立，不會有任何反應，當條件式不成立，則會提供錯訊息，然後訊息顯示自訂的訊息部分 12console.assert(1===1, 'this is wrong'); console.assert(1===2, 'this is wrong'); // Assertion failed: this is wrong Console.count()輸出 count() 被調用的次數。此函數接受一個可選參數 label如果有 label ，此函數輸出為那個指定的 label 和 count()被調用的次數。如果 label 被忽略，此函數輸出 count() 在其所處位置上被調用的次數。 資料來源 - MDN 1234567891011121314151617181920var user = "";function greetEmpty() &#123; console.count();&#125;function greet() &#123; console.count(user); return "hi " + user;&#125;greetEmpty(); // 1greetEmpty(); // 2greetEmpty(); // 3console.count(); // 1user = "bob";greet(); // "bob: 1"user = "alice";greet(); // "alice: 1"greet(); // "alice: 2"console.count("alice"); // "alice: 3" Console.dir()在控制台中顯示指定JavaScript對象的屬性，並通過類似文件樹樣式的交互列表顯示。資料來源 - MDN groupCollapsed() 與 groupEnd()console .group Collapsed在Web控制台上創建一個新的分組.隨後輸出到控制台上的內容都會被添加一個縮進,表示該內容屬於當前分組,直到調用 console.groupEnd() 之後,當前分組結束。和 console.group() 方法的不同點是,新建的分組默認是折疊的。用戶必須點擊一個按鈕才能將折疊的內容打開.資料來源 - MDN 說明上這兩個方法都是無參數，但是範例中，是可以輸入參數的，輸入的參數則是顯示的分組標題文字。 123456789const dogs = [&#123; name: "Snickers", age: 2 &#125;, &#123; name: "hugo", age: 8 &#125;];dogs.forEach(dog =&gt; &#123; // 此是分組標題 console.groupCollapsed(`$&#123;dog.name&#125;`); console.log(`This is $&#123;dog.name&#125;`); console.log(`$&#123;dog.name&#125; is $&#123;dog.age&#125; years old`); console.log(`$&#123;dog.name&#125; is $&#123;dog.age * 7&#125; dog years old`); console.groupEnd();&#125;); time() 與 timeEnd()console.time你可以啟動一個計時器（timer）來跟踪某一個操作的佔用時長。每一個計時器必須擁有唯一的名字，頁面中最多能同時運行 10,000 個計時器。當以此計時器名字為參數調用 console.timeEnd() 時，瀏覽器將以毫秒為單位，輸出對應計時器所經過的時間.資料來源 - MDN 計算出來的時間以毫秒顯示 參考資料 JavaScript 30 day 作者 Github Wes Bos Js 30 day 中文指南 瓜瓜的 JS 30 我的 JS 30 練習Github]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>JavaScript30</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JS30紀錄 08-Fun With HTML5 Canvas]]></title>
    <url>%2F2017%2F12%2F25%2FJavascript30days-8%2F</url>
    <content type="text"><![CDATA[目標利用 Canvas 製作一個滿版的畫布，並讓畫筆隨著移動變動粗細與顏色。 Demo | Github 處理步驟步驟 1.取得 canvas DOM ，並將該 DOM 設定為 window 的大小，與畫筆的初始樣式設定。 取得 canvas 的 context 設定 strokeStyle 畫筆顏色 設定線條連結樣式 lineJoin 設定線條兩端端點樣式 lineCap 設定線條寬度 lineWidth 步驟 2. 設定滑鼠 mousedown 時，取得目前滑鼠位置為繪製起始點 設定滑鼠 mousemove 時，設定繪製路徑 設定滑鼠 mouseup 時，才開始繪製 步驟 3.修正上一步驟的繪製過程，讓線條在滑鼠移動時也跟著繪製，因此建立 isDrawing flag 標註現在是否繪製，另外建立標註現在起始點的變數。 添加 isDrawing 變數，標註現在是否繪製 添加 startPoint 變數，設定起始 步驟 4.增加畫筆變色與樣式變換 修正 startPoint 變數為 X,Y 分開變數 增加 hue 與 direction 變數 利用 hue 變換畫筆顏色 利用 direction 變化畫筆粗細 增加 mouseout 事件，當滑鼠移出畫布時，此次作畫結束 筆記與備註事項JavaScript 部分Canvas 教學文件Canvas 有許多地方可以深入探討，因應此篇課題，就不多談，不過 MDN 提供了不錯的教學文件，因此這邊特地列上來。 &lt;canvas&gt; 是一個 HTML 元素，我們可以利用程式腳本在這個元素上繪圖（通常是用 JavaScript）。除了繪圖，我們還可以合成圖片或做一些簡單（或是不那麼簡單）的動畫。資料來源 - MDN Canvas API&lt;canvas&gt; 是 HTML5 的新元素，可透過 Script（通常是 JavaScript）繪製圖形。例如，可以用來繪圖、合成圖照片、建立動畫、甚至處理即時的影片播放。資料來源 - MDN CanvasRenderingContext2D.beginPath()是 Canvas 2D API 通過清空子路徑列表開始一個新路徑的方法。當你想創建一個新的路徑時，調用此方法。資料來源 - MDN 畫線段時，使用此方法，表示以下開始繪製新的線段。 OffscreenCanvas.getContext()取得 canvas 的畫布內容，必須指定內容類型，有 2d 、 webgl 、 webgl2 、 bitmaprenderer 幾種。 CanvasRenderingContext2D.strokeStyleCanvasRenderingContext2D.strokeStyle 是 Canvas 2D API 描述畫筆（繪製圖形）顏色或者樣式的屬性。默認值是 #000(black)。資料來源 - MDN 就是畫筆顏色。 CanvasRenderingContext2D.lineJoinCanvasRenderingContext2D.lineJoin 是 Canvas 2D API 用來設置 2 個長度不為 0 的相連部分（線段，圓弧，曲線）如何連接在一起的屬性（長度為 0 的變形部分，其指定的末端和控制點在同一位置，會被忽略）。資料來源 - MDN 線條與線條的連接樣式。 CanvasRenderingContext2D.lineCapCanvasRenderingContext2D.lineCap 是 Canvas 2D API 指定如何繪製每一條線段末端的屬性。有 3 個可能的值，分別是：butt, round 與 square。默認值是 butt。資料來源 - MDN 簡而言之，就是設定線條兩端端點的樣式。 CanvasRenderingContext2D.lineWidthCanvasRenderingContext2D.lineWidth 為 Canvas 2D API 設定線段粗細的屬性。可藉此屬性取得目前的線段粗細值（預設為 1.0）。設定此屬性時，零、負數、Infinity 以及 NaN 都會被忽略，而其他正確的值將會被設定成屬性值。資料來源 - MDN CanvasRenderingContext2D.moveTo()繪製路徑的設定，由畫筆落點移動到 (x,y) 座標。可以用來設定起始點之類。 CanvasRenderingContext2D.lineTo()CanvasRenderingContext2D.lineTo() 是Canvas 2D API 使用直線連接子路徑的終點到x，y坐標的方法（並不會真正地繪製）。資料來源 - MDN CanvasRenderingContext2D.stroke()CanvasRenderingContext2D.stroke() 是Canvas 2D API 使用非零環繞規則，根據當前的畫線樣式，繪製當前或已經存在的路徑的方法。資料來源 - MDN 就是開始繪製，將設定的路徑繪製出來。 CSS 部分hsl()在 CSS3 中新增了 HSL 及 HSLA 等兩種跟顏色有關的屬性。其中 H 為 hue(色相)、S 為 saturation(飽合度)、L 為 lightness(亮度)。HSLA 就跟 RGBA 一樣，都是在原本的屬性中多加入了不透明度的設定而已。 hue hue 為整數的角度值，基本上是從 0 到 360 之間，因為它是經過一個簡單的計算來處理所輸入的值 0 或 360 表示紅色；60 表示黃色；120 表示綠色；240 表示藍色。 saturationsaturation 的表示方式為百分比(%)；100% 就是最大飽合度，而 0% 則為灰色調。 lightnesslightness 的表示方式也一樣是百分比(%)；以 50% 為正常亮度為分界，百分比越高則會越接近白色(100%)，而百分比越低則會越接近黑色(0%) 參考資料 JavaScript 30 day 作者 Github Wes Bos Js 30 day 中文指南 瓜瓜的 JS 30 我的 JS 30 練習Github]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>JavaScript30</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JS30紀錄 07-Array Cardio]]></title>
    <url>%2F2017%2F12%2F21%2FJavascript30days-7%2F</url>
    <content type="text"><![CDATA[目標練習陣列操作，主要熟練 some、 every、 find、 findIndex、 slice 這幾個陣列操作語法，需要直接搭配 console 來觀看。 Demo | Github 處理步驟步驟 1.操作 people 陣列，利用 some 與 every 檢查是否符合大於等於 19 歲的元素。 步驟 2.操作 comment 陣列, find 類似 filter ，只是 find 只會回傳一個找尋到的元素。而 findIndex 會回傳找到元素的索引。 步驟 3.針對 comment 刪除指定元素，因為此次指定使用 slice ，不然可以採用 splice 更好處理。 建立一個新陣列 利用 slice 取出陣列 利用 ... 語法糖連結陣列 筆記與備註事項JavaScript 部分Array.prototype.some()The some() method tests whether at least one element in the array passes the test implemented by the provided function. 資料來源MDN 用來判斷是否有元素符合所設定的條件 只會回傳 true 或 false 12[2, 5, 8, 1, 4].some(x =&gt; x &gt; 10); // false[12, 5, 8, 1, 4].some(x =&gt; x &gt; 10); // true Array.prototype.every() every() 方法會使用傳入的回呼函示來測試所有在陣列中的元素資料來源 - MDN 陣列中的所有元素，都必須符合設定的條件 全部符合條件回傳 true ，只要有一元素不符合就回傳 false 12[12, 5, 8, 130, 44].every(x =&gt; x &gt;= 10); // false[12, 54, 18, 130, 44].every(x =&gt; x &gt;= 10); // true Array.prototype.find()find() 方法，如果一個在陣列中的元素滿足提供的測試函數，則返回一個在陣列中的值。否則回傳 undefined 資料來源MDN Array.prototype.findIndex()findIndex() 方法將依據提供的測試函式，尋找陣列中符合的元素，並返回其 index （鍵值）。如果沒有符合的對象，將返回 -1 。 資料來源MDN Array.prototype.slice()The slice() method returns a shallow copy of a portion of an array into a new array object selected from begin to end (end not included). The original array will not be modified. Syntax arr.slice([begin[, end]]) undefined 資料來源MDN 取得陣列中指定區段的元素，將回傳新的陣列 語法中 begin 與 end 參數表示陣列元素的索引，都是從 0 開始 回傳的陣列，會依照 end 參數的前一位，也就是 end 參數指定的元素是不會回傳的 參考資料 JavaScript 30 day 作者 Github Wes Bos Js 30 day 中文指南 瓜瓜的 JS 30 我的 JS 30 練習Github]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>JavaScript30</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Axios 在 IE11 的調整]]></title>
    <url>%2F2017%2F12%2F20%2Faxios-in-IE11%2F</url>
    <content type="text"><![CDATA[近來都是使用 axios 來操作 XMLHttpRequests ，axios 操作 Promise 相當便利，只是最近有個需求說需要相容至 IE11，按照官方上的說明，相容性相當高 但是按照官方提供的 cdn 使用後，發現在 IE11 出現了以下錯誤 1'Promise' is undefined. 查看 Github Issue 中的資料，找到一則討論，說明了要使用 promise 可以引用 es6-promise 使用方式很簡易，只要在原本引用 axios 的 CDN 之前，引用 es6-promise 即可，如以下： 123&lt;script src="https://cdn.jsdelivr.net/npm/es6-promise@4/dist/es6-promise.min.js"&gt;&lt;/script&gt;&lt;script src="https://cdn.jsdelivr.net/npm/es6-promise@4/dist/es6-promise.auto.min.js"&gt;&lt;/script&gt;&lt;script src="https://unpkg.com/axios/dist/axios.min.js"&gt;&lt;/script&gt; 參考資料 Upgrade Guide Github Issue 討論]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>IE</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JS30紀錄 06-Type Ahead]]></title>
    <url>%2F2017%2F12%2F19%2FJavascript30days-6%2F</url>
    <content type="text"><![CDATA[目標 製作一個關鍵字建議提示訊息的功能 Demo | Github 處理步驟步驟 1 使用 Fetch 取得 json 將 json 資料存入 cities Array 步驟 2. 建立 function displayMatches 關鍵字輸入框綁定 change 與 keyup 事件 步驟 3. function displayMatches 中，透過 filter 篩選 cities 然後在其中利用 RegExp 來尋找 city 與 state 的屬性中含有關鍵字的資料 步驟 4. 將上一步驟篩選結束的陣列進行 map 尋覽，利用文字範本組合 html 內容 map 後的結果使用 join 來結合 放入 .suggestions 建議資料列表中 步驟 5.將關鍵字強調顯示，並將數字使用逗號分隔；修改上一步驟中文字範本的組合 html 內容。 利用 RegExp 與 replace 來針對關鍵字強調 同上述的方式，針對 population 數字進行格式化 筆記與備註事項JavaScript 部分Fetch APIFetch API 提供了一個獲取資源的介面（包括跨域）。任何使用過 XMLHttpRequest 的人都能輕鬆上手，但新的 API 提供了更強大和靈活的功能集。 資料來源MDN Using Fetch資料來源MDN RegExpRegExp 建構函數創建了一個正則表達式物件，用於將文本與一個模式匹配。有關正則表達式的介紹，請閱讀 JavaScript 指南中的[正則表達式章節][4] 資料來源MDN Regular Expressions正規表達式是被用來匹配字串中字元組合的模式。在 JavaScript 中，正規表達式也是物件，這些模式在 [RegExp][3] 的 [exec][5] 和 [test][6] 方法中，以及 String 的 [match][7]、[replace][8]、[search][9]、[split][10] 等方法中被運用。這一章節將解說 JavaScript 中的正規表達式。 資料來源MDN 1234// 使用 RegExp 常數，包含兩個 / 字元之間的模式如下：var re = /ab+c/;// 呼叫 RegExp 物件的建構子函數如下：var re = new RegExp("ab+c"); String.prototype.match()當一個字符串與一個正則表達式匹配時， match()方法檢索匹配項。 資料來源MDN String.prototype.replace()replace() 方法會傳回一個新字串，此新字串是透過將原字串與 pattern 比對，以 replacement 取代吻合處而生成。pattern 可以是字串或 RegExp，而 replacement 可以是字串或函式（會在每一次匹配時被呼叫）。 資料來源MDN Body.json()The json() method of the Body mixin takes a Response stream and reads it to completion. It returns a promise that resolves with the result of parsing the body text as JSON. 資料來源MDN CSS 部分outlineCSS的outline屬性是用來設置一個或多個單獨的輪廓屬性的簡寫屬性 ，例如 outline-style, outline-width 和 outline-color。多數情況下，簡寫屬性更加可取和便捷。 輪廓與邊框在以下幾個方面存在不同： 輪廓不佔據空間，它們被描繪於內容之上 輪廓可以是非矩形的。在 Gecko / Firefox 中，輪廓是矩形的，但是 Opera 則會圍繞元素結構繪製非矩形的形狀 資料來源MDN outline 不佔據空間，它們被描繪於內容之上 list-style列表的樣式設定。 CSS list-style 屬性是設置 list-style-type, list-style-image 和 list-style-position 的簡寫屬性。 資料來源MDN 參考資料 JavaScript 30 day 作者 Github Wes Bos Js 30 day 中文指南 瓜瓜的 JS 30 我的 JS 30 練習Github]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>JavaScript30</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JS30紀錄 05-Flex Panel Gallery]]></title>
    <url>%2F2017%2F12%2F18%2FJavascript30days-5%2F</url>
    <content type="text"><![CDATA[目標運用 flex 製作一個動畫展開圖片的效果 Demo | Github 處理步驟一開始的範本頁面如下 步驟 1 先調整 panels 的 css ，將 display 設定為 flex 配置，此 panels 即為 Flex container 設定 panel 的 flex ，將 flex 設定為 1 ，設定一個數字為 flex-grow ，此為容器中空間的指定占比 步驟 2上一步驟將各個 panel 當作 Flex item ，這一步驟中，將設定巢狀 Flexible box ，並讓元素顯示置中 將 panel 的 display 設定 flex ，讓 panel 當作新的 Flex container ，將 panel 裡面的文字項目元素變成新的 Flex item 設定 .panel &gt; * 此 Flex item 的 flex 為 flex: 1 0 auto; 設定 justify-content: center; 將文字重新置中 設定 flex-direction: column; 讓文字排列按照 column 調整 在 .panel &gt; * 設定 display 為 flex ，並加上 justify-content: center; 與 flex-direction: column; ，此設定是為了文字調整置中 步驟 3 先調整 .panel.open 的樣式，添加 flex 的占比調整 針對文字 tag 的部分，設定 :first-child 與 :last-child 的樣式特效隱藏 加入選取特效 css .panel.open-active 步驟 4此部分開始 JS 撰寫 取得所有 .panel DOM 建立 toggleOpen function ，並將上述的 DOM 綁定 click 事件 建立 toggleActive function ，並將上述的 DOM 綁定 transitionend 事件 筆記與備註事項JavaScript 部分DOMTokenListDOMTokenList 介面表示了一個以空格作為分隔的內容集，通常來自 Element.classList、HTMLLinkElement.relList、HTMLAnchorElement.relList 或 HTMLAreaElement.relList 等屬性。本介面與 Array 同樣是由 0 開始索引，且 DOMTokenList 是區分大小寫的。 資料來源MDN DOMTokenList.toggle()The toggle() method of the DOMTokenList interface removes a given token from the list and returns false. If token doesn’t exist it’s added and the function returns true. 資料來源MDN CSS 部分flexCSS 屬性 flex 規定了彈性元素如何伸長或縮短以適應 flex 容器中的可用空間。這是一個簡寫屬性，可以同時設置 flex-grow , flex-shrink 與 flex-basis 資料來源MDN 1234567891011121314151617181920212223242526/* Basic values */flex: auto;flex: initial;flex: none;flex: 2;/* One value, unitless number: flex-grow */flex: 2;/* One value, width/height: flex-basis */flex: 10em;flex: 30px;/* Two values: flex-grow | flex-basis */flex: 1 30px;/* Two values: flex-grow | flex-shrink */flex: 2 2;/* Three values: flex-grow | flex-shrink | flex-basis */flex: 2 2 10%;/* Global values */flex: inherit;flex: initial;flex: unset; Using CSS Flexible BoxesCSS3 彈性盒子，又稱 flexbox ，是為了適應不同螢幕尺寸和顯示設備而生的佈局模式。針對許多應用而言，不用 floats 的彈性盒子模型會比塊狀模型（block model）易用，彈性容器的邊緣也不會與內容的邊緣重疊。 多數設計師會發現 flexbox 用起來比 box 簡單得多。像是不多注意 div 的話，它就會經常違反設計師意願地，跑到頁頂去──令 footer 附著在頁底，也因此變得很棘手。flexbox 的寬高能改變以適應顯示空間，將較低的元件固定住。Flexbox 邏輯也能讓你確實令 div 壓在頁面的右方或底部。Flexbox 元素的顯示順序，與原始碼的顯示順序相互獨立。 一些時髦的佈局，也能因而透過更簡潔的程式碼完成。這種有意的獨立性只影響視覺渲染，基於 HTML 原始碼的語意順序及瀏覽不會受到影響。 彈性盒子的概念EditFlex 排版的大致定義，是能更改該項目的長與（或）高，以便貼合任何顯示設備的空間。Flex container 能針對該元件擴張以便填補可用的空間、或收縮以便阻止空間溢出。 塊狀佈局（Block layout）以垂直方向為準、行內佈局（Inline layout）以水平方向為準、而彈性佈局（Flexbox layout）則同時允許這兩種。塊狀佈局雖適於頁面顯示，但在程式元件（application component）需要在用戶代理（user agent）變更、手機從垂直方向翻轉到水平方向……等變更定位、大小、拉伸、收縮的情形下，這種佈局就很難用了。彈性盒子佈局長於小規模佈局、而剛剛流行的格線佈局（Grid layout）則長於大規模佈局。二者皆為 CSS 工作小組為在不同用戶代理、書寫模式、和其他要求下的 Web 應用程式，提供良好互通性的一部分。 彈性盒子的字彙在彈性盒子的世界，我們不會稱水平（inline）或垂直（block），而是主軸（main axis）與切軸（cross axis）。如果 flex-direction 是 column，主軸就會充當垂直、而切軸則充當水平。請參考下面的圖，它展示了一個彈性容器，裡面的 row 有 flex-direction，意味著該彈性項目會基於主軸，作水平排列。 資料來源MDN flex-directionCSS flex-direction 屬性指定了內部元素是如何在flex容器中佈局的，定義了主軸的方向(正方向或反方向)。 資料來源MDN 12345678910111213141516/* The direction text is laid out in a line */flex-direction: row;/* Like &lt;row&gt;, but reversed */flex-direction: row-reverse;/* The direction in which lines of text are stacked */flex-direction: column;/* Like &lt;column&gt;, but reversed */flex-direction: column-reverse;/* Global values */flex-direction: inherit;flex-direction: initial;flex-direction: unset; ::before (:before)::before 會為當前元素創建一個子元素作為偽元素。常通過 content 屬性來為一個元素添加修飾性的內容。此元素默認為行內元素。 資料來源MDN 12345678/* CSS3語法*/element::before &#123; 樣式 &#125;/* （單冒號）CSS2過時語法(僅用來支持IE8) */element:before &#123; 樣式 &#125;/*在每一個p元素前插入內容*/p ::before &#123; content: "Hello world!"; &#125; ::after (:after)CSS 偽元素 ::after 用來創建一個偽元素，做為已選中元素的最後一個子元素。通常會配合 content 屬性來為該元素添加裝飾內容。這個虛擬元素默認是行內元素。 資料來源MDN 123element:after &#123; style properties &#125; /* CSS2 syntax */element::after &#123; style properties &#125; /* CSS3 syntax */ justify-contentCSS justify-content 屬性定義了瀏覽器如何分配順著父容器主軸的彈性元素之間及其周圍的空間 資料來源MDN 1234567891011121314151617181920212223242526272829303132/* Positional alignment */justify-content: center; /*居中排列*/justify-content: start; /* Pack items from the start */justify-content: end; /* Pack items from the end */justify-content: flex-start; /*從行首起始位置開始排列*/justify-content: flex-end; /*從行尾位置開始排列*/justify-content: left; /* Pack items from the left */justify-content: right; /* Pack items from the right *//* Baseline alignment */justify-content: baseline;justify-content: first baseline;justify-content : last baseline;/* Distributed alignment *//*均勻排列每個元素首個元素放置於起點，末尾元素放置於終點*/justify-content: space-between;/*均勻排列每個元素每個元素周圍分配相同的空間*/justify-content: space-around;/*均勻排列每個元素每個元素之間的間隔相等*/justify-content: space-evenly;/* Distribute items evenly Stretch 'auto'-sized items to fit容器 */justify-content: stretch;/* Overflow alignment */justify-content: safe center;justify-content: unsafe center;/* Global values */justify-content：inherit;justify-content：initial;justify-content：unset; translateY()translateY() 函數表示在頁面垂直移動元素.這個 transformation 具有特徵的就是通過 &lt;length&gt; 定義了元素垂直移動了多少translateY(ty) 是 translate(0, ty) 的一種簡寫方式 資料來源MDN 1234.transformed &#123; transform: translateY(10px); background-color: blue;&#125; 參考資料 JavaScript 30 day 作者 Github Wes Bos Js 30 day 中文指南 瓜瓜的 JS 30 我的 JS 30 練習Github]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>JavaScript30</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JS30紀錄 04-Array Cardio]]></title>
    <url>%2F2017%2F12%2F15%2FJavascript30days-4%2F</url>
    <content type="text"><![CDATA[目標練習 JavaScript 的 Array.prototype.filter() 、 Array.prototype.map() 、 Array.prototype.sort() 、 Array.prototype.reduce() ，透過 console 介面比較前後結果。 Demo | Github 筆記與備註事項JavaScript 部分Console.table()將數據以表格的形式顯示 這個方法接收一個強制的參數，它必須是一個數組或者是一個對象，還可以接受一個額外的參數描述表格的列數。 它把數據以table的形式打印出來， 在數組中的每一個元素（或對像中可枚舉的屬性）將會以行的形式顯示在table中。 table的第一列是index。如果數據是一個數組，那麼值就是索引。如果數據是一個對象，那麼它的值就是屬性名稱。注意（在FireFox中）console.table 被限制了不能顯示超過1000行（第一行用來標記索引）。 資料來源MDN 1console.table(["apples", "oranges", "bananas"]); Array.prototype.filter()filter() 方法會建立一個經指定之函式運算後，由原陣列中通過該函式檢驗之元素所構成的新陣列。 語法 var newArray = arr.filter(callback[, thisArg]) 參數callback此函式為一個斷言，用於測試陣列中的每個元素。回傳值為 true 時將當前的元素保留至新陣列中，若為 false 則不保留。可傳入三個參數： element原陣列目前所迭代處理中的元素。 index原陣列目前所迭代處理中的元素之索引。 array呼叫 filter 方法的陣列。 thisArg 選擇性執行 callback 回呼函式的 this 值。 回傳值一個元素為通過回呼函式檢驗的新陣列。 資料來源MDN 12345var words = ["spray", "limit", "elite", "exuberant", "destruction", "present"];var longWords = words.filter(word =&gt; word.length &gt; 6);// Filtered array longWords is ["exuberant", "destruction", "present"] Array.prototype.map()map() 方法會建立一個新的陣列，其內容為原陣列的每一個元素經由回呼函式運算後所回傳的結果之集合。 資料來源MDN 1234567891011var numbers = [1, 5, 10, 15];var doubles = numbers.map(function(x) &#123; return x * 2;&#125;);// doubles is now [2, 10, 20, 30]// numbers is still [1, 5, 10, 15]var numbers = [1, 4, 9];var roots = numbers.map(Math.sqrt);// roots is now [1, 2, 3]// numbers is still [1, 4, 9] Array.prototype.sort()sort() 方法將陣列中的元素排列至其應當的位置上並返回此陣列。排列不必是穩定的。預設的排列順序根據Unicode字串碼位來排序。 語法 arr.sort([compareFunction]) 參數compareFunction可選。指定一函數來定義排序順序。若省略，陣列將根據各個字元的Unicode碼位值排列，或根據每個元素轉換為字串。 如果 compareFunction 被應用, 陣列元素們將根據比較函數之回傳值來排序。如果 a 和 b 為被比較之兩元素, 則: 若 compareFunction(a, b) 小於 0, 將 a 排在比 b index還小處, i.e. a 排在第一個. 若 compareFunction(a, b) 回傳 0, a 與 b 互相不會改變順序, 但會與全部其他元素比較排列。註計: ECMAscript標準不保證能使用此行為, 因此不是所有瀏覽器 (e.g. Mozilla版本至少2003) 遵守此行為. 若 compareFunction(a, b) 大於 0, 將 b 排在比 a index還小處. compareFunction(a, b) 在給特定元素 a 及 b 為此函數之兩參數時必須每次都回傳相同之值。若回傳值不一致，排序順序則為undefined。 資料來源MDN 1234567891011121314151617181920212223242526var scores = [1, 2, 10, 21]; scores.sort(); // [1, 10, 2, 21]var things = ['word', 'Word', '1 Word', '2 Words'];things.sort(); // ['1 Word', '2 Words', 'Word', 'word']// 在Unicode中, 數字在大寫字母前,// 大寫字母在小寫字母前var items = [ &#123; name: 'Edward', value: 21 &#125;, &#123; name: 'Sharpe', value: 37 &#125;, &#123; name: 'And', value: 45 &#125;, &#123; name: 'The', value: -12 &#125;, &#123; name: 'Magnetic' &#125;, &#123; name: 'Zeros', value: 37 &#125;];items.sort(function (a, b) &#123; if (a.name &gt; b.name) &#123; return 1; &#125; if (a.name &lt; b.name) &#123; return -1; &#125; // a must be equal to b return 0;&#125;); Array.prototype.reduce()reduce() 方法將一個累加器及陣列中每項元素（由左至右）傳入回呼函式，將陣列簡化為單一值。 資料來源MDN 12345678910const array1 = [1, 2, 3, 4];const reducer = (accumulator, currentValue) =&gt; accumulator + currentValue;// 1 + 2 + 3 + 4console.log(array1.reduce(reducer));// expected output: 10// 5 + 1 + 2 + 3 + 4console.log(array1.reduce(reducer, 5));// expected output: 15 延伸部分這次的 JS 部分，大步以前都練習過，以前還寫過一篇 reduce 的使用，有興趣的可以參考看看。 參考資料 JavaScript 30 day 作者 Github Wes Bos Js 30 day 中文指南 瓜瓜的 JS 30 我的 JS 30 練習Github]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>JavaScript30</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JS30紀錄 03-Scoped CSS Variables and JS]]></title>
    <url>%2F2017%2F12%2F13%2FJavascript30days-3%2F</url>
    <content type="text"><![CDATA[目標利用 CSS 變數製作濾鏡。 Demo | Github 處理步驟步驟 1. 綁定 input 變更事件 取得所有 input 建立設定樣式 function handleUpdate 透過 arrow function 綁定 change 事件 步驟 2. 設定 css 設定 css 變數 設定圖片參照 css 變數 筆記與備註事項主要重點在於 css 變數的運用。 JavaScript 部分箭頭函數 (Arrow Function)箭頭函數表示式 (Arrow function expression，也是所謂的 fat arrow function) 比起一般的函數表示式擁有更短的語法以及詞彙上綁定 this 變數，所有的箭頭函數都是無名函數 (anonymous function). 資料來源MDN 12345678910(param1, param2, …, paramN) =&gt; &#123; statements &#125; (param1, param2, …, paramN) =&gt; expression // 等於 : =&gt; &#123; return expression; &#125; // 只有一個參數時,括號才能不加:(singleParam) =&gt; &#123; statements &#125;singleParam =&gt; &#123; statements &#125;//若無參數,就一定要加括號:() =&gt; &#123; statements &#125; HTMLElement.datasetHTMLElement.dataset屬性允許無論是在讀取模式和寫入模式下訪問在HTML或DOM中的元素上設置的所有自定義數據屬性 ( data-* )集。自定義的data屬性名稱轉化成 DOMStringMap 的鍵值時會遵循下面的規則： 前綴 data- 被去除(包括減號)； 對於每個在ASCII小寫字母的減號( )，減號會被去除，並且字母會轉變成對應的大寫字母。 a到 z前面U+002D 其他字符（包含其他減號）都不發生變化 資料來源MDN CSSStyleDeclaration.setProperty()資料來源MDN Template literals模板字面量/Template literals 是允許嵌入表達式的字符串字面量。你可以使用多行字符串和字符串插值功能。它們在ES2015規範的先前版本中被稱為“模板字符串/template strings”。 資料來源MDN 12345678`string text``string text line 1 string text line 2``string text $&#123;expression&#125; string text`tag `string text $&#123;expression&#125; string text` CSS 部分:root 宣告全域變數時，很好用。 表示 html 的屬性 :root這個CSS 偽類匹配文檔樹的根元素。對於HTML來說，:root表示&lt;html&gt;元素，除了優先級更高之外，與html選擇器相同 資料來源MDN 1234:root &#123; --main-color: hotpink; --pane-padding: 5px 42px;&#125; CSS variablesCSS變量是由CSS作者定義的實體，其中包含要在整個文檔中重複使用的特定值。使用自定義屬性來設置變量名，並使用特定的var()來訪問。（比如color: var(–main-color) ;）。 資料來源MDN 1234567891011121314151617/* 宣告區域變數 */element &#123; --main-bg-color: brown;&#125;/* 使用區域變數 */element &#123; background-color: var(--main-bg-color);&#125;/* 宣告全域變數 */root &#123; --global-color: #666; --pane-padding: 5px 42px;&#125;/* 使用全域變數 */.demo&#123; color: var(--global-color);&#125; var()ar() 函數可以代替元素中任何屬性中的值的任何部分。var()方法不能作為屬性名、選擇器或者其他除了屬性值之外的值。（這樣做通常會產生無效的語法或者一個沒有關聯到變量的值。） 資料來源MDN 1234567:root &#123; --main-bg-color: pink;&#125;body &#123; background-color: var(--main-bg-color);&#125; Custome propertities (--*)帶有前綴–的屬性名，比如–example–name，表示的是帶有值的自定義屬性，其可以通過var 函數在全文檔範圍內復用的。 資料來源MDN 123--somekeyword: left;--somecolor: #0000ff;--somecomplexvalue: 3px 6px rgb(20, 32, 54); filterCSS濾鏡（filter）屬提供的圖形特效，像模糊，銳化或元素變色。過濾器通常被用於調整圖片，背景和邊界的渲染。 CSS標準裡包含了一些已實現預定義效果的函數。你也可以參考一個SVG 濾鏡，通過一個URL鏈接到SVG 濾鏡元素 ( SVG filter element )。 資料來源MDN 12345678910111213141516171819filter: url("filters.svg#filter-id");filter: blur(5px);filter: brightness(0.4);filter: contrast(200%);filter: drop-shadow(16px 16px 20px blue);filter: grayscale(50%);filter: hue-rotate(90deg);filter: invert(75%);filter: opacity(25%);filter: saturate(30%);filter: sepia(60%);/* Apply multiple filters */filter: contrast(175%) brightness(3%);/* Global values */filter: inherit;filter: initial;filter: unset; 參考資料 JavaScript 30 day 作者 Github Wes Bos Js 30 day 中文指南 瓜瓜的 JS 30 我的 JS 30 練習Github]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>JavaScript30</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[web.config 的 httpCookies]]></title>
    <url>%2F2017%2F12%2F12%2Fwebconfig-httpCookies%2F</url>
    <content type="text"><![CDATA[123&lt;httpCookies domain="String" httpOnlyCookies="true|false" requireSSL="true|false" /&gt; httpOnlyCookies 屬性是 Cookie 只供瀏覽器與 WebServer 之間溝通使用，不允許 JavaScript 存取 Cookie (document.cookie)。 requireSSL 屬性需要使用 SSL 才能傳送 cookie 資料。 以上情境在測試時，因為不一定使用 SSL ，所以可能會發生頁面錯誤等情形，可以利用多重組態來切換；另外由於 Identity 也是利用 cookies 來操作，所以當測試機不使用 SSL 時，記得將 requireSSL 設定為 false 參考資料 MSDN]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>Asp.net</tag>
        <tag>IIS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JS30紀錄 02-JS + CSS Clock]]></title>
    <url>%2F2017%2F12%2F09%2FJavascript30days-2%2F</url>
    <content type="text"><![CDATA[使用 JS 和 CSS 建立時鐘 Demo | Github 處理步驟步驟 1. 建立 HTML class clock 是圓時鐘容器 class clock-face 是時鐘容納時針、分針、秒針的鐘面 建立三個 div 各自代表時針、分針、秒針 步驟 2. 調整時針、分針、秒針的 css 設定三針旋轉的中心 transform-origin 透過 transform 調整三針的位置， rotate(90deg); ，因為一開始是水平線，所以需要調整到 12 點鐘方向要加上 90 度 設定三針走動的晃動特效 transition 步驟 3. 設定時間 建立 setDate function 透過 setInterval 每秒鐘執行 setDate 學習事項時鐘的 JS 並無太多的運用，僅需要簡單的角度計算，所以這次學到的大都是 CSS 部分。 CSS 部分transform-origintransform 的起始點，一般來說變形的起始點都在物件的中心點，但如果需要像時鐘的分秒針一樣，中心點並不在物件的中心，就需要靠 transform-origin 去設定物件變形的起始點。 基準點是從左上開始，從水平開始往右稱為 x 軸，垂直往下稱為 y 軸， CSS 在編寫習慣上也是先寫 x 軸 再寫 y 軸，如 50px 100px 資料來源wcc723.github.io/css/2013/10/10/css-transform-origin 123456789101112div&#123;transform-origin:20% 40%;-ms-transform-origin:20% 40%; /* IE 9 */-webkit-transform-origin:20% 40%; /* Safari 和 Chrome */-moz-transform-origin:20% 40%; /* Firefox */-o-transform-origin:20% 40%; /* Opera */&#125; transform: rotate變形的旋轉屬性。 123.rotated &#123; transform: rotate(45deg); /* Equal to rotateZ(45deg) */&#125; transitiontransition 屬性是一個簡寫屬性，用於設置四個過渡屬性 transition-property 設置過渡效果的 CSS 屬性的名稱 transition-duration 定義動畫效果所花費的時間 transition-timing-function 設定動畫效果時所依據的貝茲曲線 transition-delay 定義多久之後開始發生動畫效果 transition-timing-function123456789101112131415161718192021/* Keyword values */transition-timing-function: ease;transition-timing-function: ease-in;transition-timing-function: ease-out;transition-timing-function: ease-in-out;transition-timing-function: linear;transition-timing-function: step-start;transition-timing-function: step-end;/* Function values */transition-timing-function: steps(4, end);transition-timing-function: cubic-bezier(0.1, 0.7, 1.0, 0.1);transition-timing-function: frames(10);/* Multiple timing functions */transition-timing-function: ease, step-start, cubic-bezier(0.1, 0.7, 1.0, 0.1);/* Global values */transition-timing-function: inherit;transition-timing-function: initial;transition-timing-function: unset; 延伸部分 時分秒針，長度凸顯； 添加數字 利用 CSS 調整，簡單使用 width 完成長度。數字的部分，可以直接在 clock 放上背景圖片來快速處理。 參考資料 JavaScript 30 day 作者 Github Wes Bos Js 30 day 中文指南 瓜瓜的 JS 30 我的 JS 30 練習Github]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>JavaScript30</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JS30紀錄 01-JavaScript Drum Kit]]></title>
    <url>%2F2017%2F12%2F08%2FJavascript30days-1%2F</url>
    <content type="text"><![CDATA[JavaScript 30 day 課程第一天，主要目的是按下按鍵時，發出聲音並進行該按鍵文字的特效；透過 Js 來綁定事件，熟練基本 JS 操作。 Demo | Github 處理步驟步驟 1. 認識 .playing CSS Class 使用 transform 進行縮放 步驟 2. 認識 keycode 還有 HTML 架構 聲音檔案 audio 與 按鍵文字 div 使用 data-key 對應 參考 key code 步驟 3. 建立 keydown listener 建立整份網頁文件檔案的鍵盤監聽事件 步驟 4. 建立 function playSound 取得目前觸發的按鍵 keyCode 取得該 keyCode 對應的文字 div DOM 取得該 keyCode 對應的聲音 audio DOM 當按鍵連續按下時，使聲音檔案重新播放 audio.currentTime = 0 播放聲音 audio.play() 加入 keyCode 對應的文字 div DOM 強調樣式 playing 步驟 5. 建立 transitionend listener keyCode 文字 div DOM 綁定 transitionend 步驟 6. 建立 function removeTransition 利用 transitionend 進行樣式凸顯後移除 在觸發事件內的執行順序 值得一提的是， border-color 會變成四個方向的顏色來設定，可以在 removeTransition function 中添加 log 來查看執行順序與觸發次數。 123function removeTransition(e) &#123; console.log(e.propertyName);&#125; 當按下觸發按鍵後， removeTransition 的 log 記錄訊息與觸發順序如下流程所示。 graph TD A(transform)-->B(border-right-color) B-->C(border-bottom-color) C-->D(border-top-color) D-->E(border-left-color) E-->F(box-shadow) F-->A1(transform) A1-->B1(border-right-color B1-->C1(border-bottom-color) C1-->D1(border-top-color) D1-->E1(border-left-color) E1-->F1(box-shadow) 另外值得一提的是， css 中的樣式順序變動，對於觸發順序毫無影響，也就是說就算把 playing 的 css 變動成如下的順序，觸發順序還是 transform 先開始。 12345.playing &#123; box-shadow: 0 0 1rem #ffc600; transform: scale(1.1); border-color: #ffc600;&#125; 學習事項將比較不熟練，或是較少使用的事項重複記錄一次。 HTML 部分HTML audio tag操作音效檔案的 HTML tag，此處透過 js 操作播放與設定音效檔案重頭播放，可以參考 MDN 的 currentTime HTML kbd tag就是輸入按鍵的顯示文字，詳細說明可以觀看以下的說明。 Definition and UsageThe tag is a phrase tag. It defines keyboard input.Tip: This tag is not deprecated, but it is possible to achieve richer effect with CSS. 資料來源www.w3schools.com/tags/tag_kbd.asp JavaScript 部分JS 部分列出一些比較便利的東西來說明。 querySelector這就是 JS 提供的 Selector 選擇器，有用過 JQuery 的就會感覺很熟悉，跟以下的 querySelectorAll 不太相同的地方是， querySelector 有找尋到結果的時候，會回傳一個 DOM object 。 1var el = document.querySelector(".myclass"); querySelectorAllSelector 選擇器的變形，搜尋結果會是類陣列(array-like) 1var matches = document.querySelectorAll("div.note, div.alert"); 需要注意的，是 querySelectorAll 得到的結果並不是 Array123var matches = document.querySelectorAll("div");Array.isArray(matches);// false classListElement.classList 唯讀屬性代表了該元素所擁有之類別屬性（Class Attribute）的即時更新集－DOMTokenList。 使用 classList 屬性是取得元素 Class 的一種便利方式，也可以透過 element.className 來得到以空格分隔之 Class 清單字串。 資料來源developer.mozilla.org/zh-TW/docs/Web/API/Element/classList 12345678910111213// div is an object reference to a &lt;div&gt; element with class="foo bar"div.classList.remove("foo");div.classList.add("anotherclass");// if visible is set remove it, otherwise add itdiv.classList.toggle("visible");// add/remove visible, depending on test conditional, i less than 10div.classList.toggle("visible", i &lt; 10 );alert(div.classList.contains("foo"));div.classList.add("foo","bar"); //add multiple classes addEventListenerEventTarget.addEventListener() 方法能將指定的事件監聽器註冊到 EventTarget 實作物件上。EventTarget 可能是 Document 中的 Element 物件、Document 物件本身、Window 物件，或是其它支援事件的物件（如：XMLHttpRequest）。 資料來源developer.mozilla.org/zh-TW/docs/Web/API/EventTarget/addEventListener transitionend為 DOM CSS transitions 變換完成後觸發，另外還有 transitionstart 、 transitioncancel Array.fromArray.from() 會從類陣列(array-like)或是可迭代的物件建立一個新的陣列實例。 資料來源developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/from 在教學的完成範例中，使用了 Array.from 來轉換 querySelectorAll 的結果，在此範例中，沒有使用此轉換也不影響； 所以才使用 Array.from 來轉換 123456const bar = ["a", "b", "c"];Array.from(bar);// ["a", "b", "c"]Array.from('foo');// ["f", "o", "o"] CSS 部分介紹 CSS3 的新單位 vh 、 vw ，其瀏覽器的支援程度可以參考 vh代表的是 view height ，也就是螢幕可視範圍高度的百分比 vw表示的是 view width ，也就是螢幕可是範圍寬度的百分比。 延伸部分按著按鈕不放，有時候 Class 樣式沒被移除。 幾個解決方式，我決定使用 keyup 事件進行移除，不使用 transitionend 改使用在 keyup 觸發 removeClass function 12345function removeClass(e) &#123; const key = document.querySelector(`.key[data-key="$&#123;e.keyCode&#125;"]`); key.classList.remove("playing");&#125;window.addEventListener("keyup", removeClass); 參考資料 JavaScript 30 day 作者 Github Wes Bos Js 30 day 中文指南 瓜瓜的 JS 30 我的 JS 30 練習Github]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>JavaScript30</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Entity Framework 與 Dapper Contrib 複合鍵的設定]]></title>
    <url>%2F2017%2F12%2F04%2FEF-Dapper-composite-keys-set%2F</url>
    <content type="text"><![CDATA[紀錄 Entity Framework v6 Code First 與 Dapper Contrib 的模型建立時，資料表索引的設定；順便替懶得查文件的同事紀錄。 以下資料表模型參考 Northwind 建立，使用 Region 與 Order Details Entity Framework當資料庫資料表單一 Primary Key 時，透過 Attribute 設定 [Key] 即可。 12345678public class Regions&#123; [Key] public int RegionID &#123; get; set; &#125; public string RegionDescription &#123; get; set; &#125;&#125; 當資料表是複合索引 (Composite keys) 時，針對是索引的欄位還是使用 [Key] 來設定，但是必須設定排序的順序，否則會出現錯誤；當複合鍵時，除了 [Key] 外，尚需要設定 [Column(Order = n)]12345678910111213141516public class OrderDetails&#123; [Key] [Column(Order = 1)] public int OrderID &#123; get; set; &#125; [Key] [Column(Order = 2)] public int ProductID &#123; get; set; &#125; public decimal UnitPrice &#123; get; set; &#125; public short Quantity &#123; get; set; &#125; public float Discount &#123; get; set; &#125;&#125; Dapper ContribDapper Contrib 與 Entity Framework 不同，索引的 Attribute 隨著是否自動增值有所差異，自動增值的索引直接使用 [Key] ， 非自動增值的索引使用 [ExplicitKey] 。所以 Dapper Contrib 是已針對索引的自動增值與否進行設定，不管是單一鍵還是複合鍵都是如此。 以下為單一鍵的範例： 12345678910111213141516171819// 自動增值public class Regions&#123; [Key] public int RegionID &#123; get; set; &#125; public string RegionDescription &#123; get; set; &#125;&#125;// 非自動增值public class Regions&#123; [ExplicitKey] public int RegionID &#123; get; set; &#125; public string RegionDescription &#123; get; set; &#125;&#125; 以下為複合鍵的範例，假設當兩個複合鍵皆是自動增值或是皆非自動增值123456789101112131415161718192021222324252627282930// 自動增值public class OrderDetails&#123; [Key] public int OrderID &#123; get; set; &#125; [Key] public int ProductID &#123; get; set; &#125; public decimal UnitPrice &#123; get; set; &#125; public short Quantity &#123; get; set; &#125; public float Discount &#123; get; set; &#125;&#125;// 非自動增值public class OrderDetails&#123; [ExplicitKey] public int OrderID &#123; get; set; &#125; [ExplicitKey] public int ProductID &#123; get; set; &#125; public decimal UnitPrice &#123; get; set; &#125; public short Quantity &#123; get; set; &#125; public float Discount &#123; get; set; &#125;&#125; 參考資料附上使用 LinqPad 的簡單範例， Entity Framework 、 Dapper Contrib ，使用前記得引用參考。 Dapper Toturial MSDN]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>EntityFramework</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LINQPad DbContext 參照自訂的 DLL]]></title>
    <url>%2F2017%2F11%2F23%2Flinqpad-use-dao-dll%2F</url>
    <content type="text"><![CDATA[LINQPad 提供很便利的方式使用，但是實務上的開發，會將資料處理層抽取出來，當想要針對這部分進行一些查詢的時候， LINQPad 還是可以使用的，以下就是使用 Entity Framework 6 或以下版本的設定方式 設定步驟 在 Explore Panel 上(就是 LINQPad 左邊的區塊)，點下 Add connection Choose Data Context 選擇 Entity Framework (DbConext V4/V5/V6) Entity Framework DbContext Connection Path to Custom Assembly設定 Assembly ，就是你的 dll 檔案 Full Type Name of Typed DbContext假如你的 DLL 內有多個 DbContext ， LINQPad 會列出 DLL 內的 DbContext，然後選擇其中一個 Path to Application config file (…)設定連線字串的檔案 以上都設定好就完成了。 參考資料 LINQPad]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>Linq</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTML 中 Script 資源載入上的 Async、defer、integrity]]></title>
    <url>%2F2017%2F09%2F20%2Fscript-resource-async-defer-integrity%2F</url>
    <content type="text"><![CDATA[HTML 中，在載入 JavaScript 時候，都知道使用 &lt;script&gt; 來進行載入，但是當資料使用 CDN 或是其他外部載入的時候，常會看到一些額外屬性設定，此篇紀錄一下 async 、defer、integrity 這三個屬性。 會說到資源載入，必須先了解到網頁頁面的生命週期，以下是瀏覽器取的網頁文件檔後的主流程 資料來源howBrowserWork 上述的流程還可以解析更詳細的資料，不過此篇的主題不是這個，想了解更詳細的內容可以參考 JavaScript.Info Page lifecycle 或是 How browsers work async使用非同步方式執行，使用布林值設定 defer使用布林值設定，在 HTML 文件解析後，DOMContentLoaded 觸發前執行 integrity檢驗載入的 script 是否經過第三方竄改 這些屬性在各瀏覽器中的相容性請參考此處 參考資料 MDN HTML script JavaScript.Info Page lifecycle How browsers work Render_tree_construction Browser compatibility]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>Html</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IE 相容性設定]]></title>
    <url>%2F2017%2F09%2F20%2Fie-compatibility-set%2F</url>
    <content type="text"><![CDATA[雖然現在很多網站已經漸漸淘汰一些舊版本的 IE 了，但是幾個月前同事的 IE 還是發生這問題，其原因還是該同事的瀏覽器有調整一些個人設定，所以仔細思考還是應該仔細針對 IE 版本設定好相容性。 IE 的文件模式依照官方說法有三種 Standard Mode支援最新HTLM5/CSS3/SVG等標準，不過不同版本IE支持程度不同，而且 IE 現在也沒有更新 Quirks Mode力求相容較早版本瀏覽器的行為 Almost-Standards Mode（準標準模式）支援最新標準，但保有先前版本的圖形渲染行為 三種模式的官方說明如下：All versions of Internet Explorer released after Internet Explorer 6 support up to three document modes: Standards mode provides the greatest support for the latest standards, such as HTML5, CSS3, SVG, and others. This is the preferred mode for new public websites. Quirks mode emphasizes compatibility over standards compliance by supporting behavior found in earlier versions of Internet Explorer. Almost-standards mode supports APIs defined by the latest standards while honoring graphic rendering behavior found in earlier browsers. 資料來源Defining Document Compatibility 了解文件模式後，就可以透過切換不同文件模式來相容 修改每個 HTML 頁面下列 HTML 中繼標籤放到各網頁的 HEAD 項目中 ( 在 TITLE 或 META 之外的標籤前面 )，這會告知 Windows Internet Explorer 以 Windows Internet Explorer 7 的方式呈現網頁1&lt;meta http-equiv="X-UA-Compatible" content="IE=EmulateIE7"/&gt; 強制瀏覽器呈現為特定的版本的標準&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=11&quot;/&gt; 逗號分隔多個版本，瀏覽器自動挑選其能夠使用的最高版本，如：使用 IE 10 瀏覽就會自動挑選 IE 10&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=9,IE=10,IE=11&quot;/&gt; 強制瀏覽器呈現舊版本 IE 的相容&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=EmulateIE7&quot;/&gt; 強制瀏覽器呈現當前瀏覽器的最高版本&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;/&gt; 用分號分開，它設定為不同版本的兼容級別，IE7、IE9。允許不同層次的向後兼容性：&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=7; IE-9&quot;/&gt; 修改 IIS 設定在針對站台的 HTTP 回應標頭新增 HTTP 標頭名稱為 X-UA-Compatible ，並且設定值即可完成全站設定。1234567891011&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;configuration&gt; &lt;system.webServer&gt; &lt;httpProtocol&gt; &lt;customHeaders&gt; &lt;clear /&gt; &lt;add name="X-UA-Compatible" value="IE=EmulateIE7" /&gt; &lt;/customHeaders&gt; &lt;/httpProtocol&gt; &lt;/system.webServer&gt;&lt;/configuration&gt; 參考資料 MSDN X-UA-Compatible MSDN Defining document compatibility Darkthread 搞懂X-UA-Compatible IE相容設定]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>IE</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RSS 轉換 Json 輸出]]></title>
    <url>%2F2017%2F09%2F16%2Frss2json%2F</url>
    <content type="text"><![CDATA[最近剛好需要串接其他資料的 RSS 來顯示資訊，以前是使用 Google Feed 提供的轉換服務，不過 2015 年的時候 Google 已經停止該服務，所以現在可以使用 RSS2Json 這個網站提供的服務。 URL1https://api.rss2json.com/v1/api.json MethodGET URL params Name Required Type Description rss_url Yes String, Escaped URL rss feed you want to convert to json, the url need to be escaped api_key No String A valid api key. order_by No String Order the results by chosen value, Possible values : pubDate, author or title. order_dir No String Order direction of feed items to return, Possible values : asc or desc, Default value : desc. count No Integer Count of feed items to return, default is 20 . callback No Alphanumeric callback name if you want to use JSONP . Sample Callapi call using jQuery.ajax() 1234567891011121314151617181920$.ajax(&#123; url: ‘https://api.rss2json.com/v1/api.json&#39;, method: ‘GET’, dataType: ‘json’, data: &#123; rss_url: ‘https://news.ycombinator.com/rss&#39;, api_key: ‘0000000000000000000000000000000000000000’, // put your api key here count: 2 &#125;&#125;).done(function (response) &#123; if(response.status != ‘ok’)&#123; throw response.message; &#125; console.log(‘====== ‘ + response.feed.title + ‘ ======’); for(var i in response.items)&#123; var item = response.items[i]; console.log(item.title); &#125;&#125;); 資料來源Microsoft RSS2json 文件 拿 Blog 的 RSS 來轉換，如下 參考資料 RSS to json]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>other</tag>
        <tag>JSON</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[資料庫檢視表加入至 Edmx 中]]></title>
    <url>%2F2017%2F09%2F12%2FEntity-Framework-Add-Db-View-to-edmx%2F</url>
    <content type="text"><![CDATA[資料庫檢視表無法加入至 edmx 中，主要原因都是檢視表沒有索引，此處說的沒有索引是 Entity Framework 無法辨識而造成的，所以必須按照 Entity Framework 的需求設計。 其實不只是檢視表 ( View Table ) ，資料表沒有索引也會造成無法加入，不過 DBA ( 資料庫管理者 )應該不會這樣搞，所以資料結構正常設計的話，應該不太會出問題，檢視表才會比較常發生。 此篇使用以前使用的 ASPNetMVC 當範例，直接在 master分支上就可以觀看到詳細過程；首先為了方便觀看對照，針對北風資料庫的 Order，先建立兩個檢視表 兩個檢視表建立，都不加入索引1234567891011121314151617181920212223-- 加入失敗的範例create view uv_null_order ASSELECT ROW_NUMBER() OVER (ORDER BY OrderID) AS id ,[OrderDate] ,[RequiredDate] ,[ShippedDate] ,[ShipName] ,[ShipAddress]FROM OrdersGO-- 可以順利加入的範例create view uv_not_null_order ASSELECT ISNULL(ROW_NUMBER() OVER (ORDER BY OrderID),1) AS id ,[OrderDate] ,[RequiredDate] ,[ShippedDate] ,[ShipName] ,[ShipAddress]FROM OrdersGO 添加失敗的範例 添加成功的範例 主要差別就在於自訂的排序編號，一個使用 NULL 檢查一個沒有；在 edmx 中，判斷是否索引的話，只會依照是否為 NULL 去判別，所以就算成功加入，也要仔細去設定欄位。 延伸閱讀 Will 保哥 解決 SQL Server 檢視表 (Views) 無法匯入 EDMX 的問題 Github 的範例]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>Asp.Net MVC</tag>
        <tag>C#</tag>
        <tag>T-SQL</tag>
        <tag>EntityFramework</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[AspNet 突破網站最大檔案設定]]></title>
    <url>%2F2017%2F09%2F11%2FAspNet-Maximum-request-length-exceeded%2F</url>
    <content type="text"><![CDATA[網站上傳檔案是很常見的需求，IIS 預設上傳檔案是 4 MB 大小，最大檔案限制是 2 GB，要讓上傳檔案超過 4 MB 大小，可以透過 config 設定，讓 IIS 來處理就可以達成。 主要設定是在 httpRuntime 進行設定，其設定屬性說明如下 maxRequestLength計算單位是 kilobytes ，所以 1 MB 是 1024 kilobytes enableVersionHeaderASP.NET 是否應該輸出版本標頭 executionTimeoutASP.NET 可執行的時間長度，以秒數為單位 123456&lt;configuration&gt; &lt;system.web&gt; &lt;!-- 300 秒可執行時間長度，檔案限制 5 MB --&gt; &lt;httpRuntime enableVersionHeader="False" executionTimeout="300" maxRequestLength="5120" /&gt; &lt;/system.web&gt;&lt;/configuration&gt; 但是假如是 IIS 7 版本以上(包含 IIS 7)，需要再添加如下的設定 maxAllowedContentLength計算單位是 bytes ，所以 1 MB 是 1048576 bytes 12345678&lt;system.webServer&gt; &lt;security&gt; &lt;requestFiltering&gt; &lt;!-- 檔案限制 5 MB --&gt; &lt;requestLimits maxAllowedContentLength="5242880" /&gt; &lt;/requestFiltering&gt; &lt;/security&gt;&lt;/system.webServer&gt; 參考資料 MSDN httpRuntime MSDN Request Limits 延伸資料 91 超出檔案大小，導致特定頁面]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>IIS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C# 中 Boxing 與 Unboxing]]></title>
    <url>%2F2017%2F08%2F31%2Fboxing-and-unboxing-in-csharp%2F</url>
    <content type="text"><![CDATA[Boxing (裝箱) 與 Unboxing (拆箱) 會有這兩者的出現，簡單說係因為實值型別與參考型別兩者間的處理，不過針對這動作所造成的影響，可以進行簡單的小測試。 Boxing是一種隱含轉換，是將實值型別轉換為 object 類型(參考型別)或是由這個實值型別實作之任何介面類型的程序。 Unboxing將 object 類型明確轉換為實值型別，或將介面類型明確轉換為實作介面之實值型別的程序。 資料來源Microsoft Doc 1234567891011121314151617181920212223242526272829303132333435363738394041int max = 100000;int flag = 0;Stopwatch sw = new Stopwatch();sw.Reset();sw.Start();// 經過一次裝箱for (int i = 0; i &lt; max; i++)&#123; string str = " i = " +i;&#125;sw.Stop();Console.WriteLine("one boxing time:" + sw.Elapsed.TotalMilliseconds.ToString());sw.Reset();sw.Start();// 不裝箱for (int i = 0; i &lt; max; i++)&#123; string str = " i = " + i.ToString();&#125;sw.Stop();Console.WriteLine("no boxing time:" + sw.Elapsed.TotalMilliseconds.ToString());DateTime now = DateTime.Now;while (!((DateTime.Now.Second - 5) == now.Second))&#123; string str = " i = " + flag; flag++;&#125;Console.WriteLine("one boxing 5 second run :" + flag.ToString() + " times");flag =0;now = DateTime.Now;while (!((DateTime.Now.Second - 5) == now.Second))&#123; string str = " i = " + flag.ToString(); flag++;&#125;Console.WriteLine("no boxing 5 second run :" + flag.ToString() + " times"); 輸出結果1234one boxing time:12.413no boxing time:9.1419one boxing 5 second run :26794548 timesno boxing 5 second run :32986447 times 參考資料 Microsoft Doc]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C# 中 String 直接累加與 StringBuilder]]></title>
    <url>%2F2017%2F08%2F30%2Fstring-vs-stringBuilder-in-csharp%2F</url>
    <content type="text"><![CDATA[這陣子再重新閱讀設計模式，想到了 String 與 StringBulder 的對比，裡面應用了 Builder 這個模式；後來想到這兩者的差異也沒紀錄，這次就順手紀錄一下 兩者的主要差異是在動態處理資料時，資源使用程度。 Stringstring 是參考型別，所以每次在動態處理資料時，都會再配置一個新的記憶體給它，但是原本使用的資源雖然最終交由 GC(Garbage Collection) 回收，但是在回收之前資源卻已經浪費掉了。 StringBuilder使用了 Builder 模式，會維護一個緩衝區，以容納新資料。 12345678910111213141516171819202122void Main()&#123; Stopwatch sw = new Stopwatch(); StringBuilder sb = new StringBuilder(); String str = ""; sw.Start(); for (int i = 0; i &lt; 10000; i++) &#123; str += i.ToString(); &#125; sw.Stop(); Console.WriteLine("String Class :" + sw.ElapsedMilliseconds); sw.Reset(); sw.Start(); for (int i = 0; i &lt; 10000; i++) &#123; sb.Append(i.ToString()); &#125; sw.Stop(); Console.WriteLine("StringBuilder Class:" + sw.ElapsedMilliseconds);&#125; 動態處理 100000 筆資料的花費時間，輸出結果如下圖 參考資料 MSDN StringBuilder MSDN Strin]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C# 中繼承的執行順序]]></title>
    <url>%2F2017%2F08%2F20%2Finherit-exec-life-in-csharp%2F</url>
    <content type="text"><![CDATA[在巢狀繼承中，建構式以及設定式的執行順序是不太相同的，以下針對這部分，使用個簡單範例來說明。 123456789101112131415161718192021222324252627282930313233343536373839void Main()&#123; Second obj = new Second();&#125;class Ref&#123; public Ref(string str) &#123; Console.WriteLine(str); &#125;&#125;class Base&#123; public Ref BaseString = new Ref(&quot;Base 初始設定&quot;); public Base() &#123; Console.WriteLine(&quot;Base 建構式&quot;); &#125;&#125;class First : Base&#123; public Ref firstString = new Ref(&quot;First 初始設定&quot;); public First() &#123; Console.WriteLine(&quot;First 建構式&quot;); &#125;&#125;class Second : First&#123; public Ref SecondString = new Ref(&quot;Second 初始設定&quot;); public Second() &#123; Console.WriteLine(&quot;Second 建構式&quot;); &#125;&#125; 其執行順序是繼承的最末端到基底的方向(子到父)，執行初始設定，再由基底到繼承末端(父到子)執行建構式，執行結果如下： 可由此張流程圖看出： graph TD A(Second 初始設定)-->B(First 初始設定) B-->C(Base 初始設定) C-->D(Base 建構式) D-->E(First 建構式) E-->F(Second 建構式)]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IIS 動態壓縮]]></title>
    <url>%2F2017%2F08%2F17%2FEnable-dynamic-compression-in-IIS%2F</url>
    <content type="text"><![CDATA[IIS 有一個動態壓縮功能，可以把輸出的網頁壓縮，減少網頁需要的傳輸量。但是預設設定沒有 JSON 資料的動態壓縮。 此篇主要說明如何在 IIS 設定啟動 JSON 檔案類型的壓縮，設定方式可以透過介面操作或是指令列操作；以下範例使用預設 Web API 範本，範例資料取自開放停車資料，先行擷取未壓縮之資料如下。 GUI 介面操作開啟 IIS ，先開啟【壓縮】，其後再設定【編輯器】；編輯器即是設定動靜態壓縮類型 先確認啟用動態內容壓縮 接著設定編輯器，進入編輯器後，選擇區段(section)，選取 system.webServer 下的 httpCompression 選取之後，畫面會列出一些設定，主要是 dynamicTypes 和 staticTypes 兩種類別的設定 以此範例來說，設定 json 類型至動態壓縮 之後就可以看到 API 的檔案大小被壓縮過了 指令操作除了透過介面操作，還可以透過指令對 IIS 進行調整；記得使用管理者身分執行。 1234cd /d C:\Windows\System32\inetsrvappcmd.exe set config -section:system.webServer/httpCompression /+"dynamicTypes.[mimeType='application/json;charset=utf-8',enabled='True']" /commit:apphostappcmd.exe set config -section:system.webServer/httpCompression /+"dynamicTypes.[mimeType='application/json',enabled='True']" /commit:apphostiisreset 參考資料 Scott]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>IIS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Entity Framework 6 建立資料庫 Function 的對應]]></title>
    <url>%2F2017%2F08%2F15%2FEntity-Framework-Db-Function%2F</url>
    <content type="text"><![CDATA[有朋友在問這方面的問題，直接整理一下資料，針對 Entity Framework 6 的 DataBase First 的處理對應。使用之前文章的 Github 範例，不過先調整一下範例的資料庫連接方式，將資料庫連接方式變動為使用 LocalDB ，這些方式就不再贅述，以下進入正題。因為範例使用的 Northwind 資料庫沒有 Function，所以建立二個 DB Function ，方便後續的測試，如以下的範例。 123456789101112131415161718192021222324252627282930313233343536373839404142434445-- =============================================-- Author: Allen.YU-- Script Version: 1.0-- MSSQL Version: 20016-- Create Date: 2017-08-15-- Update Date: 2017-08-15-- Description: 範例 Db function 計算單價 X 數量 X 折扣-- Param name="@OrderID": 對應 OrderDetail OrderID-- Param name="@ProductID": 對應 OrderDetail ProductID-- =============================================CREATE FUNCTION fn_TotalPrice (@OrderID int,@ProductID int)RETURNS decimal ASBEGIN DECLARE @totalPrice decimal;SET @totalPrice = (SELECT [UnitPrice] * [Quantity] * (1- [Discount]) FROM [Order Details] WITH (NOLOCK) WHERE [OrderID] = @OrderID AND [ProductID] = @ProductID) RETURN @totalPriceENDGO-- =============================================-- Author: Allen.YU-- Script Version: 1.0-- MSSQL Version: 20016-- Create Date: 2017-08-15-- Update Date: 2017-08-15-- Description: 範例 Db function 計算此訂單有幾樣商品-- Param name="@OrderID": 對應 OrderDetail OrderID-- =============================================CREATE FUNCTION fn_TotalProductQuan (@OrderID int)RETURNS tinyint ASBEGIN DECLARE @result tinyint;SET @result = (SELECT Count(*) FROM [Order Details] WITH (NOLOCK) WHERE [OrderID] = @OrderID) RETURN @resultENDGO 資料庫有了 function 後(如下圖)，就可以更新 Edmx 檔案，更新後如下。 之後就可以撰寫 DbFunction 對應，其寫法可以針對 DbContxt 使用 partial class 擴充，或是撰寫靜態擴充方法。 partial Class 擴充12345678910111213141516171819202122232425262728293031323334353637383940414243// 針對 DbContxt 去撰寫 partial classpublic partial class NorthwindEntities&#123; /// &lt;summary&gt; /// Functions the total price. /// &lt;/summary&gt; /// &lt;param name="orderId"&gt;The order identifier.&lt;/param&gt; /// &lt;param name="productId"&gt;The product identifier.&lt;/param&gt; /// &lt;returns&gt;System.Nullable&amp;lt;System.Decimal&amp;gt;.&lt;/returns&gt; [DbFunction("NorthwindModel.Store", "fn_TotalPrice")] public decimal? Fn_TotalPrice(int orderId, int productId) &#123; var parameters = new List&lt;ObjectParameter&gt;(2) &#123; new ObjectParameter("OrderID", orderId), new ObjectParameter("ProductID", productId) &#125;; var lObjectContext = ((IObjectContextAdapter)this).ObjectContext; var output = lObjectContext. CreateQuery&lt;decimal?&gt;("NorthwindModel.Store.fn_TotalPrice(@OrderID, @ProductID)", parameters.ToArray()) .Execute(MergeOption.NoTracking) .FirstOrDefault(); return output; &#125; /// &lt;summary&gt; /// Functions the total product quan. /// &lt;/summary&gt; /// &lt;param name="orderId"&gt;The order identifier.&lt;/param&gt; /// &lt;returns&gt;System.Nullable&amp;lt;System.Int32&amp;gt;.&lt;/returns&gt; [DbFunction("NorthwindModel.Store", "fn_TotalProductQuan")] public int? Fn_TotalProductQuan(int orderId) &#123; var paramter = new ObjectParameter("OrderID", orderId); var lObjectContext = ((IObjectContextAdapter)this).ObjectContext; var output = lObjectContext. CreateQuery&lt;int?&gt;("NorthwindModel.Store.fn_TotalProductQuan(@OrderID)", paramter) .Execute(MergeOption.NoTracking) .FirstOrDefault(); return output; &#125;&#125; 使用 Order_DetailsController 來呈現12345678910111213141516private NorthwindEntities db = new NorthwindEntities();public ActionResult Index()&#123; var order_Details = db.Order_Details.Select(o =&gt; new OrderDetailViewModel() &#123; OrderID = o.OrderID, ProductID = o.ProductID, UnitPrice = o.UnitPrice, Quantity = o.Quantity, Discount = o.Discount, // 使用 partial class TotalPrice = db.Fn_TotalPrice(o.OrderID, o.ProductID).Value &#125;); return View(order_Details);&#125; 靜態擴充方法針對 DbContext 去撰寫靜態擴充方法1234567891011121314151617181920212223242526272829303132333435363738394041/// &lt;summary&gt;/// Statics the function total price./// &lt;/summary&gt;/// &lt;param name="db"&gt;The database.&lt;/param&gt;/// &lt;param name="orderId"&gt;The order identifier.&lt;/param&gt;/// &lt;param name="productId"&gt;The product identifier.&lt;/param&gt;/// &lt;returns&gt;System.Nullable&amp;lt;System.Decimal&amp;gt;.&lt;/returns&gt;[DbFunction("NorthwindModel.Store", "fn_TotalPrice")]public static decimal? StaticFn_TotalPrice(this NorthwindEntities db,int orderId, int productId)&#123; var parameters = new List&lt;ObjectParameter&gt;(2) &#123; new ObjectParameter("OrderID", orderId), new ObjectParameter("ProductID", productId) &#125;; var lObjectContext = ((IObjectContextAdapter)db).ObjectContext; var output = lObjectContext. CreateQuery&lt;decimal?&gt;("NorthwindModel.Store.fn_TotalPrice(@OrderID, @ProductID)", parameters.ToArray()) .Execute(MergeOption.NoTracking) .FirstOrDefault(); return output;&#125;/// &lt;summary&gt;/// Statics the function total product quan./// &lt;/summary&gt;/// &lt;param name="db"&gt;The database.&lt;/param&gt;/// &lt;param name="orderId"&gt;The order identifier.&lt;/param&gt;/// &lt;returns&gt;System.Nullable&amp;lt;System.Int32&amp;gt;.&lt;/returns&gt;[DbFunction("NorthwindModel.Store", "fn_TotalProductQuan")]public static int? StaticFn_TotalProductQuan(this NorthwindEntities db, int orderId)&#123; var paramter = new ObjectParameter("OrderID", orderId); var lObjectContext = ((IObjectContextAdapter)db).ObjectContext; var output = lObjectContext. CreateQuery&lt;int?&gt;("NorthwindModel.Store.fn_TotalProductQuan(@OrderID)", paramter) .Execute(MergeOption.NoTracking) .FirstOrDefault(); return output;&#125; 一樣使用 Order_DetailsController 來呈現123456789101112131415private NorthwindEntities db = new NorthwindEntities();public ActionResult Index()&#123; var order_Details = db.Order_Details.ToList().Select(o =&gt; new OrderDetailViewModel() &#123; OrderID = o.OrderID, ProductID = o.ProductID, UnitPrice = o.UnitPrice, Quantity = o.Quantity, Discount = o.Discount, // 靜態擴充方法 TotalPrice = db.StaticFn_TotalPrice(o.OrderID, o.ProductID).Value &#125;); return View(order_Details);&#125; 範例檔案 Github 範例]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>Asp.Net MVC</tag>
        <tag>C#</tag>
        <tag>T-SQL</tag>
        <tag>SQLServer</tag>
        <tag>EntityFramework</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Google Map API 接取 WMTS]]></title>
    <url>%2F2017%2F08%2F14%2Fgoogle-map-api-add-wmts-layer%2F</url>
    <content type="text"><![CDATA[使用 Google Map API 介接 WMTS(Web Map Tile Service) ，介街方式不難，主要使用 Google Map 的 ImageMapType 。以下進入正題， WMTS 使用國土測繪中心的資料。 12345678910111213141516171819202122function initMap() &#123; const wmsMapType = new google.maps.ImageMapType(&#123; maxZoom: 18, minZoom: 7, name: "EMAP", // 每個磚格設定為 256 X 256 tileSize: new google.maps.Size(256, 256), isPng: true, // 使用國土測繪中心的 wmts 來進行範例 getTileUrl: function(coord, zoom) &#123; return `http://wmts.nlsc.gov.tw/wmts/EMAP/default/GoogleMapsCompatible/$&#123;zoom&#125;/$&#123;coord.y&#125;/$&#123;coord.x&#125;.png`; &#125; &#125;); const map = new google.maps.Map(document.getElementById('map'), &#123; zoom: 12, center: new google.maps.LatLng(25.04, 121.505) &#125;); map.overlayMapTypes.insertAt(0, wmsMapType);&#125;google.maps.event.addDomListener(window, 'load', initMap); 參考資料 Wiki WMTS Google Map maptype-image]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>Google</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GCA 政府憑證管理中心憑證串鍊說明]]></title>
    <url>%2F2017%2F08%2F11%2FGCA-SSL-Chain-step-by-step%2F</url>
    <content type="text"><![CDATA[前陣子 8/3 幫同事弄憑證設定的時候，發現 GCA 發出解決 Firefox 與 Android 7.0 以上的問題，其公告訊息如下： 106年07月31日 本憑證管理中心經由GRCA重新簽發2張自發憑證(GRCA1_to_GRCA1_5.cer及GRCA1_5_to_GRCA2.cer)，已可解決Firefox與Android 7.0以上遇到GCA SSL憑證不信任的問題，請參考GCA網站公告之新版憑證安裝手冊。若已經安裝過GCA SSL憑證串鍊的網站伺服器，請參考「SSL憑證重新設定5層串鍊說明」手冊調整憑證串鍊設定。 資料來源GCA 看到 GCA 都給出解決方式了，當然直接照著處理。 而且 GCA 很貼心，幾乎各種 Web Server 都有設定教學說明(是 step by step 說明喔)；雖然 GCA 都有說明文件，不過此篇文章以 Windows IIS 8.0 為主。 檢查根憑證首先，開啟執行( Run ) ，然後輸入 mmc 。 接著設定主控台，增加憑證管理單元 現在進入憑證管理後，先到受信任的根憑證授權單位檢查，看是否有 GRCA2 的憑證(到期日為 2037/12/31) ，若是有這張憑證存在，請刪除它 安裝中繼憑證下載 GCA 自發憑證GCA 的解決方案，需要下載三張自發憑證，然後匯入中繼憑證 GRCA 自發憑證(GRCA1 簽 GRCA1.5) GRCA 自發憑證(GRCA1.5 簽 GRCA2) GCA2 憑證 匯入自發憑證一樣呼叫出主控台，選擇中繼憑證進行匯入，將三張自發憑證匯入；自發憑證匯入後，請重新開機，不重開機的話，是不會作業的。 檢查憑證鍊完成上述的步驟後，憑證鍊檢查可以在 SSL Shopper 的 checker 功能進行線上檢查 最後注意一下，此篇只有自發憑證串鍊的匯入與檢查，別忘記申請的憑證還是要安裝的，安裝說明可以參考GCA 各項教學 參考資料 GCA 政府憑證管理中心 GCA 政府憑證管理中心 相關資料下載 GCA 憑證串鍊教學 GCA IIS8 憑證安裝教學 GRCA 自發憑證(GRCA1 簽 GRCA1.5) GRCA 自發憑證(GRCA1.5 簽 GRCA2) GCA2 憑證]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>IIS</tag>
        <tag>notes</tag>
        <tag>WindowsServer2012</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[程式設計的基本認知]]></title>
    <url>%2F2017%2F08%2F11%2Fbasic-knowhow-for-develop%2F</url>
    <content type="text"><![CDATA[在程式開發上，應該都需要降低耦合，增強內聚這樣的認知，而為了達成這樣的目標，就會有介面、原則等等… 抽象找出關鍵性特徵並加以描述；抽象表示一個群集，所以應該依賴抽象，而不是倚賴具體。倚賴抽象的目的是希望程式碼易於變動。 目標 高內聚內聚性除了程式上之外，還有設計上的內聚；設計上的內聚，就是命名上的設計，例如：Math 這 Class 的方法都是低內聚，裡面的方法，看到 Math 就知道裡面的方法都是數學相關的運算，不會再 Math 裡面看到 sql connection 的方法，因為這完全不相關。 低耦合 特性 繼承繼承是為了多型的目的；B 繼承 A，所以 B 就是 A。 封裝 多型有泛型 、多載也是多型、強制同型也是多型(編譯器比較多使用) 原則 單一職責原則(SRP) 里氏替換原則(LSP)繼承父類別後，不要遮蔽父類別的方法。簡單說，使用父類別的地方，都可以使用子類別替換。 12345678910111213141516171819202122232425void Main()&#123; Class1 c = new Class1(); int val = c.Test(); Class2 c2 = new Class2(); int val2 = c2.Test();&#125;// Define other methods and classes hereclass Class1&#123; public int Test() &#123; return 10; &#125;&#125;class Class2 : Class1&#123; public new void Test() &#123; Console.WriteLine("Test"); &#125;&#125; 倚賴倒置原則(DIP)倚賴抽象 介面隔離原則(ISP) 開閉原則(OCP)對擴展開放，對修改封閉。 最少知識原則(迪米特法則LOD) 參考資料 SKill Tree Bill 講師]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Asp.Net MVC 5 Identity 使用 DataBaseFirst]]></title>
    <url>%2F2017%2F08%2F10%2FAsp-Net-MVC-5-Identity-DataBaseFirst%2F</url>
    <content type="text"><![CDATA[直接進入主題，此次要使用 DataBase First 來使用 Identity ，所以先使用範本建立 MVC 專案，另外不要使用 Authentication 。 套件安裝專案建立好之後，手動安裝 Identity 套件，可以透過 Nuget 安裝以下這三個套件 Microsoft.AspNet.Identity.Core 1Install-Package Microsoft.AspNet.Identity.Core Microsoft.AspNet.Identity.EntityFramework 1Install-Package Microsoft.AspNet.Identity.EntityFramework Microsoft.AspNet.Identity.Owin 1Install-Package Microsoft.AspNet.Identity.Owin 另外此次範例使用 Owin，需要安裝 Microsoft.Owin 套件，這套件有許多相依套件，裝完後會有 Microsoft.Owin Microsoft.Owin.Security Microsoft.Owin.Security.Cookies Microsoft.Owin.Security.OAuth 安裝方式可以透過 Nuget Manager Console1Install-Package Microsoft.Owin 還有 Microsoft.Owin.Host.SystemWeb 需要安裝1Install-Package Microsoft.Owin.Host.SystemWeb 最後，因為部分語法使用 C# 7.0 ，此範例使用 .net framework 4.6 如果沒有安裝 Package 在編譯的時候反而會出錯，所以安裝以下套件1Install-Package Microsoft.Net.Compilers 建立資料與對應可以使用以下的 script 建立套件處理完成，接著需要先建立資料表，以下是預設的 Identity 資料表，欄位盡量不要變動，可以增加新的欄位，或是變動 Id 索引的類型，此範例就變更 Id 類型為 int 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108-- 切換至資料庫USE YourDataBaseNameGOALTER TABLE [dbo].[IdentityUserRoles] DROP CONSTRAINT [FK_IdentityUserRoles_IdentityUsers_UserId]GOALTER TABLE [dbo].[IdentityUserRoles] DROP CONSTRAINT [FK_IdentityUserRoles_IdentityRoles_RoleId]GOALTER TABLE [dbo].[IdentityUserLogins] DROP CONSTRAINT [FK_IdentityUserLogins_IdentityUsers_UserId]GOALTER TABLE [dbo].[IdentityUserClaims] DROP CONSTRAINT [FK_IdentityUserClaims_IdentityUsers_UserId]GO/****** Drop Identity Tables ******/DROP TABLE [dbo].[IdentityUsers]GODROP TABLE [dbo].[IdentityUserRoles]GODROP TABLE [dbo].[IdentityUserLogins]GODROP TABLE [dbo].[IdentityUserClaims]GODROP TABLE [dbo].[IdentityRoles]GO/****** Object: Table [dbo].[IdentityRoles] ******/CREATE TABLE [dbo].[IdentityRoles]( [Id] [int] IDENTITY(1,1) NOT NULL, [Name] [nvarchar](256) NOT NULL, CONSTRAINT [PK_IdentityRoles] PRIMARY KEY CLUSTERED ([Id] ASC));GO/****** Object: Table [dbo].[IdentityUserClaims] ******/CREATE TABLE [dbo].[IdentityUserClaims]( [Id] [int] IDENTITY(1,1) NOT NULL, [UserId] [int] NOT NULL, [ClaimType] [nvarchar](max) NULL, [ClaimValue] [nvarchar](max) NULL, CONSTRAINT [PK_IdentityUserClaims] PRIMARY KEY CLUSTERED ([Id] ASC));GO/****** Object: Table [dbo].[IdentityUserLogins] ******/CREATE TABLE [dbo].[IdentityUserLogins]( [LoginProvider] [nvarchar](128) NOT NULL, [ProviderKey] [nvarchar](128) NOT NULL, [UserId] [int] NOT NULL, CONSTRAINT [PK_IdentityUserLogins] PRIMARY KEY CLUSTERED ([LoginProvider] ASC,[ProviderKey] ASC,[UserId] ASC));GO/****** Object: Table [dbo].[IdentityUsers] ******/CREATE TABLE [dbo].[IdentityUsers]( [Id] [int] IDENTITY(1,1) NOT NULL, [Email] [nvarchar](256) NULL, [EmailConfirmed] [bit] NOT NULL, [PasswordHash] [nvarchar](100) NULL, [SecurityStamp] [nvarchar](100) NULL, [PhoneNumber] [nvarchar](25) NULL, [PhoneNumberConfirmed] [bit] NOT NULL, [TwoFactorEnabled] [bit] NOT NULL, [LockoutEndDateUtc] [datetime] NULL, [LockoutEnabled] [bit] NOT NULL, [AccessFailedCount] [int] NOT NULL, [UserName] [nvarchar](256) NOT NULL, CONSTRAINT [PK_IdentityUsers] PRIMARY KEY CLUSTERED ([Id] ASC));GO/****** Object: Table [dbo].[IdentityUserRoles] ******/SET ANSI_NULLS ONGOSET QUOTED_IDENTIFIER ONGOCREATE TABLE [dbo].[IdentityUserRoles]( [UserId] [int] NOT NULL, [RoleId] [int] NOT NULL, CONSTRAINT [PK_IdentityUserRoles] PRIMARY KEY CLUSTERED ([UserId] ASC,[RoleID] ASC));GOALTER TABLE [dbo].[IdentityUserClaims] WITH CHECK ADD CONSTRAINT [FK_IdentityUserClaims_IdentityUsers_UserId] FOREIGN KEY([UserId])REFERENCES [dbo].[IdentityUsers] ([Id])ON DELETE CASCADEGOALTER TABLE [dbo].[IdentityUserClaims] CHECK CONSTRAINT [FK_IdentityUserClaims_IdentityUsers_UserId]GOALTER TABLE [dbo].[IdentityUserLogins] WITH CHECK ADD CONSTRAINT [FK_IdentityUserLogins_IdentityUsers_UserId] FOREIGN KEY([UserId])REFERENCES [dbo].[IdentityUsers] ([Id])ON DELETE CASCADEGOALTER TABLE [dbo].[IdentityUserLogins] CHECK CONSTRAINT [FK_IdentityUserLogins_IdentityUsers_UserId]GOALTER TABLE [dbo].[IdentityUserRoles] WITH CHECK ADD CONSTRAINT [FK_IdentityUserRoles_IdentityRoles_RoleId] FOREIGN KEY([RoleId])REFERENCES [dbo].[IdentityRoles] ([Id])ON DELETE CASCADEGOALTER TABLE [dbo].[IdentityUserRoles] CHECK CONSTRAINT [FK_IdentityUserRoles_IdentityRoles_RoleId]GOALTER TABLE [dbo].[IdentityUserRoles] WITH CHECK ADD CONSTRAINT [FK_IdentityUserRoles_IdentityUsers_UserId] FOREIGN KEY([UserId])REFERENCES [dbo].[IdentityUsers] ([Id])ON DELETE CASCADEGOALTER TABLE [dbo].[IdentityUserRoles] CHECK CONSTRAINT [FK_IdentityUserRoles_IdentityUsers_UserId]GO 資料表建立完成，即可以使用 Entity Framework 來建立 edmx 。 Identity 與 edmx 對應因為 edmx 產生了資料表對應的 Class ，但是 Identity 不知道對應哪個，所以透過 partial class 繼承 IUser 與 IRole 123456789101112131415161718192021222324252627/// &lt;summary&gt;/// edmx IdentityUser 資料表類別對應 Identity 套件的使用者資料/// &lt;/summary&gt;/// &lt;seealso cref="int" /&gt;public partial class IdentityUser: IUser&lt;int&gt;&#123; /// &lt;summary&gt; /// 非同步產生使用者驗證 /// &lt;/summary&gt; /// &lt;param name="manager"&gt;Identity 的 UserManager&lt;/param&gt; /// &lt;returns&gt;Task&amp;lt;ClaimsIdentity&amp;gt;.&lt;/returns&gt; public async Task&lt;ClaimsIdentity&gt; GenerateUserIdentityAsync(UserManager&lt;IdentityUser, int&gt; manager) &#123; // Note the authenticationType must match the one defined in CookieAuthenticationOptions.AuthenticationType var userIdentity = await manager.CreateIdentityAsync(this, DefaultAuthenticationTypes.ApplicationCookie); // Add custom user claims here return userIdentity; &#125;&#125;/// &lt;summary&gt;/// edmx IdentityRole 資料表類別對應 Identity 套件的角色資料/// &lt;/summary&gt;/// &lt;seealso cref="int" /&gt;public partial class IdentityRole : IRole&lt;int&gt;&#123;&#125; 接著必須對以下這些介面進行實作，主要是需要指定 DbContext IQueryableUserStore&lt;IdentityUser, int&gt; IUserPasswordStore&lt;IdentityUser, int&gt; IUserLoginStore&lt;IdentityUser, int&gt; IUserClaimStore&lt;IdentityUser, int&gt; IUserRoleStore&lt;IdentityUser, int&gt; IUserSecurityStampStore&lt;IdentityUser, int&gt; IUserEmailStore&lt;IdentityUser, int&gt; IUserPhoneNumberStore&lt;IdentityUser, int&gt; IUserTwoFactorStore&lt;IdentityUser, int&gt; IUserLockoutStore&lt;IdentityUser, int&gt; IQueryableRoleStore&lt;IdentityRole, int&gt; 直接建立 UserSotre Class 與 RoleStore Class 來實作；以下為 UserStore Classpublic class UserStore : IQueryableUserStore&lt;IdentityUser, int&gt;, IUserPasswordStore&lt;IdentityUser, int&gt;, IUserLoginStore&lt;IdentityUser, int&gt;, IUserClaimStore&lt;IdentityUser, int&gt;, IUserRoleStore&lt;IdentityUser, int&gt;, IUserSecurityStampStore&lt;IdentityUser, int&gt;, IUserEmailStore&lt;IdentityUser, int&gt;, IUserPhoneNumberStore&lt;IdentityUser, int&gt;, IUserTwoFactorStore&lt;IdentityUser, int&gt;, IUserLockoutStore&lt;IdentityUser, int&gt;&#123; /// &lt;summary&gt; /// The database /// &lt;/summary&gt; private readonly DataEntities db; /// &lt;summary&gt; /// Initializes a new instance of the &lt;see cref="UserStore"/&gt; class. /// &lt;/summary&gt; /// &lt;param name="db"&gt;The database.&lt;/param&gt; /// &lt;exception cref="ArgumentNullException"&gt;db&lt;/exception&gt; public UserStore(DataEntities db) &#123; this.db = db ?? throw new ArgumentNullException(nameof(db)); &#125; #region -- IQueryableUserStore&lt;IdentityUser, int&gt; -- /// &lt;inheritdoc /&gt; /// &lt;summary&gt; /// IQueryable users /// &lt;/summary&gt; /// &lt;value&gt;The users.&lt;/value&gt; public IQueryable&lt;IdentityUser&gt; Users =&gt; this.db.IdentityUsers; #endregion #region -- IUserStore&lt;IdentityUser, Key&gt; -- /// &lt;inheritdoc /&gt; /// &lt;summary&gt; /// Insert a new user /// &lt;/summary&gt; /// &lt;param name="user"&gt;The user.&lt;/param&gt; /// &lt;returns&gt;Task.&lt;/returns&gt; public Task CreateAsync(IdentityUser user) &#123; this.db.IdentityUsers.Add(user); return this.db.SaveChangesAsync(); &#125; /// &lt;inheritdoc /&gt; /// &lt;summary&gt; /// Delete a user /// &lt;/summary&gt; /// &lt;param name="user"&gt;The user.&lt;/param&gt; /// &lt;returns&gt;Task.&lt;/returns&gt; public Task DeleteAsync(IdentityUser user) &#123; this.db.IdentityUsers.Remove(user); return this.db.SaveChangesAsync(); &#125; /// &lt;summary&gt; /// Finds a user /// &lt;/summary&gt; /// &lt;param name="userId"&gt;The user identifier.&lt;/param&gt; /// &lt;returns&gt;Task&amp;lt;IdentityUser&amp;gt;.&lt;/returns&gt; public Task&lt;IdentityUser&gt; FindByIdAsync(int userId) &#123; return this.db.IdentityUsers .Include(u =&gt; u.IdentityUserLogins).Include(u =&gt; u.IdentityRoles).Include(u =&gt; u.IdentityUserClaims) .FirstOrDefaultAsync(u =&gt; u.Id.Equals(userId)); &#125; /// &lt;summary&gt; /// Find a user by name /// &lt;/summary&gt; /// &lt;param name="userName"&gt;Name of the user.&lt;/param&gt; /// &lt;returns&gt;Task&amp;lt;IdentityUser&amp;gt;.&lt;/returns&gt; public Task&lt;IdentityUser&gt; FindByNameAsync(string userName) &#123; return this.db.IdentityUsers .Include(u =&gt; u.IdentityUserLogins).Include(u =&gt; u.IdentityRoles).Include(u =&gt; u.IdentityUserClaims) .FirstOrDefaultAsync(u =&gt; u.UserName == userName); &#125; /// &lt;summary&gt; /// Update a user /// &lt;/summary&gt; /// &lt;param name="user"&gt;The user.&lt;/param&gt; /// &lt;returns&gt;Task.&lt;/returns&gt; public Task UpdateAsync(IdentityUser user) &#123; this.db.Entry&lt;IdentityUser&gt;(user).State = EntityState.Modified; return this.db.SaveChangesAsync(); &#125; #endregion #region -- IUserPasswordStore&lt;IdentityUser, Key&gt; -- /// &lt;summary&gt; /// Get the user password hash /// &lt;/summary&gt; /// &lt;param name="user"&gt;The user.&lt;/param&gt; /// &lt;returns&gt;Task&amp;lt;System.String&amp;gt;.&lt;/returns&gt; /// &lt;exception cref="ArgumentNullException"&gt;user&lt;/exception&gt; public Task&lt;string&gt; GetPasswordHashAsync(IdentityUser user) &#123; if (user == null) &#123; throw new ArgumentNullException(nameof(user)); &#125; return Task.FromResult(user.PasswordHash); &#125; /// &lt;summary&gt; /// Returns true if a user has a password set /// &lt;/summary&gt; /// &lt;param name="user"&gt;The user.&lt;/param&gt; /// &lt;returns&gt;Task&amp;lt;System.Boolean&amp;gt;.&lt;/returns&gt; public Task&lt;bool&gt; HasPasswordAsync(IdentityUser user) &#123; return Task.FromResult(user.PasswordHash != null); &#125; /// &lt;summary&gt; /// Set the user password hash /// &lt;/summary&gt; /// &lt;param name="user"&gt;The user.&lt;/param&gt; /// &lt;param name="passwordHash"&gt;The password hash.&lt;/param&gt; /// &lt;returns&gt;Task.&lt;/returns&gt; /// &lt;exception cref="ArgumentNullException"&gt;user&lt;/exception&gt; public Task SetPasswordHashAsync(IdentityUser user, string passwordHash) &#123; if (user == null) &#123; throw new ArgumentNullException(nameof(user)); &#125; user.PasswordHash = passwordHash; return Task.FromResult(0); &#125; #endregion #region -- IUserLoginStore&lt;IdentityUser, Key&gt; -- /// &lt;summary&gt; /// Adds a user login with the specified provider and key /// &lt;/summary&gt; /// &lt;param name="user"&gt;The user.&lt;/param&gt; /// &lt;param name="login"&gt;The login.&lt;/param&gt; /// &lt;returns&gt;Task.&lt;/returns&gt; /// &lt;exception cref="ArgumentNullException"&gt; /// user /// or /// login /// &lt;/exception&gt; public Task AddLoginAsync(IdentityUser user, UserLoginInfo login) &#123; if (user == null) &#123; throw new ArgumentNullException(nameof(user)); &#125; if (login == null) &#123; throw new ArgumentNullException(nameof(login)); &#125; var userLogin = Activator.CreateInstance&lt;IdentityUserLogin&gt;(); userLogin.UserId = user.Id; userLogin.LoginProvider = login.LoginProvider; userLogin.ProviderKey = login.ProviderKey; user.IdentityUserLogins.Add(userLogin); return Task.FromResult(0); &#125; /// &lt;summary&gt; /// find as an asynchronous operation. /// &lt;/summary&gt; /// &lt;param name="login"&gt;The login.&lt;/param&gt; /// &lt;returns&gt;Task&amp;lt;IdentityUser&amp;gt;.&lt;/returns&gt; /// &lt;exception cref="ArgumentNullException"&gt;login&lt;/exception&gt; public async Task&lt;IdentityUser&gt; FindAsync(UserLoginInfo login) &#123; if (login == null) &#123; throw new ArgumentNullException(nameof(login)); &#125; var provider = login.LoginProvider; var key = login.ProviderKey; var userLogin = await this.db.IdentityUserLogins.FirstOrDefaultAsync(l =&gt; l.LoginProvider == provider &amp;&amp; l.ProviderKey == key); if (userLogin == null) &#123; return default(IdentityUser); &#125; return await this.db.IdentityUsers .Include(u =&gt; u.IdentityUserLogins).Include(u =&gt; u.IdentityRoles).Include(u =&gt; u.IdentityUserClaims) .FirstOrDefaultAsync(u =&gt; u.Id.Equals(userLogin.UserId)); &#125; /// &lt;summary&gt; /// Returns the linked accounts for this user /// &lt;/summary&gt; /// &lt;param name="user"&gt;The user.&lt;/param&gt; /// &lt;returns&gt;Task&amp;lt;IList&amp;lt;UserLoginInfo&amp;gt;&amp;gt;.&lt;/returns&gt; /// &lt;exception cref="ArgumentNullException"&gt;user&lt;/exception&gt; public Task&lt;IList&lt;UserLoginInfo&gt;&gt; GetLoginsAsync(IdentityUser user) &#123; if (user == null) &#123; throw new ArgumentNullException(nameof(user)); &#125; return Task.FromResult&lt;IList&lt;UserLoginInfo&gt;&gt;(user.IdentityUserLogins.Select(l =&gt; new UserLoginInfo(l.LoginProvider, l.ProviderKey)).ToList()); &#125; /// &lt;summary&gt; /// Removes the user login with the specified combination if it exists /// &lt;/summary&gt; /// &lt;param name="user"&gt;The user.&lt;/param&gt; /// &lt;param name="login"&gt;The login.&lt;/param&gt; /// &lt;returns&gt;Task.&lt;/returns&gt; /// &lt;exception cref="ArgumentNullException"&gt; /// user /// or /// login /// &lt;/exception&gt; public Task RemoveLoginAsync(IdentityUser user, UserLoginInfo login) &#123; if (user == null) &#123; throw new ArgumentNullException(nameof(user)); &#125; if (login == null) &#123; throw new ArgumentNullException(nameof(login)); &#125; var provider = login.LoginProvider; var key = login.ProviderKey; var item = user.IdentityUserLogins.SingleOrDefault(l =&gt; l.LoginProvider == provider &amp;&amp; l.ProviderKey == key); if (item != null) &#123; user.IdentityUserLogins.Remove(item); &#125; return Task.FromResult(0); &#125; #endregion #region -- IUserClaimStore&lt;IdentityUser, int&gt; -- /// &lt;summary&gt; /// Add a new user claim /// &lt;/summary&gt; /// &lt;param name="user"&gt;The user.&lt;/param&gt; /// &lt;param name="claim"&gt;The claim.&lt;/param&gt; /// &lt;returns&gt;Task.&lt;/returns&gt; /// &lt;exception cref="System.ArgumentNullException"&gt; /// user /// or /// claim /// &lt;/exception&gt; public Task AddClaimAsync(IdentityUser user, Claim claim) &#123; if (user == null) &#123; throw new ArgumentNullException(nameof(user)); &#125; if (claim == null) &#123; throw new ArgumentNullException(nameof(claim)); &#125; var item = Activator.CreateInstance&lt;IdentityUserClaim&gt;(); item.UserId = user.Id; item.ClaimType = claim.Type; item.ClaimValue = claim.Value; user.IdentityUserClaims.Add(item); return Task.FromResult(0); &#125; /// &lt;summary&gt; /// Returns the claims for the user with the issuer set /// &lt;/summary&gt; /// &lt;param name="user"&gt;The user.&lt;/param&gt; /// &lt;returns&gt;Task&amp;lt;IList&amp;lt;Claim&amp;gt;&amp;gt;.&lt;/returns&gt; /// &lt;exception cref="ArgumentNullException"&gt;user&lt;/exception&gt; public Task&lt;IList&lt;Claim&gt;&gt; GetClaimsAsync(IdentityUser user) &#123; if (user == null) &#123; throw new ArgumentNullException(nameof(user)); &#125; return Task.FromResult&lt;IList&lt;Claim&gt;&gt;(user.IdentityUserClaims.Select(c =&gt; new Claim(c.ClaimType, c.ClaimValue)).ToList()); &#125; /// &lt;summary&gt; /// Remove a user claim /// &lt;/summary&gt; /// &lt;param name="user"&gt;The user.&lt;/param&gt; /// &lt;param name="claim"&gt;The claim.&lt;/param&gt; /// &lt;returns&gt;Task.&lt;/returns&gt; /// &lt;exception cref="ArgumentNullException"&gt; /// user /// or /// claim /// &lt;/exception&gt; public Task RemoveClaimAsync(IdentityUser user, Claim claim) &#123; if (user == null) &#123; throw new ArgumentNullException(nameof(user)); &#125; if (claim == null) &#123; throw new ArgumentNullException(nameof(claim)); &#125; foreach (var item in user.IdentityUserClaims.Where(uc =&gt; uc.ClaimValue == claim.Value &amp;&amp; uc.ClaimType == claim.Type).ToList()) &#123; user.IdentityUserClaims.Remove(item); &#125; foreach (var item in this.db.IdentityUserClaims.Where(uc =&gt; uc.UserId.Equals(user.Id) &amp;&amp; uc.ClaimValue == claim.Value &amp;&amp; uc.ClaimType == claim.Type).ToList()) &#123; this.db.IdentityUserClaims.Remove(item); &#125; return Task.FromResult(0); &#125; #endregion #region -- IUserRoleStore&lt;IdentityUser, int&gt; -- /// &lt;summary&gt; /// Adds a user to a role /// &lt;/summary&gt; /// &lt;param name="user"&gt;The user.&lt;/param&gt; /// &lt;param name="roleName"&gt;Name of the role.&lt;/param&gt; /// &lt;returns&gt;Task.&lt;/returns&gt; /// &lt;exception cref="ArgumentNullException"&gt;user&lt;/exception&gt; /// &lt;exception cref="ArgumentException"&gt;roleName&lt;/exception&gt; /// &lt;exception cref="InvalidOperationException"&gt;&lt;/exception&gt; public Task AddToRoleAsync(IdentityUser user, string roleName) &#123; if (user == null) &#123; throw new ArgumentNullException(nameof(user)); &#125; if (string.IsNullOrWhiteSpace(roleName)) &#123; throw new ArgumentException(WarningStr.ValueCannotBeNullOrEmpty, nameof(roleName)); &#125; var userRole = this.db.IdentityRoles.SingleOrDefault(r =&gt; r.Name == roleName); if (userRole == null) &#123; throw new InvalidOperationException(string.Format(CultureInfo.CurrentCulture, WarningStr.RoleNotFound, new object[] &#123; roleName &#125;)); &#125; user.IdentityRoles.Add(userRole); return Task.FromResult(0); &#125; /// &lt;summary&gt; /// Returns the roles for this user /// &lt;/summary&gt; /// &lt;param name="user"&gt;The user.&lt;/param&gt; /// &lt;returns&gt;Task&amp;lt;IList&amp;lt;System.String&amp;gt;&amp;gt;.&lt;/returns&gt; /// &lt;exception cref="ArgumentNullException"&gt;user&lt;/exception&gt; public Task&lt;IList&lt;string&gt;&gt; GetRolesAsync(IdentityUser user) &#123; if (user == null) &#123; throw new ArgumentNullException(nameof(user)); &#125; return Task.FromResult&lt;IList&lt;string&gt;&gt;(user.IdentityRoles.Join(this.db.IdentityRoles, ur =&gt; ur.Id, r =&gt; r.Id, (ur, r) =&gt; r.Name).ToList()); &#125; /// &lt;summary&gt; /// Returns true if a user is in the role /// &lt;/summary&gt; /// &lt;param name="user"&gt;The user.&lt;/param&gt; /// &lt;param name="roleName"&gt;Name of the role.&lt;/param&gt; /// &lt;returns&gt;Task&amp;lt;System.Boolean&amp;gt;.&lt;/returns&gt; /// &lt;exception cref="ArgumentNullException"&gt;user&lt;/exception&gt; /// &lt;exception cref="ArgumentException"&gt;roleName&lt;/exception&gt; public Task&lt;bool&gt; IsInRoleAsync(IdentityUser user, string roleName) &#123; if (user == null) &#123; throw new ArgumentNullException(nameof(user)); &#125; if (string.IsNullOrWhiteSpace(roleName)) &#123; throw new ArgumentException(WarningStr.ValueCannotBeNullOrEmpty, nameof(roleName)); &#125; return Task.FromResult&lt;bool&gt;( this.db.IdentityRoles.Any(r =&gt; r.Name == roleName &amp;&amp; r.IdentityUsers.Any(u =&gt; u.Id.Equals(user.Id)))); &#125; /// &lt;summary&gt; /// Removes the role for the user /// &lt;/summary&gt; /// &lt;param name="user"&gt;The user.&lt;/param&gt; /// &lt;param name="roleName"&gt;Name of the role.&lt;/param&gt; /// &lt;returns&gt;Task.&lt;/returns&gt; /// &lt;exception cref="ArgumentNullException"&gt;user&lt;/exception&gt; /// &lt;exception cref="ArgumentException"&gt;roleName&lt;/exception&gt; public Task RemoveFromRoleAsync(IdentityUser user, string roleName) &#123; if (user == null) &#123; throw new ArgumentNullException(nameof(user)); &#125; if (string.IsNullOrWhiteSpace(roleName)) &#123; throw new ArgumentException(WarningStr.ValueCannotBeNullOrEmpty, nameof(roleName)); &#125; var userRole = user.IdentityRoles.SingleOrDefault(r =&gt; r.Name == roleName); if (userRole != null) &#123; user.IdentityRoles.Remove(userRole); &#125; return Task.FromResult(0); &#125; #endregion #region -- IUserSecurityStampStore&lt;IdentityUser, int&gt; -- /// &lt;summary&gt; /// Get the user security stamp /// &lt;/summary&gt; /// &lt;param name="user"&gt;The user.&lt;/param&gt; /// &lt;returns&gt;Task&amp;lt;System.String&amp;gt;.&lt;/returns&gt; /// &lt;exception cref="ArgumentNullException"&gt;user&lt;/exception&gt; public Task&lt;string&gt; GetSecurityStampAsync(IdentityUser user) &#123; if (user == null) &#123; throw new ArgumentNullException(nameof(user)); &#125; return Task.FromResult(user.SecurityStamp); &#125; /// &lt;summary&gt; /// Set the security stamp for the user /// &lt;/summary&gt; /// &lt;param name="user"&gt;The user.&lt;/param&gt; /// &lt;param name="stamp"&gt;The stamp.&lt;/param&gt; /// &lt;returns&gt;Task.&lt;/returns&gt; /// &lt;exception cref="ArgumentNullException"&gt;user&lt;/exception&gt; public Task SetSecurityStampAsync(IdentityUser user, string stamp) &#123; if (user == null) &#123; throw new ArgumentNullException(nameof(user)); &#125; user.SecurityStamp = stamp; return Task.FromResult(0); &#125; #endregion #region -- IUserEmailStore&lt;IdentityUser, int&gt; -- /// &lt;summary&gt; /// Returns the user associated with this email /// &lt;/summary&gt; /// &lt;param name="email"&gt;The email.&lt;/param&gt; /// &lt;returns&gt;Task&amp;lt;IdentityUser&amp;gt;.&lt;/returns&gt; public Task&lt;IdentityUser&gt; FindByEmailAsync(string email) &#123; return this.db.IdentityUsers .Include(u =&gt; u.IdentityUserLogins).Include(u =&gt; u.IdentityRoles).Include(u =&gt; u.IdentityUserClaims) .FirstOrDefaultAsync(u =&gt; u.Email == email); &#125; /// &lt;summary&gt; /// Get the user email /// &lt;/summary&gt; /// &lt;param name="user"&gt;The user.&lt;/param&gt; /// &lt;returns&gt;Task&amp;lt;System.String&amp;gt;.&lt;/returns&gt; /// &lt;exception cref="ArgumentNullException"&gt;user&lt;/exception&gt; public Task&lt;string&gt; GetEmailAsync(IdentityUser user) &#123; if (user == null) &#123; throw new ArgumentNullException(nameof(user)); &#125; return Task.FromResult(user.Email); &#125; /// &lt;summary&gt; /// Returns true if the user email is confirmed /// &lt;/summary&gt; /// &lt;param name="user"&gt;The user.&lt;/param&gt; /// &lt;returns&gt;Task&amp;lt;System.Boolean&amp;gt;.&lt;/returns&gt; /// &lt;exception cref="ArgumentNullException"&gt;user&lt;/exception&gt; public Task&lt;bool&gt; GetEmailConfirmedAsync(IdentityUser user) &#123; if (user == null) &#123; throw new ArgumentNullException(nameof(user)); &#125; return Task.FromResult(user.EmailConfirmed); &#125; /// &lt;summary&gt; /// Set the user email /// &lt;/summary&gt; /// &lt;param name="user"&gt;The user.&lt;/param&gt; /// &lt;param name="email"&gt;The email.&lt;/param&gt; /// &lt;returns&gt;Task.&lt;/returns&gt; /// &lt;exception cref="ArgumentNullException"&gt;user&lt;/exception&gt; public Task SetEmailAsync(IdentityUser user, string email) &#123; if (user == null) &#123; throw new ArgumentNullException(nameof(user)); &#125; user.Email = email; return Task.FromResult(0); &#125; /// &lt;summary&gt; /// Sets whether the user email is confirmed /// &lt;/summary&gt; /// &lt;param name="user"&gt;The user.&lt;/param&gt; /// &lt;param name="confirmed"&gt;if set to &lt;c&gt;true&lt;/c&gt; [confirmed].&lt;/param&gt; /// &lt;returns&gt;Task.&lt;/returns&gt; /// &lt;exception cref="ArgumentNullException"&gt;user&lt;/exception&gt; public Task SetEmailConfirmedAsync(IdentityUser user, bool confirmed) &#123; if (user == null) &#123; throw new ArgumentNullException(nameof(user)); &#125; user.EmailConfirmed = confirmed; return Task.FromResult(0); &#125; #endregion #region -- IUserPhoneNumberStore&lt;IdentityUser, int&gt; -- /// &lt;summary&gt; /// Get the user phone number /// &lt;/summary&gt; /// &lt;param name="user"&gt;The user.&lt;/param&gt; /// &lt;returns&gt;Task&amp;lt;System.String&amp;gt;.&lt;/returns&gt; /// &lt;exception cref="ArgumentNullException"&gt;user&lt;/exception&gt; public Task&lt;string&gt; GetPhoneNumberAsync(IdentityUser user) &#123; if (user == null) &#123; throw new ArgumentNullException(nameof(user)); &#125; return Task.FromResult(user.PhoneNumber); &#125; /// &lt;summary&gt; /// Returns true if the user phone number is confirmed /// &lt;/summary&gt; /// &lt;param name="user"&gt;The user.&lt;/param&gt; /// &lt;returns&gt;Task&amp;lt;System.Boolean&amp;gt;.&lt;/returns&gt; /// &lt;exception cref="ArgumentNullException"&gt;user&lt;/exception&gt; public Task&lt;bool&gt; GetPhoneNumberConfirmedAsync(IdentityUser user) &#123; if (user == null) &#123; throw new ArgumentNullException(nameof(user)); &#125; return Task.FromResult(user.PhoneNumberConfirmed); &#125; /// &lt;summary&gt; /// Set the user's phone number /// &lt;/summary&gt; /// &lt;param name="user"&gt;The user.&lt;/param&gt; /// &lt;param name="phoneNumber"&gt;The phone number.&lt;/param&gt; /// &lt;returns&gt;Task.&lt;/returns&gt; /// &lt;exception cref="ArgumentNullException"&gt;user&lt;/exception&gt; public Task SetPhoneNumberAsync(IdentityUser user, string phoneNumber) &#123; if (user == null) &#123; throw new ArgumentNullException(nameof(user)); &#125; user.PhoneNumber = phoneNumber; return Task.FromResult(0); &#125; /// &lt;summary&gt; /// Sets whether the user phone number is confirmed /// &lt;/summary&gt; /// &lt;param name="user"&gt;The user.&lt;/param&gt; /// &lt;param name="confirmed"&gt;if set to &lt;c&gt;true&lt;/c&gt; [confirmed].&lt;/param&gt; /// &lt;returns&gt;Task.&lt;/returns&gt; /// &lt;exception cref="ArgumentNullException"&gt;user&lt;/exception&gt; public Task SetPhoneNumberConfirmedAsync(IdentityUser user, bool confirmed) &#123; if (user == null) &#123; throw new ArgumentNullException(nameof(user)); &#125; user.PhoneNumberConfirmed = confirmed; return Task.FromResult(0); &#125; #endregion #region -- IUserTwoFactorStore&lt;IdentityUser, int&gt; -- /// &lt;summary&gt; /// Returns whether two factor authentication is enabled for the user /// &lt;/summary&gt; /// &lt;param name="user"&gt;The user.&lt;/param&gt; /// &lt;returns&gt;Task&amp;lt;System.Boolean&amp;gt;.&lt;/returns&gt; /// &lt;exception cref="ArgumentNullException"&gt;user&lt;/exception&gt; public Task&lt;bool&gt; GetTwoFactorEnabledAsync(IdentityUser user) &#123; if (user == null) &#123; throw new ArgumentNullException(nameof(user)); &#125; return Task.FromResult(user.TwoFactorEnabled); &#125; /// &lt;summary&gt; /// Sets whether two factor authentication is enabled for the user /// &lt;/summary&gt; /// &lt;param name="user"&gt;The user.&lt;/param&gt; /// &lt;param name="enabled"&gt;if set to &lt;c&gt;true&lt;/c&gt; [enabled].&lt;/param&gt; /// &lt;returns&gt;Task.&lt;/returns&gt; /// &lt;exception cref="ArgumentNullException"&gt;user&lt;/exception&gt; public Task SetTwoFactorEnabledAsync(IdentityUser user, bool enabled) &#123; if (user == null) &#123; throw new ArgumentNullException(nameof(user)); &#125; user.TwoFactorEnabled = enabled; return Task.FromResult(0); &#125; #endregion #region -- IUserLockoutStore&lt;IdentityUser, int&gt; -- /// &lt;summary&gt; /// Returns the current number of failed access attempts. This number usually will be reset whenever the password is /// verified or the account is locked out. /// &lt;/summary&gt; /// &lt;param name="user"&gt;The user.&lt;/param&gt; /// &lt;returns&gt;Task&amp;lt;System.Int32&amp;gt;.&lt;/returns&gt; /// &lt;exception cref="ArgumentNullException"&gt;user&lt;/exception&gt; public Task&lt;int&gt; GetAccessFailedCountAsync(IdentityUser user) &#123; if (user == null) &#123; throw new ArgumentNullException(nameof(user)); &#125; return Task.FromResult(user.AccessFailedCount); &#125; /// &lt;summary&gt; /// Returns whether the user can be locked out. /// &lt;/summary&gt; /// &lt;param name="user"&gt;The user.&lt;/param&gt; /// &lt;returns&gt;Task&amp;lt;System.Boolean&amp;gt;.&lt;/returns&gt; /// &lt;exception cref="ArgumentNullException"&gt;user&lt;/exception&gt; public Task&lt;bool&gt; GetLockoutEnabledAsync(IdentityUser user) &#123; if (user == null) &#123; throw new ArgumentNullException(nameof(user)); &#125; return Task.FromResult(user.LockoutEnabled); &#125; /// &lt;summary&gt; /// Returns the DateTimeOffset that represents the end of a user's lockout, any time in the past should be considered /// not locked out. /// &lt;/summary&gt; /// &lt;param name="user"&gt;The user.&lt;/param&gt; /// &lt;returns&gt;Task&amp;lt;DateTimeOffset&amp;gt;.&lt;/returns&gt; /// &lt;exception cref="ArgumentNullException"&gt;user&lt;/exception&gt; public Task&lt;DateTimeOffset&gt; GetLockoutEndDateAsync(IdentityUser user) &#123; if (user == null) &#123; throw new ArgumentNullException(nameof(user)); &#125; return Task.FromResult( user.LockoutEndDateUtc.HasValue ? new DateTimeOffset(DateTime.SpecifyKind(user.LockoutEndDateUtc.Value, DateTimeKind.Utc)) : new DateTimeOffset()); &#125; /// &lt;summary&gt; /// Used to record when an attempt to access the user has failed /// &lt;/summary&gt; /// &lt;param name="user"&gt;The user.&lt;/param&gt; /// &lt;returns&gt;Task&amp;lt;System.Int32&amp;gt;.&lt;/returns&gt; /// &lt;exception cref="ArgumentNullException"&gt;user&lt;/exception&gt; public Task&lt;int&gt; IncrementAccessFailedCountAsync(IdentityUser user) &#123; if (user == null) &#123; throw new ArgumentNullException(nameof(user)); &#125; user.AccessFailedCount++; return Task.FromResult(user.AccessFailedCount); &#125; /// &lt;summary&gt; /// Used to reset the access failed count, typically after the account is successfully accessed /// &lt;/summary&gt; /// &lt;param name="user"&gt;The user.&lt;/param&gt; /// &lt;returns&gt;Task.&lt;/returns&gt; /// &lt;exception cref="ArgumentNullException"&gt;user&lt;/exception&gt; public Task ResetAccessFailedCountAsync(IdentityUser user) &#123; if (user == null) &#123; throw new ArgumentNullException(nameof(user)); &#125; user.AccessFailedCount = 0; return Task.FromResult(0); &#125; /// &lt;summary&gt; /// Sets whether the user can be locked out. /// &lt;/summary&gt; /// &lt;param name="user"&gt;The user.&lt;/param&gt; /// &lt;param name="enabled"&gt;if set to &lt;c&gt;true&lt;/c&gt; [enabled].&lt;/param&gt; /// &lt;returns&gt;Task.&lt;/returns&gt; /// &lt;exception cref="ArgumentNullException"&gt;user&lt;/exception&gt; public Task SetLockoutEnabledAsync(IdentityUser user, bool enabled) &#123; if (user == null) &#123; throw new ArgumentNullException(nameof(user)); &#125; user.LockoutEnabled = enabled; return Task.FromResult(0); &#125; /// &lt;summary&gt; /// Locks a user out until the specified end date (set to a past date, to unlock a user) /// &lt;/summary&gt; /// &lt;param name="user"&gt;The user.&lt;/param&gt; /// &lt;param name="lockoutEnd"&gt;The lockout end.&lt;/param&gt; /// &lt;returns&gt;Task.&lt;/returns&gt; /// &lt;exception cref="ArgumentNullException"&gt;user&lt;/exception&gt; public Task SetLockoutEndDateAsync(IdentityUser user, DateTimeOffset lockoutEnd) &#123; if (user == null) &#123; throw new ArgumentNullException(nameof(user)); &#125; user.LockoutEndDateUtc = lockoutEnd == DateTimeOffset.MinValue ? null : new DateTime?(lockoutEnd.UtcDateTime); return Task.FromResult(0); &#125; #endregion #region -- IDisposable -- /// &lt;summary&gt; /// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. /// &lt;/summary&gt; public void Dispose() &#123; this.Dispose(true); GC.SuppressFinalize(this); &#125; /// &lt;summary&gt; /// Releases unmanaged and - optionally - managed resources. /// &lt;/summary&gt; /// &lt;param name="disposing"&gt;&lt;c&gt;true&lt;/c&gt; to release both managed and unmanaged resources; &lt;c&gt;false&lt;/c&gt; to release only unmanaged resources.&lt;/param&gt; protected virtual void Dispose(bool disposing) &#123; if (disposing) &#123; db?.Dispose(); &#125; &#125; #endregion&#125; 以下為 RoleStore Class 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132/// &lt;summary&gt;/// Class RoleStore./// &lt;/summary&gt;public class RoleStore : IQueryableRoleStore&lt;IdentityRole, int&gt;&#123; /// &lt;summary&gt; /// The database /// &lt;/summary&gt; private readonly DataEntities db; /// &lt;summary&gt; /// Initializes a new instance of the &lt;see cref="RoleStore"/&gt; class. /// &lt;/summary&gt; /// &lt;param name="db"&gt;The database.&lt;/param&gt; public RoleStore(DataEntities db) &#123; this.db = db; &#125; #region -- IQueryableRoleStore&lt;UserRole, TKey&gt; -- /// &lt;summary&gt; /// IQueryable Roles /// &lt;/summary&gt; /// &lt;value&gt;The roles.&lt;/value&gt; public IQueryable&lt;IdentityRole&gt; Roles &#123; get &#123; return this.db.IdentityRoles; &#125; &#125; #endregion #region -- IRoleStore&lt;UserRole, TKey&gt; -- /// &lt;summary&gt; /// Create a new role /// &lt;/summary&gt; /// &lt;param name="role"&gt;The role.&lt;/param&gt; /// &lt;returns&gt;Task.&lt;/returns&gt; /// &lt;exception cref="ArgumentNullException"&gt;role&lt;/exception&gt; public virtual Task CreateAsync(IdentityRole role) &#123; if (role == null) &#123; throw new ArgumentNullException(nameof(role)); &#125; this.db.IdentityRoles.Add(role); return this.db.SaveChangesAsync(); &#125; /// &lt;summary&gt; /// Delete a role /// &lt;/summary&gt; /// &lt;param name="role"&gt;The role.&lt;/param&gt; /// &lt;returns&gt;Task.&lt;/returns&gt; /// &lt;exception cref="ArgumentNullException"&gt;role&lt;/exception&gt; public Task DeleteAsync(IdentityRole role) &#123; if (role == null) &#123; throw new ArgumentNullException(nameof(role)); &#125; this.db.IdentityRoles.Remove(role); return this.db.SaveChangesAsync(); &#125; /// &lt;summary&gt; /// Find a role by id /// &lt;/summary&gt; /// &lt;param name="roleId"&gt;The role identifier.&lt;/param&gt; /// &lt;returns&gt;Task&amp;lt;IdentityRole&amp;gt;.&lt;/returns&gt; public Task&lt;IdentityRole&gt; FindByIdAsync(int roleId) &#123; return this.db.IdentityRoles.FindAsync(new[] &#123; roleId &#125;); &#125; /// &lt;summary&gt; /// Find a role by name /// &lt;/summary&gt; /// &lt;param name="roleName"&gt;Name of the role.&lt;/param&gt; /// &lt;returns&gt;Task&amp;lt;IdentityRole&amp;gt;.&lt;/returns&gt; public Task&lt;IdentityRole&gt; FindByNameAsync(string roleName) &#123; return this.db.IdentityRoles.FirstOrDefaultAsync(r =&gt; r.Name == roleName); &#125; /// &lt;summary&gt; /// Update a role /// &lt;/summary&gt; /// &lt;param name="role"&gt;The role.&lt;/param&gt; /// &lt;returns&gt;Task.&lt;/returns&gt; /// &lt;exception cref="ArgumentNullException"&gt;role&lt;/exception&gt; public Task UpdateAsync(IdentityRole role) &#123; if (role == null) &#123; throw new ArgumentNullException(nameof(role)); &#125; this.db.Entry(role).State = EntityState.Modified; return this.db.SaveChangesAsync(); &#125; #endregion #region -- IDisposable -- /// &lt;inheritdoc /&gt; /// &lt;summary&gt; /// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. /// &lt;/summary&gt; public void Dispose() &#123; this.Dispose(true); GC.SuppressFinalize(this); &#125; /// &lt;summary&gt; /// Releases unmanaged and - optionally - managed resources. /// &lt;/summary&gt; /// &lt;param name="disposing"&gt;&lt;c&gt;true&lt;/c&gt; to release both managed and unmanaged resources; &lt;c&gt;false&lt;/c&gt; to release only unmanaged resources.&lt;/param&gt; protected virtual void Dispose(bool disposing) &#123; if (disposing) &#123; db?.Dispose(); &#125; &#125; #endregion&#125; Identity Configuration對應完成後，在 Startup.Auth 檔案進行註冊即可12345678910111213141516public partial class Startup&#123; /// &lt;summary&gt; /// Configures the authentication. /// &lt;/summary&gt; /// &lt;param name="app"&gt;The application.&lt;/param&gt; public void ConfigureAuth(IAppBuilder app) &#123; // Configure the db context, user manager and role manager to use a single instance per request app.CreatePerOwinContext(()=&gt; new DataEntities()); app.CreatePerOwinContext&lt;ApplicationUserManager&gt;(ApplicationUserManager.Create); app.CreatePerOwinContext&lt;ApplicationRoleManager&gt;(ApplicationRoleManager.Create); app.CreatePerOwinContext&lt;ApplicationSignInManager&gt;(ApplicationSignInManager.Create); // ... 省略以下 &#125;&#125; 接下來的步驟就跟一般 Code First 相同，只是手動安裝套件的話，這些 Controller 與 IdentityConfig 都需要自行實作，可以參考此次範例檔案。 參考資料 kriasoft AspNet.Identity]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>Asp.Net MVC</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SSMS 2016 啟用黑色主題]]></title>
    <url>%2F2017%2F08%2F08%2Fenable-SSMS-dark-theme%2F</url>
    <content type="text"><![CDATA[許多開發工具介面都提供了黑色主題介面， SSMS (SQL Server Management Studio) 也提供了主題選擇，但是沒有黑色主題的選項。其實微軟已經在實驗提供這功能了，所以可以按照以下的方法開啟這未開放的功能喔。 先在以下路徑找尋 ssms.pkgundef 這檔案，然後使用記事本(或是其他文字編輯器)開啟，記得使用管理者權限。1C:\Program Files (x86)\Microsoft SQL Server\130\Tools\Binn\ManagementStudio 開啟後，搜尋 Remove Dark theme 這個段落，然後使用 // 進行註解，如以下段落： 123456789101112131415161718192021// Remove Dark theme// [$RootKey$\Themes\&#123;1ded0138-47ce-435e-84ef-9ec1f439b749&#125;]// [$RootKey$\AD7Metrics\PortSupplier\&#123;4103F338-2255-40C0-ACF5-7380E2BEA13D&#125;]// [$RootKey$\External Tools\Error Loo&amp;kup]// [$RootKey$\LightSwitch]// [$RootKey$\Debugger\LaunchHooks110]// [$RootKey$\DiagnosticsHub]// [$RootKey$\FeatureFlags]// [$RootKey$\VB Editor]// [$RootKey$\Languages\CodeExpansions\C/C++]// [$RootKey$\Languages\CodeExpansions\JavaScript]// [$RootKey$\Text Editor\C/C++]// [$RootKey$\Text Editor\CSharp]// [$RootKey$\Text Editor\Disassembly]// [$RootKey$\Text Editor\ENC]// [$RootKey$\Text Editor\JavaScript]// [$RootKey$\Text Editor\Memory]// [$RootKey$\Text Editor\Register]// [$RootKey$\Text Editor\ResJSON]// [$RootKey$\Text Editor\TypeScript]// [$RootKey$\Text Editor\VBScript] 上述檔案修改存檔後，直接開啟 SSMS ，按照工具-&gt;選項-&gt;環境，設定色彩佈景主題為深色，這樣即可 由於預設的關鍵字顏色跟黑色背景實在看得吃力，所以我調整了一下顏色，然後字型也選擇我習慣的字形，變成以下這樣 參考資料 Enable “Dark” Theme in SQL Server Management Studio 2016]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>SQLServer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SSL for Free 申請步驟]]></title>
    <url>%2F2017%2F08%2F04%2FSSL-For-Free-step-by-step%2F</url>
    <content type="text"><![CDATA[之前看 Will 保哥的線上直播【申請 Let’s Encrypt 免費 SSL 憑證一次就上手】，最後也是使用 SSL For Free 作申請範例，以前申請這個得時候，不是使用保哥示範的驗證網域來做驗證，最近在測試一些系統的時候，申請使用網域驗證，在此做個紀錄。 要申請免費的 Domain Validated SSL (DV SSL)，先到 SSL For Free 首頁，填入欲申請的網域 接著選取 Manual Verification 以使用上傳檔案驗證網域，畫面會出現步驟說明以及 Manually Verify Domain 按鈕 按下上述的 Manually Verify Domain 按鈕，會出現上傳驗證檔案的教學步驟，要注意在完成檔案上傳到網站後且確認連結正常，才可以下載憑證，不然連續失敗的話，會暫時停止申請資格。 先下載驗證檔案 建立資料夾，資料夾名稱叫做 .well-know ，這名稱使用滑鼠右鍵會無法建立，會出現下圖警示；建立方式有兩個： 使用指令建立mkdir .well-know 滑鼠右鍵新增資料夾時，資料夾名稱命名的時候最後多加一個 . ，變成 .well-know. 這樣就可以建立了。 在 .well-know 資料夾內再度建立資料夾，資料夾名稱叫做 acme-challenge 將驗證檔案放到 acme-challenge 資料夾內 接著將資料夾 .well-know 放到申請的網站上，這邊會碰到一個問題，那就是 IIS 無法存取無附檔名連結，解決方式是如下設定 web.config1234567891011121314&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;configuration&gt; &lt;system.webServer&gt; &lt;validation validateIntegratedModeConfiguration="false" /&gt; &lt;staticContent&gt; &lt;mimeMap fileExtension="." mimeType="text/json" /&gt; &lt;mimeMap fileExtension="*" mimeType="text/plain" /&gt; &lt;/staticContent&gt; &lt;/system.webServer&gt; &lt;system.web&gt; &lt;authorization&gt; &lt;allow users="*" /&gt; &lt;/authorization&gt; &lt;/system.web&gt;&lt;/configuration&gt; 這時候回到如下的網頁畫面，這時候可以點擊 Download SSL Certificate 點下 Download SSL Certificate 後，網站開始產生憑證；之後說明此憑證只有 90 天的期限，時間到了之後可以重新申請； 另外會說明如何轉換憑證檔案格式，例如：IIS 需要 pfx 格式，可以透過 openssl 工具進行轉換(此工具 git 已經內建，請搜尋各自的 git 安裝路徑下usr&gt;bin即可找到 openssl )，然後設定憑證密碼即可。1openssl pkcs12 -export -out "certificate_combined.pfx" -inkey "private.key" -in "certificate.crt" -certfile ca_bundle.crt 轉換完之後，就可以安裝憑證了；憑證安裝教學在舊部落格寫過了，就不贅述了。 參考資料 保哥 申請 Let’s Encrypt 免費 SSL 憑證一次就上手 保哥 Let’s Encrypt 簡報]]></content>
      <tags>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Chrome 在版本 55 以上的變動編碼]]></title>
    <url>%2F2017%2F08%2F03%2Fchrome-v55-change-encoding%2F</url>
    <content type="text"><![CDATA[Google Chrome 從 55 版本之後就移除了改變編碼的選單；原本想說等一段時間應該還是會回復，不過現在都到了版本 60.0.3112.90 也沒回來；所以現在想要變動編碼的話，有幾個選擇： 更換瀏覽器其他瀏覽器有些還是可以變動編碼，例如： FireFox 裝 Google 擴充功能Set Character Encoding裝好後，直接在頁面點擊滑鼠右鍵即可看到選單]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>notes</tag>
        <tag>Chrome</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[在 IIS 中設定網站自動轉換 HTTPS]]></title>
    <url>%2F2017%2F08%2F02%2FIIS-http-rewrite-to-https%2F</url>
    <content type="text"><![CDATA[政府今年開始慢慢全面導入 HTTPS 安全連線了，因此這設定很常使用到，將這設定紀錄在此，方便一些朋友查看。 以下這方式是透過 IIS 伺服器的 URL Rewrite 來導向的，因此需要再 IIS 上擴充這模組，然後按照以下的 web.config 內容去修改，詳細的參數說明可以參照 Microsoft 說明 12345678910111213141516&lt;system.webServer&gt; &lt;rewrite&gt; &lt;rules&gt; &lt;rule name="HTTP to HTTPS redirect" stopProcessing="true"&gt; &lt;match url="(.*)" /&gt; &lt;conditions&gt; &lt;!--限制處理網址 避免 http header 攻擊 --&gt; &lt;add input="&#123;HTTP_HOST&#125;" pattern="(\.com\.tw|\.gov\.tw)$" /&gt; &lt;!--已經是 https 的不用處理 --&gt; &lt;add input="&#123;HTTPS&#125;" pattern="off" ignoreCase="true" /&gt; &lt;/conditions&gt; &lt;action type="Redirect" redirectType="Found" url="https://&#123;HTTP_HOST&#125;/&#123;R:1&#125;"/&gt; &lt;/rule&gt; &lt;/rules&gt; &lt;/rewrite&gt;&lt;/system.webServer&gt; 這設定方式只要是 IIS 應該都是一樣的，不管是雲端平台還是自己架設的伺服器都是如此喔。]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>IIS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ASP.Net MVC 5 中 Model 的 MetaData]]></title>
    <url>%2F2017%2F07%2F31%2Fnet-mvc-5-metadata%2F</url>
    <content type="text"><![CDATA[前一篇文章提到資料表的對應是自動產生，所以一般不會針對這些自動產生的檔案去做修改，因為當資料表有所異動，需要重新自動產生檔案的時候，這些修改就需要重新撰寫一次，萬一疏漏了就有可能出問題。MetaData 最常使用的是資料驗證，在資料進入資料庫前都會進行驗證，但是又不能再對應類別檔案上撰寫，這時候就可以使用 MetaData ；或是想手動去變動 T4 檔案也可以，這也是一個做法。 一樣使用範例來說明： 以 Northwind 的 OrderDetail 資料表的對應類別進行範例，先看產生的對應檔案 123456789public partial class Order_Details&#123; public int OrderID &#123; get; set; &#125; public int ProductID &#123; get; set; &#125; public decimal UnitPrice &#123; get; set; &#125; public short Quantity &#123; get; set; &#125; public float Discount &#123; get; set; &#125; public virtual Orders Orders &#123; get; set; &#125;&#125; 因為這些自動產生的對應檔案都是 partial class ，所以就可以建立一個相同對應類別的 partial class ，範例使用 DisplayName 進行示範。 123456789101112131415161718// 注意 namespace 必須跟 model 的相同// 相同 namespace 才能 partialnamespace ModelExt.Models&#123; [MetadataType(typeof(Order_DetailsMetadata))] public partial class Order_Details &#123; public class Order_DetailsMetadata &#123; [DisplayName("單價")] public decimal UnitPrice &#123; get; set; &#125; [DisplayName("數量")] public short Quantity &#123; get; set; &#125; [DisplayName("折扣")] public float Discount &#123; get; set; &#125; &#125; &#125;&#125; 參考資料 github 範例]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>Asp.Net MVC</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[.Net MVC 針對 Model 的 Extension Method]]></title>
    <url>%2F2017%2F07%2F31%2Faspnet-mvc-model-extension-method%2F</url>
    <content type="text"><![CDATA[在 Asp.Net MVC 中 ( MVC 5 ) ，一般都會使用 ORM 工具，最常見的是 Entity Framework ，所以資料表的對應類別是自動產生，不會再這些對應類別中增加方法 ( method ) ，這些類別都會盡量不去變動它，需要使用方法的話，會使用 extension method 。以下使用 Northwind 資料庫來操作範例： 情境針對 OrderDetail 將單價與數量計算，呈現總價格 建立 Model 對應主要使用 OrderDetail 資料表 使用範本產生 Controller 和 View 添加 ViewModel 123456789public class OrderDetailViewModel&#123; public int OrderID &#123; get; set; &#125; public int ProductID &#123; get; set; &#125; public decimal UnitPrice &#123; get; set; &#125; public short Quantity &#123; get; set; &#125; public float Discount &#123; get; set; &#125; public decimal TotalPrice &#123; get; set; &#125;&#125; 針對 OrderDetail model 建立 extension method 123456789public static class ModelExtMethod&#123; public static decimal TotalPrice(this Order_Details orderDetail) &#123; decimal result = 0; result = orderDetail.UnitPrice * orderDetail.Quantity; return result; &#125;&#125; 修改 controller此處僅修改 index 來做示範；另外這邊需要注意的是 LINQ 的使用 12345678910111213public ActionResult Index()&#123; var order_Details = db.Order_Details.ToList().Select(o=&gt; new OrderDetailViewModel() &#123; OrderID = o.OrderID, ProductID = o.ProductID, UnitPrice = o.UnitPrice, Quantity = o.Quantity, Discount = o.Discount, TotalPrice = o.TotalPrice() &#125;); return View(order_Details);&#125; 參考資料 Github 範例程式]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>Asp.Net MVC</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[三層結構與 Asp.Net MVC 的簡介]]></title>
    <url>%2F2017%2F07%2F29%2F3-tier-and-mvc-introduction%2F</url>
    <content type="text"><![CDATA[三層式架構 ( Three-Tier ) 是很常見的架構，可以應用在實體機器架構上，也可以應用在邏輯架構上，可以按照實體與邏輯上去進行區分。實體三層架構與作用如下 客戶端應用程式 ( Client Application 顯示層 ) 負責處理客戶端的使用者介面及資料處理﹐比如說資料形態的確認等。 應用程式伺服器 ( Application Server 商業邏輯層 ) 介于資料庫和客戶端應用程式間，負責將客戶端應用程式的需求回應給資料庫伺器﹐再將資料庫的資料傳給客戶端應用程式 資料庫伺服器 ( RDBMS, Relational Database Management System 資料層 ) 就是資料庫﹐比如 MS SQL SERVER 、 PostgreSQL 、 Oracle 等等。 graph LR A(fa:fa-user 客戶端應用程式)-->B(fa:fa-server 應用程式伺服器) B-->C(fa:fa-database 資料庫伺服器) 三層式架構可以簡易看為是在客戶端與資料庫之間加入了一個中間層，中間層通常包含： 資料存取層 ( Database Access Layer，簡稱 DAL ) 商業邏輯層 ( Business Logic Layer，簡稱 BLL ) 資料物件模型層 ( Database Object Model Layer，簡稱 DOM ) graph LR A(fa:fa-laptop 使用者介面)-->B(fa:fa-briefcase 商業邏輯) B-->C(fa:fa-tasks 資料存取) C-->D(fa:fa-object-group 物件模型) D-->E(fa:fa-database 資料庫伺服器) 邏輯上的三層式架構 ( 或 N 層架構 ) ，是一種軟體抽象的層次結構，從整個應用程式架構的角度來區分為三層 ( 如果需要，還可以分 N 層 ) ，是為了解決整個應用程式中，各個操作過程中不同階段的程式碼封裝的問題，使程式設計師更加專注的處理某階段的商業邏輯。比如將資料庫操作封裝到一層中，提供一些方法根據參數直接返回用戶需要的資料，這樣在處理具體的商業邏輯的時候，就不用關心資料的儲存問題了；簡單來說就是強化內聚，降低耦合，其簡易分層如下： 表現層 USL ( User Show Layer 或 UI 或 Presentation layer)用於顯示資訊和接收用戶輸入的資料，為用戶提供一種交互式操作的介面。通俗講就是展現給用戶的介面，即用戶在使用一個系統的時候的所見所得。 商業邏輯層 BLL ( Business Logic Layer )商業邏輯層在體系架構中的位置很關鍵，它處於資料存取層與表現層中，起到了數據交換中承上啟下的作用。由於層是一種弱耦合結構，層與層之間的依賴是向下的，底層對於上層而言是「無知」的，改變上層的設計對於其調用的底層而言沒有任何影響。 資料存取層 DAL ( Data Access Layer )有時候也稱為持久層，其功能主要是負責資料庫的訪問，可以訪問資料庫系統、二進位文件、文本文檔或是 XML 文檔。簡單說法就是實現對資料表的查詢、新增、刪除與修改的操作。如果加入 ORM ，那麼就會包括物件和資料表之間的對應，以及物件實體的持久化。 分層設計時，遵循了面向介面設計的思想，那麼這種向下的依賴也應該是一種弱依賴關係。因而在不改變介面定義的前提下，理想的分層式架構，應該是一個支持可抽取、可替換的「抽屜」式架構。優點 利於標準化 降低層與層之間的依賴 利於各層邏輯的復用，資源重用性好 開發人員可以只關注整個結構中的其中某一層 具有良好的開放性和可擴充性，維護和升級方便 提高系統的安全性 缺點 有時會導致連動的修改。如果在表現層中需要增加一個功能，為保證其設計符合分層式結構，可能需要在相應的商業邏輯層和資料存取層中都增加相應的程式碼。 相對於不分層，降低了系統的性能。如果不採用分層式結構，很多業務可以直接造訪資料庫，以此獲取相應的數據，如今卻必須通過中間層來完成。 增加了開發成本。 Asp.Net MVC 架構ASP.NET MVC 是微軟在 2009 年 4 月份發布的一種網站開發架構，它是把傳統意義上的 MVC 開發思想融合到了 ASP.NET 的開發當中，為了解決傳統開發中不能分離 Model , View 和 Controller 而設計的。 MVC 是在應用程式 ( B/S 結構 ) 的視圖層劃分出來的不同功能的幾個模塊。主要是為了解決應用程式用戶介面的樣式替換問題，把展示數據的 HTML 頁面儘可能的和業務代碼分離。 MVC 把純凈的介面展示邏輯 ( 用戶介面 ) 獨立到一些文件中 ( Views ) ，把一些和用戶交互的程序邏輯 ( Controller ) 單獨放在一些文件中，在 Views 和 Controller 中傳遞數據使用一些專門封裝數據的實體對象，這些對象，統稱為 Models。按照 MSDN 上 ASP.NET MVC 4 上的說明，其架構包含： 模型 ( Model )模型物件屬於實作應用程式資料網域邏輯之應用程式的一部分。即 Model (模型層)，主要負責商業邏輯與資料庫之間的處理不是三層中的 Model (實體層)，其實包括三層中的 BLL 、 DAL 、 Model 檢視 ( View )檢視是顯示應用程式中使用者介面 (UI) 的元件。即 View (視圖層)，主要用於顯示數據和提交數據 控制器 ( Controller )控制器就是元件，可以處理使用者互動、使用模型並且在最後選擇可以轉譯要顯示 UI 的檢視。主要是用作捕獲請求並控制請求轉發 graph LR A((檢 視))==>B((模 型)) C((控制器))==>A C==>B 優點 沒有在頁面中保存頁面狀態狀態(相對 WebForm ViewState) 開發者可以完全掌控頁面的呈現過程 易於單元測試 易於測試驅動開發 (Test-Driven Development) 可擴展、可替換 三層架構與 ASP.NET MVC 比較以下是 MVC 與三層架構的對應關係 graph LR subgraph USL controller((控制器))==>view((檢 視)) end subgraph BLL model((模 型)) end view==>model controller==>model 相同點 都是把資料與呈現分離，以降低耦合 相異點 兩者的差異如下表|項目|三層式架構|ASP.NET MVC||:—:|:—:|:—:||Model|實體類別構成|商業邏輯層與資料存取層組成||Controller|沒有定義 Controller 的概念|-||分類|體系結構模式/部署模式|設計模式/表示模式| 不過在程式開發實務上，則是會依照情境的需要進行細分，所以如何區分，還是得看各自的需求。 參考資料 壹讀 mvc與三層結構終極區別 壹讀 三層架構優缺點 人人IT 三層架構及其優缺點 台灣 WiKi WiKi Multitier architecture CS架構和BS架構]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>other</tag>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows 10 中 Docker Access Denied]]></title>
    <url>%2F2017%2F07%2F19%2Fdocker-for-windows-access-denied-in-windows-10%2F</url>
    <content type="text"><![CDATA[我使用的 windows 10 中，我自己的帳戶不會是最高權限，會額外設定一個最高權限的使用者來提升安全性；詳細操作設定步驟，可以參考 demo 小舖 Windows 10 新增本機帳號步驟。Docker 我在今年初裝了 Docker for windows ，本來開機啟動都還正常，後來發生了 access denied ，想說怎麼權限不足，上去 github docker issue 一看，原來需要設定用戶群組。 設定用戶群組可以從以下路徑開啟電腦管理，記得使用管理者權限開啟。&quot;C:\WINDOWS\system32\compmgmt.msc&quot; 設定完成後記得重新開機 參考資料 Docker Docker Docs Docker for windows demo 小舖]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[自訂 vs 專案範本]]></title>
    <url>%2F2017%2F07%2F16%2Fcustom-project-template-for-visual-studio%2F</url>
    <content type="text"><![CDATA[一般開發時，有時候會使用預設專案範本，或是空專案自行建立；但是在多人開發時，希望團隊有幾個通用的專案範本；這時候，如果使用的是 Visual Studio，可以建立自訂的 MSDN Visual Studio Templates。 想要建立專案範本，其實相當簡單；首先找一個想要建立範本的專案，接著在編輯列點選 project 再點選 export template…project -&gt; export template... 因為要製作的是 Project Template，所以選取 Project Template，接著就按照 Visual Studio 設定精靈給予的選項設定就好了。 當使用預設選項，建立好之後 Visual Studio 會自動將自訂的 Template 匯入，然後就可以在新增專案的地方看到自訂 template 但是假如想要將自訂的 Templates 共享到團隊使用呢？首先要知道的是 Visual Studio 讀取 Project Template 的路徑，路徑可以在 MSDN Locate and Organize Project and Item Templates 上得知1\My Documents\Visual Studio &lt;Version&gt;\Templates\ProjectTemplates\&lt;Language&gt;\ 因為要讓團隊使用，先確定有可以共用的空間，然後按照以下路徑變更 template 路徑Tools -&gt; Options -&gt; Projects and Solutions -&gt; User project templates locations: 補充一下，上述都沒提到 Templates 在 Visual Studio 中的檔案類型，當自訂 Templates 產生後，會有一個 .zip 壓縮檔案，整個壓縮檔案內容包含了所匯出的專案內容，這個壓縮檔案就是 Templates ，將此 zip 檔案放到上述的路徑下即可。 參考資料 MSDN Visual Studio Templates MSDN Create Project Templates MSDN Locate and Organize Project and Item Templates MSDN Find and Install Templates Located Online MSDN Share Templates Across a Development Team stackoverflow install VS project template]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>Asp.Net MVC</tag>
        <tag>C#</tag>
        <tag>Visual Studio</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Github 上 Fork Repository 其來源 Repository 的紀錄同步更新]]></title>
    <url>%2F2017%2F07%2F14%2Fgithub-sync-fork-repository%2F</url>
    <content type="text"><![CDATA[Github 上的 Fork 了一些 Repository，但是這些 Repository 還是需要從來源持續更新，Github 說明了怎麼處理這部分，這邊順便紀錄一下。 其處理方式就是建立一個新的 remote 位置給原始來源，然後 fetch 更新資料，最後再進行 merge，以下使用我 Github 上 Fork 的 Repository 假設 Repository 已經 clone 下來了，進入該 Repository 位置 1234567891011D:\Projects\Reference$ git clone git@github.com:shunnien/lodash.gitCloning into 'lodash'...remote: Counting objects: 68089, done.remote: Total 68089 (delta 0), reused 0 (delta 0), pack-reused 68089Receiving objects: 100% (68089/68089), 44.11 MiB | 6.55 MiB/s, done.Resolving deltas: 100% (46903/46903), done.Checking out files: 100% (406/406), done.D:\Projects\Reference$ cd lodash\ 這邊可以使用 git remote -v 來檢查遠端 Repository 的設定1234D:\Projects\Reference\lodash (master)$ git remote -vorigin git@github.com:shunnien/lodash.git (fetch)origin git@github.com:shunnien/lodash.git (push) 接著加入原始遠端 Repository 的設定12D:\Projects\Reference\lodash (master)$ git remote add upstream git@github.com:lodash/lodash.git 設定完成後，就是 fetch 資料回來了。123456789101112D:\Projects\Reference\lodash (master)$ git fetch upstreamremote: Counting objects: 10, done.remote: Total 10 (delta 7), reused 8 (delta 7), pack-reused 2Unpacking objects: 100% (10/10), done.From github.com:lodash/lodash * [new branch] 3203 -&gt; upstream/3203 * [new branch] amd -&gt; upstream/amd * [new branch] es -&gt; upstream/es * [new branch] master -&gt; upstream/master * [new branch] npm -&gt; upstream/npm * [new branch] npm-packages -&gt; upstream/npm-packages 最後的 merge 一般來說都是合併到 master 上的，假如想要其他分支上紀錄，自行切換合併12345678D:\Projects\Reference\lodash (master)$ git merge upstream/masterUpdating 61acdd0c2..01148a1dfFast-forward .internal/stringToPath.js | 4 ++-- dropRight.js | 8 ++------ invert.js | 5 +++++ 3 files changed, 9 insertions(+), 8 deletions(-) 合併完成後，別忘記 push 上去遠端 Repository 參考資料 Github fork a repo Github syncing a fork]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用 C# 連接 HTTPS URL]]></title>
    <url>%2F2017%2F07%2F13%2FAccessing-HTTPS-URL-using-csharp%2F</url>
    <content type="text"><![CDATA[有朋友忽然在問 HTTPS 怎麼直接進行連接，想說乾脆直接整理一下好了；連接不外是透過 WebRequest 這個類別去操作，一個是直接使用 HttpWebRequest，另一個是使用 WebClient 這個 Component ，以下附上針對這兩者的簡單範例。 兩個方式中，比較需要注意的是強制讓憑證通過，一般瀏覽器憑證不通過還是會顯示出來，但是在程式這邊，不通過的話，後續就不會有結果； HttpWebRequest詳細資料可以參考 MSDN HttpWebRequest 上的說明 12345678910111213141516171819202122void Main()&#123; var url = "https://www.moi.gov.tw/"; string results; // 強制認為憑證都是通過的，特殊情況再使用 //ServicePointManager.ServerCertificateValidationCallback = delegate &#123; return true; &#125;; HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url); request.AutomaticDecompression = DecompressionMethods.GZip; // 加入憑證驗證 request.ClientCertificates.Add(new System.Security.Cryptography.X509Certificates.X509Certificate()); HttpWebResponse resp = (HttpWebResponse)request.GetResponse(); using (StreamReader sr = new StreamReader(resp.GetResponseStream())) &#123; results = sr.ReadToEnd(); sr.Close(); &#125; results.Dump();&#125; WebClient詳細資料可以參考 MSDN WebClient 12345678910111213void Main()&#123; string html = string.Empty; string url = @"https://www.moi.gov.tw/"; WebClient wc = new WebClient(); // 強制認為憑證都是通過的() // ServicePointManager.ServerCertificateValidationCallback = delegate &#123; return true; &#125;; wc.Encoding = Encoding.UTF8; html = wc.DownloadString(url); html.Dump();&#125; 參考資料 stackoverflow Accessing HTTPS URL from Console Application using C# stackoverflow Make Https call using HttpClient stackoverflow C# how to properly make a http web GET request MSDN HttpWebRequest 類別 MSDN WebClient Class]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Gulp 套件的更新調整]]></title>
    <url>%2F2017%2F07%2F13%2Fgulpfiles-v2-upgrade-issue%2F</url>
    <content type="text"><![CDATA[最近直接從 Yeoman 用了一個 Scaffolding 的專案，來練習一些簡單操作等等…，，發現 package 都是舊版，就順手更新了一下，然後就 gulp file 的設定在執行的時候就發生錯誤。 列出幾個需要注意的要點 gulp-uglify這套件只有支援 es5；沒錯，就算更新後還是只有 es5，所以一定要搭配使用 gulp-babel gulp-useref此套件更新後，原有的一些 function 變成屬性，需要注意一下 gulp-filter在我的練習專案中，filter.restore() 在更新後，變成了 filter(&#39;&#39;,{&quot;restore&quot;:true}) 這樣的做法。 錯誤修正以下按照上述的那些要點，列出顯示的錯誤訊息，以及詳細的處理方式。 unable to minify JavaScript Caused by: SyntaxError: Unexpected token: name …(略)這訊息很明顯是沒辦法將 js 檔案壓縮，因為裡面的 js 語法不是 es5，例如:let、const…。以下列出解決方式的範例：12345678910111213141516const babel = require('gulp-babel');// Scriptsgulp.task('scripts', function () &#123; return gulp.src(['app/scripts/**/*.js']) .pipe($.jshint('.jshintrc')) .pipe($.jshint.reporter('default')) .pipe(babel(&#123; presets: ['es2015'] &#125;)) .pipe(rename(&#123; suffix: '.min' &#125;)) .pipe($.uglify()) .on('error', function (err) &#123; gutil.log(gutil.colors.red('[Error]'), err.toString()); &#125;) .pipe(gulp.dest('dist/scripts'));&#125;); ReferenceError: assets is not defined …(略)這個錯誤可以參照 gulp-useref Github issue ，在更新後，已經沒有 assets 這 function 了，直接使用 useref() 即可。 錯誤示範1cssFilter.restore() 這樣會發生錯誤，顯示以下錯誤訊息filter.restore is not a function …(略)修正這個 restore 後，另一個可能的錯誤示範1234567var cssFilter = $.filter('**/*.css'); gulp.src('app/*.html') .pipe(cssFilter) .pipe(gulp.dest('dist')) .pipe($.csso()) .pipe(cssFilter.restore) .pipe(gulp.dest('dist')); 因為 restore 沒有設定好，所以會有以下的錯誤訊息Cannot read property ‘on’ of undefined at DestroyableTransform.Readable.pipe …(略)這二個問題也是 package 更新後，已經變動了，所以需要變更設置方式，以下列出設定範例：註：範例中 gulp-load-plugins 包含了 gulp-filter1234567891011121314151617const gulp = require('gulp'), c sso = require('gulp-csso'), useref = require('gulp-useref'), // Load plugins $ = require('gulp-load-plugins')();// HTMLgulp.task('html', ['styles', 'scripts'], function () &#123; var cssFilter = $.filter('**/*.css', &#123; "restore": true &#125;); return gulp.src('app/*.html') .pipe(useref()) .pipe(cssFilter) .pipe(gulp.dest('dist')) .pipe($.csso()) .pipe(cssFilter.restore) .pipe(gulp.dest('dist'));&#125;); 最後附上 gulpfile 更新後的內容，這版本比較符合原本的套件。這個練習的 Github 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154'use strict';const gulp = require('gulp'), open = require('open'), babel = require('gulp-babel'), gutil = require('gulp-util'), imagemin = require('gulp-imagemin'), rename = require('gulp-rename'), clean = require('gulp-clean'), concat = require('gulp-concat'), cache = require('gulp-cache'), csso = require('gulp-csso'), wiredep = require('wiredep').stream, useref = require('gulp-useref'), gulpIf = require('gulp-if'), // Load plugins $ = require('gulp-load-plugins')();// Stylesgulp.task('styles', function () &#123; return gulp.src(['app/styles/main.css']) .pipe($.autoprefixer('last 1 version')) .pipe(gulp.dest('app/styles')) .pipe($.size());&#125;);// Scriptsgulp.task('scripts', function () &#123; return gulp.src(['app/scripts/**/*.js']) .pipe($.jshint('.jshintrc')) .pipe($.jshint.reporter('default')) .pipe($.size());&#125;);// Imagesgulp.task('images', function () &#123; return gulp.src([ 'app/images/**/*', 'app/lib/images/*' ]) .pipe(cache(imagemin(&#123; optimizationLevel: 3, progressive: true, interlaced: true &#125;))) .pipe(gulp.dest('dist/images')) .pipe($.size());&#125;);// HTMLgulp.task('html', ['styles', 'scripts'], function () &#123; var jsFilter = $.filter('**/*.js', &#123; "restore": true &#125;); var cssFilter = $.filter('**/*.css', &#123; "restore": true &#125;); return gulp.src('app/*.html') .pipe(useref()) .pipe(jsFilter) .pipe(gulp.dest('dist')) .pipe(babel(&#123; presets: ['es2015'] &#125;)) .pipe(rename(&#123; suffix: '.min' &#125;)) .pipe($.uglify()) .on('error', function (err) &#123; gutil.log(gutil.colors.red('[Error]'), err.toString()); &#125;) .pipe(jsFilter.restore) .pipe(cssFilter) .pipe(gulp.dest('dist')) .pipe(rename(&#123; suffix: '.min' &#125;)) .pipe($.csso()) .pipe(cssFilter.restore) .pipe(gulp.dest('dist')) .pipe($.size());&#125;);// Cleangulp.task('clean', function () &#123; return gulp.src(['dist/styles', 'dist/scripts', 'dist/images'], &#123; read: false &#125;).pipe(clean());&#125;);// Buildgulp.task('build', ['html', 'images']);// Default taskgulp.task('default', ['clean'], function () &#123; gulp.start('build');&#125;);// Connectgulp.task('connect', function () &#123; $.connect.server(&#123; root: 'app', port: 9000, livereload: true &#125;);&#125;);// Opengulp.task('serve', ['connect'], function () &#123; open("http://localhost:9000");&#125;);// Inject Bower componentsgulp.task('wiredep', function () &#123; gulp.src('app/styles/*.css') .pipe(wiredep(&#123; directory: 'app/bower_components', ignorePath: 'app/bower_components/' &#125;)) .pipe(gulp.dest('app/styles')); gulp.src('app/*.html') .pipe(wiredep(&#123; directory: 'app/bower_components', ignorePath: 'app/' &#125;)) .pipe(gulp.dest('app'));&#125;);// Watchgulp.task('watch', ['connect', 'serve'], function () &#123; // Watch for changes in `app` folder gulp.watch([ 'app/*.html', 'app/styles/**/*.css', 'app/scripts/**/*.js', 'app/images/**/*' ], function (event) &#123; return gulp.src(event.path) .pipe($.connect.reload()); &#125;); // Watch .css files gulp.watch('app/styles/**/*.css', ['styles']); // Watch .js files gulp.watch('app/scripts/**/*.js', ['scripts']); // Watch image files gulp.watch('app/images/**/*', ['images']); // Watch bower files gulp.watch('bower.json', ['wiredep']);&#125;);]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>npm</tag>
        <tag>Gulp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[線上活動報名工具]]></title>
    <url>%2F2017%2F07%2F12%2Ffree-online-event-registration%2F</url>
    <content type="text"><![CDATA[以前在 NPO(Nonprofit Organization，非營利機構) 時，常舉辦許多活動，當時是自行開發活動報名系統，但是以需求面而言，假如後續資料不再處理利用，或是為一次性活動，則可以考慮採用一些免費的的工具完成，方便參加者直接線上填寫資料、繳費報名，甚至使用手機 App 的電子票券。對主辦方來說，這些資料可以直接轉存成 Excel 等格式，方便資料的蒐集、存檔與再利用。 以下介紹幾種不同的線上服務，分為表單類型的服務以及報名系統的服務，可依據不同的活動需求來選擇。 KKTIX 免費活動限制與提供功能如下，詳細資料可以參考定價方案 同時間 5 場活動 單場 500 人數上限 SSL 安全連線 自訂報名表單 電子票券 KKTIX Manager App 驗票 活動通 Accupass 免費活動限制與提供功能如下，詳細資料可以參考免費方案 600人以下(含600人) 自訂報名表單 電子票券 快速驗票系統 BeClass 免費提供的平台，所以有廣告。 沒有人數限制 提供團體報名 每個帳號都提供三組自訂表格格式 提供嵌入語法 myRegie myRegie的收費方式是依照每一場活動來計費，免費活動限制與提供功能如下，詳細資料可以參考免費/加值服務之費用及功能比較 100人以下 報名安全機制(https) 提供嵌入語法 報名王 每個帳號提供3個活動額度 每個活動最多30個場次 不限報名人數 可下載報名資料 報名表最多可有30個欄位 eventsmart 免費活動限制與提供功能眾多，詳細資料可以參考免費方案 不限活動票卷數量 eventbrite 按照售出票卷承收手續費，所以免費活動免費票卷是免費使用的，詳細功能資料可以參考feature Eventzilla.net Free for free events，所以免費活動免費使用的，詳細功能資料可以參考feature ticketbud Free for free events，所以免費活動免費使用的，詳細功能資料可以參考feature 123contactform 免費活動福利比較少，限制與提供功能如下，詳細功能資料可以參考feature 5 個表單 每個表單限制 10 個項目欄位 API 呼叫每天 100 表單系統類似 google 問卷的，線上問卷與小型活動的好選擇。 Google 表單 wufoo可以免費使用，另有其他方案選擇 pandaform這只有 14 天的免費使用，之後都是付費功能；各項付費方案 參考資料 TechSoup Taiwan]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>other</tag>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Github Pages 上的網站開啟 HTTPS]]></title>
    <url>%2F2017%2F07%2F10%2Fgithub-pages-enable-HTTPS%2F</url>
    <content type="text"><![CDATA[現在的網站愈來愈重視資訊安全，所以網站的連接建議使用 HTTPS 比較好；而架設在 GitHub 上的 Blog 預設沒有開啟 HTTPS，但是 GitHub 是有提供 HTTPS 的。以前 GitHub 沒有提供這選項的時候，我是透過 JavaScript 自己去轉換，因為網站是在 GitHub 上，GitHub 本身就有 HTTPS 的提供。 而現在更方便了，不需要這樣轉和，可以直接在 Repository 的 Settings 進行設定就好，其設定路徑如下： 1您的Repository &gt; Settings &gt; GitHub Pages &gt; Enforce HTTPS]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[利用指令參數開啟 Cmder 分頁]]></title>
    <url>%2F2017%2F07%2F07%2Fcmder-new-console%2F</url>
    <content type="text"><![CDATA[承續上篇，開啟的 cmder 是新視窗，但是 cmder 的特色有分頁呀，所以希望直接開啟分頁，這樣視窗也比較好管理。 想要開啟分頁，先了解一下 cmder 是透過 ConEmu 來組合命令列介面的，所以想要開啟分頁，主要啟動的程式，是 ConEmu ，再透過參數去指定其設定。 這指令的路徑請自行更換為各自的 cmder 路徑1D:\cmder\vendor\conemu-maximus5\ConEmu.exe /cmd cmd /k "D:\cmder\vendor\init.bat" -new_console:%d 如果想要添加 Title 的話，可以照一下這個設定1D:\cmder\vendor\conemu-maximus5\ConEmu.exe /icon "D:\cmder\Cmder.exe" /title Cmder /cmd cmd /k "D:\cmder\vendor\init.bat" -new_console:%d 附上 Visual Studio 中的設定，不過 Visual Studio 要先安裝擴充套件 OpenCommandLine 才會有這個設定喔。另外，在 Visual Studio 時候，指定命令列啟動後的路徑，對應到現在檔案資料夾路徑的餐數不是 %d 而是 %folder%。 參考資料附上這些工具的連結 Github issue 457 cmder GitKraken Visual Studio OpenCommandLine]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>Cmder</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[透過指令列開啟新的 Cmder 視窗]]></title>
    <url>%2F2017%2F07%2F07%2Fopen-a-new-cmder%2F</url>
    <content type="text"><![CDATA[cmder 這指令列工具相當便利，而且採用分頁來開啟；當 cmder 已經開啟後，在 GitKraken 或 Visual Studio 等工具中呼叫 cmder 執行，會沒有任何動作，只有 cmder 關閉，直接在 GitKraken 工具中呼叫才會開啟，因為這方式太不便利了，所以在 cmder 的 Github issue 查詢到解決方式。 這方式是建立一個 bat 檔案來執行 cmder，這會新啟動一個 cmder 視窗，bat file 如下撰寫 1234567@echo offrem CMDER_ROOT 表示你的 cmder 的路徑set CMDER_ROOT=D:\cmderrem 最後的 %CMDER_ROOT%\vendor\init.bat cd %CD% &amp;&amp; %~1rem 可以改成 %CMDER_ROOT%\vendor\init.bat %~1start %CMDER_ROOT%\vendor\conemu-maximus5\ConEmu.exe /icon "%CMDER_ROOT%\cmder.exe" /title Cmder /loadcfgfile "%CMDER_ROOT%\config\ConEmu.xml" /cmd cmd /k "%CMDER_ROOT%\vendor\init.bat cd %CD% &amp;&amp; %~1" 然後附上 GitKraken 的 Terminal 的設定，%d 參數是 GitKraken 中現在 respository 的路徑 1D:\cmder\cmder.bat "cd %d" 參考資料 Github issue 457]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>Cmder</tag>
        <tag>batch</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTML Favicon 圖示]]></title>
    <url>%2F2017%2F07%2F05%2Fhtml-favicon-file-type%2F</url>
    <content type="text"><![CDATA[為了美觀與方便辨識，會在網站設置 icon，這個 icon 檔案可以是 png 檔案或是常見的 icon 檔案，也可以是 svg 檔案，但是各家瀏覽器的支援度不一，所以有些檔案類型幾乎不會使用到，這邊紀錄這些較少使用的檔案類型。 icon 的使用是透過 &lt;link&gt; 標籤，主要類型有： png image/png ico image/vnd.microsoft.icon icns svg image/svg+xml 詳細定義可以參考 W3C HTML 文件，而在 Html 頁面上，使用方式範例引用文件內容如下： 1234567891011121314151617&lt;!DOCTYPE HTML&gt;&lt;html&gt; &lt;head&gt; &lt;title&gt;lsForums — Inbox&lt;/title&gt; &lt;link rel=icon href=favicon.png sizes="16x16" type="image/png"&gt; &lt;link rel=icon href=windows.ico sizes="32x32 48x48" type="image/vnd.microsoft.icon"&gt; &lt;link rel=icon href=mac.icns sizes="128x128 512x512 8192x8192 32768x32768"&gt; &lt;link rel=icon href=iphone.png sizes="57x57" type="image/png"&gt; &lt;link rel=icon href=gnome.svg sizes="any" type="image/svg+xml"&gt; &lt;link rel=stylesheet href=lsforums.css&gt; &lt;script src=lsforums.js&gt;&lt;/script&gt; &lt;meta name=application-name content="lsForums"&gt; &lt;/head&gt; &lt;body&gt; ... &lt;/body&gt;&lt;/html&gt; 至於各瀏覽器的適用性，目前除了 svg 外，其他類型的支援度都有 8 成，所以想要通用的支援度，最好還是使用 ico 就好，詳細的比較可以在 CanIUse favicon 觀看。 參考資料 CanIUse favicon Favicon線上製作轉換工具 stackoverflow HTML 5 Favicon? 免費 icon]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>Html</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript isNaN vs Number.isNaN]]></title>
    <url>%2F2017%2F07%2F04%2FJavaScript-isNaN-vs-Number-isNan%2F</url>
    <content type="text"><![CDATA[isNaN 與 Number.isNaN，兩個方法是不同的，NaN 是非數值資料的表示，而這兩個方法都是判斷資料是否非數值，isNaN 是比較早期的方法，所以有許多特別的特例 NaN全域屬性 NaN 表示「非數值」（Not-A-Number）的數值。 NaN 的屬性屬於全域物件。 如同 Number.NaN 一般，NaN 的初始數值是「非數值」。在當今的瀏覽器中，NaN 屬性不可設定（non-configurable）也不可覆寫（non-writable）。雖然可能有例外，也請不要覆蓋它。 寫程式很少會直接動用 NaN。通常是在 Math 函式計算失敗（Math.sqrt(-1)）或函式解析數字失敗（parseInt(“blabla”)）後才會回傳。 資料來源MDN NaN isNaNisNaN() 函式會判斷某個數值是不是 NaN。 注意：在 isNaN 函式裡面，有個有趣的強制性規則。你可能會想改用在 ECMAScript 6 導入的 Number.isNaN()、或是用 typeof 來判斷某個數值是不是「非數字」（Not-A-Number）。 資料來源MDN isNaN 12345678910111213isNaN(123) //falseisNaN(-1.23) //falseisNaN(5-2) //falseisNaN(0) //falseisNaN('123') //falseisNaN('Hello') //trueisNaN('2005/12/12') //trueisNaN('') //falseisNaN(true) //falseisNaN(undefined) //trueisNaN('NaN') //trueisNaN(NaN) //trueisNaN(0 / 0) //true Number.isNaNNumber.isNaN()方法確定傳遞的值是否為NaN和其類型是Number。它是原始的全局isNaN()的更強大的版本。 和全局函數isNaN()相比，該方法不會強制將參數轉換成數字，只有在參數是真正的數字類型，且值為NaN的時候才會返回true。 資料來源MDN Number.isNaN 12345678910111213Number.isNaN(123) //falseNumber.isNaN(-1.23) //falseNumber.isNaN(5-2) //falseNumber.isNaN(0) //falseNumber.isNaN('123') //falseNumber.isNaN('Hello') //falseNumber.isNaN('2005/12/12') //falseNumber.isNaN('') //falseNumber.isNaN(true) //falseNumber.isNaN(undefined) //falseNumber.isNaN('NaN') //falseNumber.isNaN(NaN) //trueNumber.isNaN(0 / 0) //true isNaN vs Number.isNaN由上述的定義說明得知，NaN 就是用來判斷是否數值，那為什麼要使用 isNaN(不管 isNaN 或 Number.isNaN) 來判斷？ 因為在JavaScript中，NaN 最特殊的地方，就是與其他 JavaScript 的值不同，我們不能使用等號運算符（== 與 ===）來判斷某個值是不是 NaN，因為連12NaN == NaN // falseNaN === NaN // false 結果都是 false。 因此，必須要有一個判斷值是否是 NaN 的方法。以下列出比較特別的特例，以及 Number.isNaN 與 NaN 的對比 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253// 比較特別的是，0/0 的結果會是 NaN，不過把其他數字除以零則不是 NaN。0/0 // NaN0/-0 // NaN0/+0 // NaN1/0 // Infinity1/-0 // -Infinity'A' == NaN // false'A' === NaN // falseNaN === NaN // falseisNaN(NaN) // trueisNaN('A') // trueisNaN("NaN"); // trueisNaN(undefined); // trueisNaN(&#123;&#125;); // true// 以下這個範例就是不建議完全使用 isNaN 的理由// "blabla" 在運算中被轉換為數字，在轉換為數字失敗後，回傳了 NaN，讓判斷結果變成 trueisNaN("blabla"); // trueisNaN(true); // falseisNaN(null); // falseisNaN(37); // false// 字串isNaN("37"); // false: "37" 轉換成數字的 37 後就不是 NaN 了isNaN("37.37"); // false: "37.37" 轉換成數字的 37.37 後就不是 NaN 了isNaN("123ABC"); // true: parseInt("123ABC") 是 123 但 Number("123ABC") 是 NaNisNaN(""); // false: 空字串轉換成數字的 0 後就不是 NaN 了isNaN(" "); // false: 有空白的字串轉換成數字的 0 後就不是 NaN 了// 日期isNaN(new Date()); // falseisNaN(new Date().toString()); // trueNumber.isNaN(NaN) // trueNumber.isNaN(Number.NaN); // trueNumber.isNaN(0/0) // true// 下面這幾個如果使用 isNaN() 時，會返回 true。Number.isNaN('A') // falseNumber.isNaN("NaN"); // false，字符串 "NaN" 不會被轉換成數字 NaN。Number.isNaN(undefined); // falseNumber.isNaN(&#123;&#125;); // falseNumber.isNaN("blabla"); // false// 下面的都返回 falseNumber.isNaN(true);Number.isNaN(null);Number.isNaN(37);Number.isNaN("37");Number.isNaN("37.37");Number.isNaN("");Number.isNaN(" "); 參考資料 W3 schools isNaN W3 schools Number isNaN MDN Number isNaN MDN NaN MDN isNaN ECMA-262 stackoverflow 討論 Nicolás Bevacqua TC39]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript 取得 Url 的 Query String]]></title>
    <url>%2F2017%2F07%2F03%2FGet-Query-String-Parameters-with-JavaScript%2F</url>
    <content type="text"><![CDATA[因為維護某個系統需要，需要使用 Query String 來進行頁面切換，取得 Query String 的方式有很多，例如：自行撰寫，或是透過 API 等…以下列出這些方式。 透過 URLSearchParams API這 API 使用方式簡單而且操作便利，但是不是所有瀏覽器都支援，所以想要全部支援的話，可能要考慮其他方式 1234567// 假設 "?q=1234&amp;txt=abc"let urlParams = new URLSearchParams(window.location.search);console.log(urlParams.has('q')); // trueconsole.log(urlParams.get('txt')); // "abc"console.log(urlParams.getAll('action')); // ["abc"]console.log(urlParams.toString()); // "q=1234&amp;txt=abc"console.log(urlParams.append('page', '1')); // "q=1234&amp;txt=abc&amp;page=1" 透過 URL API各瀏覽器對於 URL API 的支援度比 URLSearchParams 高，但是可以從 CanIUse 看出，還是有些不支援。 1234let url_string = "http://www.example.com/index.html?a=1&amp;b=m2";let url = new URL(url_string);url.searchParams.has("b"); // trueurl.searchParams.get("b"); // m2 自行撰寫不透過 API 的話，就是使用現有 JavaScript 去撰寫 Url 的分析，擷取出參數，撰寫邏輯可以參考 Github 上許多 open source 的專案，以下的程式碼引用至WebReflection url-search-params 專案 123456function getUrlParameter(name) &#123; name = name.replace(/[\[]/, '\\[').replace(/[\]]/, '\\]'); var regex = new RegExp('[\\?&amp;]' + name + '=([^&amp;#]*)'); var results = regex.exec(location.search); return results === null ? '' : decodeURIComponent(results[1].replace(/\+/g, ' '));&#125;; 假如不使用 Regex 的話 123456789101112131415161718192021222324252627282930// 假設 http://sample.com/index.html?a=1&amp;b=2function queryString ()&#123; // This function is anonymous, is executed immediately and // the return value is assigned to QueryString! var query_string = &#123;&#125;; var query = window.location.search.substring(1); var vars = query.split("&amp;"); for (var i = 0; i &lt; vars.length; i++) &#123; var pair = vars[i].split("="); // If first entry with this name if (typeof query_string[pair[0]] === "undefined") &#123; query_string[pair[0]] = pair[1]; // If second entry with this name &#125; else if (typeof query_string[pair[0]] === "string") &#123; var arr = [query_string[pair[0]], pair[1]]; query_string[pair[0]] = arr; // If third or later entry with this name &#125; else &#123; query_string[pair[0]].push(pair[1]); &#125; &#125; return query_string;&#125;queryString(); // &#123;a: "1", b: "2"&#125; 參考資料 MDN URLSearchParams MDN Location object MDN URL API]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SQL 按照資料中的數值去分隔計算]]></title>
    <url>%2F2017%2F06%2F30%2Fsql-sum-every-5-rows-in-one-row%2F</url>
    <content type="text"><![CDATA[朋友有個需求，其資料類似以下所示，LCount 與 NCount 是某些資料的計算結果，其目的是將 LCount 按照 5 的倍數區分群組，例如: 11～15、16～20、21～25…之類的，再去合計 NCount。 LCount NCount 11 1 12 2 13 3 14 4 15 5 16 6 17 7 18 8 19 9 20 10 26 11 36 12 40 13 44 14 45 15 128 16 那這個其實就還是 group by 的問題，但是可以使用 SUM() OVER 加上 Partition by 來快速取得合計結果，作法如下。1234567SELECT LCount ,NCount -- rn 是分組的編號 ,RANK() OVER (ORDER BY ((LCount - 1) / 5)) AS rn ,SUM(NCount) OVER (PARTITION BY ((LCount - 1) / 5)) AS 'Total'FROM tempdemo 呈現的結果如下，Total 就是合計的結果。 LCount NCount rn Total 11 1 1 15 12 2 1 15 13 3 1 15 14 4 1 15 15 5 1 15 16 6 6 40 17 7 6 40 18 8 6 40 19 9 6 40 20 10 6 40 26 11 11 11 36 12 12 25 40 13 12 25 44 14 14 29 45 15 14 29 128 16 16 16 參考資料SQL fiddle 範例 msdn 論壇]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>T-SQL</tag>
        <tag>SQLServer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Sublime Text3 個人設定]]></title>
    <url>%2F2017%2F06%2F30%2FSublime-Text-My-Setting%2F</url>
    <content type="text"><![CDATA[常用的個人設定，紀錄一下。 1234567891011121314151617181920212223242526&#123; // 顏色樣式 "color_scheme": "Packages/User/SublimeLinter/Monokai (SL).tmTheme", // 縮排檢測，當一個新檔案讀取的時候，會進行檢測，然後決定是否自動縮排 "detect_indentation": false, // DPI 的縮放比例，Sublime Text 3 會根據作業系統目前的 DPI 設定，去同步放大/縮小其介面的各個元件，若作業系統的 DPI 調大，則 Sublime Text 3 的所有欄位也會跟著放大，遮住主要的編輯區塊。 "dpi_scale": 1.0, // 顯示空格字元 "draw_white_space": "all", // 字型 "font_face": "Consolas", // 字型大小 "font_size": 23, // tab 按鍵的空格字元，表示一個 tab 代表幾個空格 "tab_size": 4, // 將 tab 轉換為空格，搭配 tab_size 的數值去進行轉換 "translate_tabs_to_spaces": true, // 游標加粗 "wide_caret": true, // 刪除不必要的空白 "trim_trailing_white_space_on_save": true, // 有編輯過且還沒儲存的文件檔案顯示為橘色 "highlight_modified_tabs": true, // 明顯顯示游標目前在哪一行 "highlight_line": true&#125;]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>Sublime Text3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[命令提示視窗中文字亂碼設定]]></title>
    <url>%2F2017%2F06%2F29%2FUnicode-characters-in-windows-command-line%2F</url>
    <content type="text"><![CDATA[在命列提示視窗的中文字亂碼，是因為編碼問題，在 windows 中文系統中，命令提示視窗預設編碼是 Big5，當檔案是 UTF-8 編碼時，檔案讀取中文字會因為編碼不同而變成亂碼。 例如下圖： 這時候可以透過 chcp 指令來變更預設編碼，透過查詢 Code Page 上的 UTF-8 編碼是 65001，直接進行指令設定1chcp 65001 不過需要注意的是，命令提示字元切換成 UTF-8 後，中文輸入法不能使用，不過我是使用 cmder 就沒有這個影響了，而在 cmder 中，可以將 chcp 直接設定在 Setting ，這樣就不會影響命令提示字元設定路徑是 Settings–&gt;Startup–&gt;Environmnet然後將 chcp 65001 輸入 不過使用 UTF-8 編碼還是有個缺點，就是行文字過長時，中文字將會重疊，所以要不要使用，看情況決定囉。 參考資料 Wiki Code Page Microsoft chcp Darkthread Blog Stackoverflow 上的討論]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>notes</tag>
        <tag>Cmder</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Chrome 開發工具開啟命令列選單]]></title>
    <url>%2F2017%2F06%2F27%2Fchrome-DevTools-command-menu%2F</url>
    <content type="text"><![CDATA[在 dev-tip 上的訂閱看到，Chrome 的開發者工具，居然還可以這樣操作。Ctrl + Shift + P 參考資料 dev-tips]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>Chrome</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[位元運算與權限控制]]></title>
    <url>%2F2017%2F06%2F27%2Fbyte-operator-auth%2F</url>
    <content type="text"><![CDATA[這一篇其實就是 byte 換算文章中提過的權限資料，這些權限是使用位元來區分目前使用者擁有那些權限，針對這部分，順便把一些資料整理一下，說明一下權限設計的考量方向，然後針對位元運算與權限的方式說明。 大部分權限的要求，都是管理介面的部分，或是管理者與一般使用者混用的狀況；而常見的權限有建立(新增)、檢視、變更、刪除四種可能，這是操作功能的權限。另外一種就是帳號的權限，該帳號可以操作的系統功能等…。這兩種權限是息息相關的；舉例來說，以下是一個網站系統架構：購物車、分析圖表及會員資料皆可能有新增、檢視、變更、刪除四種功能權限 graph TB A(fa:fa-sitemap 網站系統) A-->B1(fa:fa-cart-arrow-down 購物車) A-->B2(fa:fa-area-chart 分析圖表) A-->B3(fa:fa-user 會員資料) 將系統功能擁有的功能權限列出 購物車，擁有新增、檢視、變更、刪除功能權限 分析圖表，擁有檢視功能權限 會員資料，擁有新增、檢視、變更、刪除功能權限 但是不是每個使用者皆能擁有這些功能權限，假設一個是管理者，一個是一般使用者(購買者)，就可以看出分析圖表僅有管理者擁有，而且會員資料兩者也不同。所以使用者通常對應著系統功能項目的權限，設計方式還是需要看使用情境決定。 graph LR subgraph 使用者 A1(fa:fa-user 管理者) A2(fa:fa-users 一般使用者) end subgraph 系統功能 A1-->|檢視 新增 修改 刪除|B1(fa:fa-cart-arrow-down 購物車) A1-->|檢視|B2(fa:fa-area-chart 分析圖表) A1-->|檢視 新增 修改 刪除|B3(fa:fa-user 會員資料) A2-->|檢視 新增 修改 刪除|B1(fa:fa-cart-arrow-down 購物車) A2-->|檢視 修改 刪除|B3(fa:fa-user 會員資料) end 位元運算與權限上述的部分好像都沒提到位元運算，其實在設定新增、修改、刪除、檢視這幾項功能的時候，就可以使用。 功能 二進制 10進制 新增 00000001 1 修改 00000010 2 刪除 00001000 8 檢視 00000100 4 稍微列出使用使用者對應的功能權限，功能權限應該是包含使用，例如：一般使用者同時擁有檢視、修改與刪除功能權限。這部分做法就是使用 | 運算符了，其作法如下123456789101112131415161718192021222324252627282930313233public enum OperList : byte&#123; /*0x08 : 000010000x04 : 000001000x02 : 000000100x01 : 00000001 */ /// &lt;summary&gt; /// 新增 /// &lt;/summary&gt; add = 0x1, /// &lt;summary&gt; /// 修改 /// &lt;/summary&gt; edit = 0x2, /// &lt;summary&gt; /// 刪除 /// &lt;/summary&gt; del = 0x8, /// &lt;summary&gt; /// 檢視 /// &lt;/summary&gt; view = 0x4&#125;void Main()&#123; var admin = OperList.add |OperList.edit|OperList.del|OperList.view;&#125; 這比較方式就是每一個 bit 去比較 使用者名稱 系統功能 功能權限二進制 功能權限10進制 管理者 會員資料 00001111 15 一般使用者 會員資料 00001110 14 所以當想要判斷使用者是否擁有其功能權限，就可以改使用 &amp; 運算符了。 參考資料 位元說明 位運算與權限控制]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript ~~ 符號]]></title>
    <url>%2F2017%2F06%2F26%2FJavaScript-Double-bitwise-not%2F</url>
    <content type="text"><![CDATA[前陣子在一些討論區看到有人在討論 ~ 這符號的使用，想到自己也幾乎沒在 JavaScript 中使用，就查了一下，看到國外有些探討，使用 ~~ 比使用 Math.floor 的效能好，因此紀錄一下。 ~ (tilde) 位元運算符，延伸可以用來取整數，而且在這連結還有運算效能比較，運算速度比 Math.floor 好。以下列出一些基本比較結果 1234567891011~~null; // output ==&gt; 0~~undefined; // output ==&gt; 0~~0; // output ==&gt; 0~~&#123;&#125;; // output ==&gt; 0~~[]; // output ==&gt; 0~~(9/0); // output ==&gt; 0~~false; // output ==&gt; 0~~true; // output ==&gt; 1~~1.0213; // output ==&gt; 1~~5.91561; // output ==&gt; 5~~-3.6748; // output ==&gt; -3 參考資料 MDN Expressions and operators 程式語言教學誌 JS sitepoint JavaScript Double Negation]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[電腦中的 Byte Bit 等換算]]></title>
    <url>%2F2017%2F06%2F23%2Fbyte-introduction%2F</url>
    <content type="text"><![CDATA[最近弄同事的一個權限資料，是使用 byte 來計算的，當下看到一些 int 與各個單位換算，想說乾脆筆記記錄下來。 最小單位是 Bit (位元)，然後按照 Wiki 資料上的列出 1 Byte = 8 Bits 名稱 符號 2進位 16進位 10進位 Kilobyte KB 2^10 0x400 = 1,024 Bytes Megabyte MB 2^20 0x10 0000 = 1024 KB Gigabyte GB 2^30 0x4000 0000 = 1024 MB Terabyte TB 2^40 0x100 0000 0000 = 1024 GB Petabyte PB 2^50 0x4 0000 0000 0000 = 1024 TB Exabyte EB 2^60 0x1000 0000 0000 0000 = 1024 PB Zettabyte ZB 2^70 0x40 0000 0000 0000 0000 = 1024 EB Yottabyte YB 2^80 0x1 0000 0000 0000 0000 0000 = 1024 ZB 參考資料 Wiki Binary prefix Wiki Metric prefix Byte Binary prefix]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>other</tag>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[透過 IIS 的 Form Authentication 來進行 SSO]]></title>
    <url>%2F2017%2F06%2F23%2FForm-Authentication-SSO-Sample%2F</url>
    <content type="text"><![CDATA[Introduction雖然現在 .Net 的登入機制已經較少 Form Authentication，但是剛好看到這範例，分享一下。 Conetent透過使用相同的 Form Authentication 來使兩個網站的登入機制使用共同的資料。沒有單一簽入(SSO)的流程 graph LR A(fa:fa-user-md User) A-->B2[fa:fa-sign-in 登入A網站] A-->B3[fa:fa-sign-in 登入B網站] B2-->C1[fa:fa-sign-in 網站A] B3-->C2[fa:fa-sign-in 網站B] 對比使用單一簽入(SSO)的流程 graph LR A(fa:fa-user-md User) A-->B[fa:fa-sign-in SSO登入] B-->C1[fa:fa-sign-in 網站A] B-->C2[fa:fa-sign-in 網站B] 這可以明顯看出，登入方式變成一個 SSO 登入了，當然此處是指會員資料的取得，實際看頁面流程的話，就不是這樣的單純。以下簡單列出 arunendapally SSO 範例的樹狀結構，可以看出範例列了三個網站 SSO 單一簽入的網站 模擬網站 A 模擬網站 B 123456789101112131415161718192021├─SSO│ ├─App_Data│ ├─App_Start│ ├─Controllers│ ├─Models│ └─Views│ └─Account├─WebApp1│ ├─App_Data│ ├─App_Start│ ├─Controllers│ ├─Models│ └─Views│ └─Home└─WebApp2 ├─App_Data ├─App_Start ├─Controllers ├─Models └─Views └─Home 登入檢查 FormsAuthentication123456789101112131415161718192021222324[AllowAnonymous] [HttpPost] [ValidateAntiForgeryToken] public ActionResult Login(string username, string password, string returnUrl) &#123; if (FormsAuthentication.Authenticate(username, password)) &#123; FormsAuthentication.SetAuthCookie(username, false); if (!string.IsNullOrEmpty(returnUrl)) &#123; return Redirect(returnUrl); &#125; else &#123; return RedirectToAction("Index", "Home"); &#125; &#125; else &#123; ModelState.AddModelError(string.Empty, "Invalid login details"); ViewBag.ReturnUrl = returnUrl; return View(); &#125; &#125; 以上都是程式方面的操作，比較值得注意的是，這範例是透過 IIS 的 machine key 來進行設定這三個網站是使用同一份登入資訊 1234&lt;machineKey validationKey="E4451576F51E0562D91A1748DF7AB3027FEF3C2CCAC46D756C833E1AF20C7BAEFFACF97C7081ADA4648918E0B56BF27D1699A6EB2D9B6967A562CAD14767F163" decryptionKey="6159C46C9E288028ED26F5A65CED7317A83CB3485DE8C592" validation="HMACSHA256" decryption="AES" /&gt; 詳細的操作內容可以參考 arunendapally blog 文章，此處補充 IIS 的設定，首先在開啟 IIS ，選取 SSO 網站的電腦金鑰，並記錄下其驗證金鑰與解密金鑰，接著在網站 A 與網站 B，都點擊電腦金鑰然後將 SSO 網站的驗證金鑰與解密金鑰設定到網站 A 與網站 B 這樣這範例就可以操作囉。 Reference此文的範例是參考 arunendapally，範例可以在 Github 取得 arunendapally blog arunendapally codeproject arunendapally github MSDN authentication]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>Asp.Net MVC</tag>
        <tag>C#</tag>
        <tag>IIS</tag>
        <tag>SSO</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LinQ IQueryable 轉換 DataTable]]></title>
    <url>%2F2017%2F06%2F20%2Flinq-IQueryable-convert-to-DataTable%2F</url>
    <content type="text"><![CDATA[Introduction最近有些案子需要使用到這需求，把以前一些方法紀錄一下。 Conetent目的是轉換 DateTable 使用，所以做法有很多，甚至是一開始就使用 DataSet 去取得資料來源等，但是這邊單純討論轉換 DataTable 。想要轉換到 DataTable 最常見的就是反射(Reflection) ，甚至官方都有文件資料說明如何實作 CopyToDataTable 。以下就簡單說明反射的部分 此部分是引用黑暗執行緒大大 的範例12345678910111213141516171819202122232425262728public DataTable LinqQueryToDataTable&lt;T&gt;(IEnumerable&lt;T&gt; query) &#123; DataTable tbl = new DataTable(); PropertyInfo[] props = null; foreach (T item in query) &#123; if (props == null) //尚未初始化 &#123; Type t = item.GetType(); props = t.GetProperties(); foreach (PropertyInfo pi in props) &#123; Type colType = pi.PropertyType; //針對Nullable&lt;&gt;特別處理 if (colType.IsGenericType &amp;&amp; colType.GetGenericTypeDefinition() == typeof(Nullable&lt;&gt;)) colType = colType.GetGenericArguments()[0]; //建立欄位 tbl.Columns.Add(pi.Name, colType); &#125; &#125; DataRow row = tbl.NewRow(); foreach (PropertyInfo pi in props) row[pi.Name] = pi.GetValue(item, null) ?? DBNull.Value; tbl.Rows.Add(row); &#125; return tbl; &#125; 或是使用 Json 的方式來轉換，不過這方式最好使用在資料量比較小的情境下 123456789101112131415public DataTable LinqToDataTableByJson&lt;T&gt;(IEnumerable&lt;T&gt; query) &#123; JArray jObjects = new JArray(); PropertyInfo[] props = null; foreach (var item in query) &#123; Type t = item.GetType(); props = t.GetProperties(); var jo = new JObject(); foreach (PropertyInfo pi in props) jo.Add(pi.Name, (JToken)pi.GetValue(item, null).ToString()); jObjects.Add(jo); &#125; return JsonConvert.DeserializeObject&lt;DataTable&gt;(jObjects.ToString()); &#125; Reference 余小章 @ 大內殿堂 darkthread stackoverflow .Net Docs LINQ to DataSet .Net Docs Implement CopyToDataTable]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>Linq</tag>
        <tag>ADO.NET</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ArcGIS API for Js 應用，將圖層設定為底圖]]></title>
    <url>%2F2017%2F06%2F16%2FArcGis-set-gee-map-for-basemap%2F</url>
    <content type="text"><![CDATA[Introduction紀錄一下 ArcGIS API for Js 的一些應用 Conetent一般底圖設定方式是使用 basemaps 進行設定，但其實如果對於地圖類型的 API 稍微熟悉的話，就會知道，其上的圖層是一層層堆疊的，底圖也就是最底層的那一層。 利用這個概念，透過 WebTiledLayer 載入圖層，並且保持 basemaps 為空，這樣所設定的第一層圖層就是底層囉。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152&lt;!doctype html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;meta name="viewport" content="initial-scale=1, maximum-scale=1,user-scalable=no"&gt; &lt;title&gt;&lt;/title&gt; &lt;link rel="stylesheet" href="http://js.arcgis.com/3.15/esri/css/esri.css"&gt; &lt;style&gt; html, body, #map &#123; height: 100%; width: 100%; margin: 0; padding: 0; &#125; body&#123; background-color: #fff; overflow:hidden; font-family: sans-serif; &#125; #header &#123; padding: 4px 15px 4px 0; background-color: #F2F2EC; color: #575757; font-size: 16pt; text-align: right; font-weight: bold; height:55px; &#125; #subheader &#123; color: #575757; font-size: small; padding: 5px 0 0 0; text-align: right; &#125; #subheader a &#123; color: #575757; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div id="mainWindow" data-dojo-type="dijit/layout/BorderContainer" data-dojo-props="design:'headline',gutters:false" style="width: 100%; height: 100%; margin: 0;"&gt; &lt;div id="header" data-dojo-type="dijit/layout/ContentPane" data-dojo-props="region:'top'"&gt; Base Map Demo &lt;/div&gt; &lt;div id="map" class="shadow" data-dojo-type="dijit/layout/ContentPane" data-dojo-props="region:'center'"&gt; &lt;/div&gt; &lt;/div&gt; &lt;script src="http://js.arcgis.com/3.15/"&gt;&lt;/script&gt; &lt;/body&gt;&lt;/html&gt; 1234567891011121314151617181920212223var map; require([ "esri/map", "esri/layers/WebTiledLayer", "dojo/parser", "dijit/layout/BorderContainer", "dijit/layout/ContentPane", "dojo/domReady!" ], function( Map, WebTiledLayer, parser ) &#123; parser.parse(); map = new Map("map", &#123; center: [121.2028889,24.8221225], zoom: 8 &#125;); var twMap = new WebTiledLayer("http://maps.nlsc.gov.tw/S_Maps/wmts?SERVICE=WMTS&amp;REQUEST=GetTile&amp;VERSION=1.0.0&amp;LAYER=EMAP&amp;STYLE=_null&amp;TILEMATRIXSET=EPSG:3857&amp;TILEMATRIX=EPSG:3857:&#123;level&#125;&amp;TILEROW=&#123;row&#125;&amp;TILECOL=&#123;col&#125;&amp;FORMAT=image/png",&#123; "id": "baseMaptw" &#125;) var gooMap = new WebTiledLayer("http://mt0.google.com/vt/lyrs=m&amp;hl=cht&amp;x=&#123;col&#125;&amp;y=&#123;row&#125;&amp;z=&#123;level&#125;&amp;s=Ga", &#123; "copyright": "baseDemoMap", "id": "baseGoomap", &#125;); map.addLayer(twMap); &#125;); Reference 國土測繪圖資服務雲 國土測繪圖資 ArcGIS API form JavaScript WebTiledLayer]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>ArcGIS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Visual Studio 專案透過指令列建置]]></title>
    <url>%2F2017%2F06%2F14%2Fbatch-for-build-visual-studio-project%2F</url>
    <content type="text"><![CDATA[Introduction建立批次檔案的建置指令，提供後續 hook up 的機制。 Conetent引用 MSDN 上的說明 若要建置方案中的特定專案的特定目標在命令列中，輸入 MSBuild.exe &lt;SolutionName&gt;.sln, ，其中 對應至包含您想要執行的目標的方案的檔案名稱。指定的目標之後 /t 切換格式 ProjectName:TargetName。範例下列範例會執行 Rebuild 的目標 NotInSlnFolder 專案，然後再執行 Clean 的目標 InSolutionFolder 專案中，位於 NewFolder 方案資料夾。 1msbuild SlnFolders.sln /t:NotInSlnfolder:Rebuild;NewFolder\InSolutionFolder:Clean 知道命令列的指令後，可以參考 MSDN 指令列說明 寫成批次檔案(.bat) 1234567891011121314151617181920212223@echo offpauseREM ==指定要使用的.NET版本.==set NetVer=v4.0.30319REM ==指定建置資訊結果資訊輸出的目錄==set BuildInfoDir=自動建置結果REM ==指定要編譯的方案檔==set SlnFile=projectName.slnset Builders=%windir%\Microsoft.NET\Framework\%NetVer%\MSBuild.exeif not exist %BuildInfoDir%\ mkdir %BuildInfoDir%\REM 步驟 ==.更新最新的程式.==svn updateREM 步驟 ==.開始執行建置動作.==REM 建立 摘要、警告、錯誤 log 文件%Builders% %SlnFile% /t:Rebuild /p:Configuration=Release /flp:Summary;Verbosity=minimal;LogFile=%BuildInfoDir%\摘要.txt /flp1:warningsonly;logfile=%BuildInfoDir%\警告.txt /flp2:errorsonly;logfile=%BuildInfoDir%\錯誤.txtpause Reference MSDN Sln Build MSDN Command-Line Reference MSDN C# Compiler]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>Visual Studio</tag>
        <tag>batch</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[.Net MVC MetaData]]></title>
    <url>%2F2017%2F06%2F13%2Fmvc-metadata%2F</url>
    <content type="text"><![CDATA[Introduction最近剛好有人詢問，就乾脆記錄下來好了。 Conetent主要是使用在 Model 欄位上； 例如一個 MVC 5.x 專案，使用 DataBase first 的 Model ，所以該 Model 是經由 T4 範本產生，如果將修改項目寫在產生的 model 類別上，當需要重新更新資料庫對應的時候，所修改的項目就會被覆蓋掉了。 所以這時候使用 MetaData 的方式處理，既可以不變動自動產生的對應類別，又可以自訂需要的驗證在 MetaData 上或是添加顯示名稱等等。 作法因為 EntityFramework 產生的資料表對應類別，都會是 partial 類別，所以可以很好去擴充。首先可以建立一個資料夾專門放置 MetaData，然後打開想要建立 MetaData 的資料表對應類別1234567891011121314151617181920212223242526272829303132333435363738394041424344//------------------------------------------------------------------------------// &lt;auto-generated&gt;// This code was generated from a template.//// Manual changes to this file may cause unexpected behavior in your application.// Manual changes to this file will be overwritten if the code is regenerated.// &lt;/auto-generated&gt;//------------------------------------------------------------------------------namespace MetaData.Models&#123; using System; using System.Collections.Generic; public partial class Orders &#123; [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")] public Orders() &#123; this.Order_Details = new HashSet&lt;Order_Details&gt;(); &#125; public int OrderID &#123; get; set; &#125; public string CustomerID &#123; get; set; &#125; public Nullable&lt;int&gt; EmployeeID &#123; get; set; &#125; public Nullable&lt;System.DateTime&gt; OrderDate &#123; get; set; &#125; public Nullable&lt;System.DateTime&gt; RequiredDate &#123; get; set; &#125; public Nullable&lt;System.DateTime&gt; ShippedDate &#123; get; set; &#125; public Nullable&lt;int&gt; ShipVia &#123; get; set; &#125; public Nullable&lt;decimal&gt; Freight &#123; get; set; &#125; public string ShipName &#123; get; set; &#125; public string ShipAddress &#123; get; set; &#125; public string ShipCity &#123; get; set; &#125; public string ShipRegion &#123; get; set; &#125; public string ShipPostalCode &#123; get; set; &#125; public string ShipCountry &#123; get; set; &#125; public virtual Customers Customers &#123; get; set; &#125; public virtual Employees Employees &#123; get; set; &#125; [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")] public virtual ICollection&lt;Order_Details&gt; Order_Details &#123; get; set; &#125; public virtual Shippers Shippers &#123; get; set; &#125; &#125;&#125; 注意一下，類別檔案與 MetaData 的檔案需要在同一 namespace 下，然後使用 MeteData 需要引用 System.ComponentModel.DataAnnotations。 123456789101112namespace MetaData.Models&#123; [MetadataType(typeof(OrdersMetadata))] public partial class Orders &#123; public class OrdersMetadata &#123; [DisplayName("測試測試")] public Nullable&lt;decimal&gt; Freight &#123; get; set; &#125; &#125; &#125;&#125; Reference示範程式碼採用北風資料庫進行。 Github .net core Github ASP.NET MVC 5.x … Northwind 資料庫 Sample Code]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>Asp.Net MVC</tag>
        <tag>C#</tag>
        <tag>EntityFramework</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript Docxtemplater 匯出 Word 檔案套件]]></title>
    <url>%2F2017%2F06%2F12%2Fjavascript-docxtemplater%2F</url>
    <content type="text"><![CDATA[Introduction以前匯出 word 檔案，都是從後端進行；這次試試看從前端進行。 Conetentdocxtemplater 這套件的流程簡單描述是採用一個 word 檔案當作 template 樣板，透過 ajax 傳送至前端，然後按照對應的 object key value 去填入資料。聽起來很簡易，但是裡面應用的東西不少；安裝方式可以透過 npm 或 bower 或是手動引入檔案。 使用 npm 安裝使用 npm 的話，我在重新 compile 的時候，發生錯誤；所以我是直接抓取 Github 上的檔案，然後 jszip 只能使用 2.x 版本。 12npm install docxtemplater --save-devnpm install jszip@2 --save-dev 使用 bower 安裝bower 安裝執行，倒是沒有發生其他錯誤，只是 bower 安裝的只有 docxtemplater build 與 jszip，所以還需要去 docxtemplater 抓取 jszip-utils.js 與 jszip-utils-ie.js (不同瀏覽器的使用)檔案 1bower install --save docxtemplater 示範程式碼如下，可以在 Github 上取得，其 docxtemplater-latest 引用的版本是 3.0.10 版本。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960&lt;!doctype html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;meta name="description" content=""&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1"&gt; &lt;title&gt;Demo&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;input type="button" id="export" value="export word" /&gt; &lt;script type="text/javascript" src="bundle.js"&gt;&lt;/script&gt; &lt;!-- &lt;script src="/Jss/docxtemplater/docxtemplater.v3.1.3.js"&gt;&lt;/script&gt; --&gt; &lt;!-- &lt;script src="/node_modules/jszip/dist/jszip.min.js"&gt;&lt;/script&gt; --&gt; &lt;script src="/Jss/docxtemplater/docxtemplater-latest.js"&gt;&lt;/script&gt; &lt;script src="/Jss/docxtemplater/jszip.min.js"&gt;&lt;/script&gt; &lt;script src="/Jss/docxtemplater/vendor/file-saver.min.js"&gt;&lt;/script&gt; &lt;!--[if IE]&gt;&lt;script src="~/Jss/docxtemplater/vendor/jszip-utils-ie.js"&gt;&lt;/script&gt;&lt;![endif]--&gt; &lt;!--[if !IE]&gt;--&gt; &lt;script src="/Jss/docxtemplater/vendor/jszip-utils.js"&gt;&lt;/script&gt; &lt;!--&lt;![endif]--&gt; &lt;script type="text/javascript"&gt; window.onload = function() &#123; let btnExport = document.getElementById("export"); let loadFile = function(url, callback) &#123; /// &lt;summary&gt; /// loadFile for export word. /// &lt;/summary&gt; /// &lt;param name="url"&gt;The url path.&lt;/param&gt; /// &lt;param name="callback"&gt;The callback.&lt;/param&gt; JSZipUtils.getBinaryContent(url, function(err, data) &#123; callback(null, data); &#125;); &#125;; btnExport.addEventListener("click", function() &#123; loadFile("template.docx", function(err, content) &#123; let objData = &#123; "title": "大標題", "subtitle": "子標題", "desc": "隨便的內容描述", "header1":"表格標題", "header2":"第二列", "cell1":"你好", "cell2":"word 文件" &#125;; let zip = new JSZip(content); let doc = new Docxtemplater().loadZip(zip) doc.setData(objData) //set the templateVariables doc.render() //apply them (replace all occurences of &#123;title&#125; by Hipp, ...) let out = doc.getZip().generate(&#123; type: "blob" &#125;) //Output the document using Data-URI saveAs(out, "output.docx") &#125;); &#125;); &#125;; &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 最後說明一下 word 檔案的寫法，其格式為直接在 word 檔案寫上 {ObjectProperty} 大括弧裡面寫上 JS 物件的屬性名稱，在前端 setData function 執行時，會去自動對應。 Reference docxtemplater Documentation docxtemplater demo site docxtemplater GitHub docxtemplater build all version jszip My Sample Github]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SQLServer 的觸發程序]]></title>
    <url>%2F2017%2F06%2F10%2Fsqlserver-trigger%2F</url>
    <content type="text"><![CDATA[Introduction簡單介紹 Trigger 的撰寫 Conetent觸發程序可以設定在 table 異動或是欄位資料異動，而當 table 資料異動的時候，可能有新增、刪除、修改等情況，在 SQLServer 中，異動的時候會產生暫存的 inserted 和 deleted 兩個 table ，兩個 table 格式資訊皆與原 table 相同； inserted table 紀錄新增資料、修改後資料 deleted table 紀錄刪除資料、修改前資料 以下範例展示該資料表異動的時候新增、修改或刪除的判斷。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960-- =============================================-- Author: Allen.YU-- Script Version: 1.0-- MSSQL Version: 20012+-- Create Date: yyyy-MM-dd-- Update Date: yyyy-MM-dd-- Description: description-- =============================================CREATE TRIGGER [dbo].[trigger_name] ON [dbo].[yourTable] -- 指定要觸發的狀態 FOR INSERT,UPDATE,DELETEAS BEGIN-- 當 SET NOCOUNT 爲 ON 時，不返回計數（表示受 Transact-SQL 語句影響的行數）SET NOCOUNT ON;-- 以下 為 inserted 和 deleted 皆有資料表示為 UPDATE 狀態-- 或是使用 UPDATE(columnName) 針對欄位名稱判斷-- 指定某一欄位名稱是否修改狀態IF (UPDATE([DataType]) and EXISTS (SELECT 1 FROM inserted)AND EXISTS (SELECT 1 FROM deleted))BEGINPRINT '--- update 修改狀態 ---';-- 撰寫要變動的 codeEND-- 以下 為 inserted 有資料 deleted 無資料表示為 INSERT 狀態ELSEIF EXISTS (SELECT 1 FROM inserted) AND NOT EXISTS (SELECT 1 FROM deleted)BEGINPRINT '--- create 新增狀態 ---';-- 撰寫要變動的 codeEND-- 以下 為 inserted 無資料 deleted 有資料表示為 DELETE 狀態ELSEIF NOT EXISTS (SELECT 1 FROM inserted) AND EXISTS (SELECT 1 FROM deleted)BEGINPRINT '--- delete 刪除狀態---';ENDEND Reference MSDN Trigger]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>T-SQL</tag>
        <tag>SQLServer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SQLServer Partition By]]></title>
    <url>%2F2017%2F06%2F09%2Fsql-PARTITION-BY%2F</url>
    <content type="text"><![CDATA[Introduction持續整理。 Conetent說明 Partition By 引數 將查詢結果集分成幾個資料分割。視窗函數會分別套用至每個資料分割，並且針對每個資料分割重新開始計算。引用自德瑞克部落格 撰寫統計分析資料時，時常需要大量的運用子查詢及彙總函式(SUM、AYG、COUNT)，結合次序函數應用的話，程式碼少了許多，也較好維護。 123456789SELECT Project.PrjStartDay ,Project.PrjEndDay ,SUM(Updateuid) OVER (PARTITION BY PrjStatus) AS 'Total' ,AVG(Updateuid) OVER (PARTITION BY PrjStatus) AS 'Avg' ,COUNT(Updateuid) OVER (PARTITION BY PrjStatus) AS 'Count' ,MIN(Updateuid) OVER (PARTITION BY PrjStatus) AS 'Min'FROM dbo.ProjectWHERE Project.PrjStatus = 1 Reference 德瑞克部落格 MSDN SELECT-OVER 子句 MSDN 次序函數 MSDN 彙總函式]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>T-SQL</tag>
        <tag>SQLServer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JSON.parse 介紹]]></title>
    <url>%2F2017%2F06%2F08%2Fjavascript-JSON-parse%2F</url>
    <content type="text"><![CDATA[Introduction在網站的開發中，JSON 資料是很常見，所以 JSON 物件的轉換就會有所需要； Conetent此篇主要介紹把 JSON 字串轉換成 JavaScript 物件的方法 JSON.parse，以下引用 MDN JSON.parse JSON.parse() 方法把會把一個JSON字串轉換成 JavaScript的數值或是物件。另外也可選擇使用reviver函數讓這些數值或是物件在被回傳之前做轉換。 語法1JSON.parse(text[, reviver]) 參數 text要解析成 JSON 的字串。針對 JSON 語法的描述，請參見 JSON 物件。 reviver 選擇性為選擇性的參數，用來描述JSON字串中的值該如何被解析並回傳的函式(function) 回傳值從給定的 JSON text 回傳對應的 Object。 Throws如果解析的字串不是合法的JSON格式會丟出一個 SyntaxError 例外引用自 MDN JSON.parse 此處針對使用 reviver 選擇性參數來作範例，例如以下的 JSON 字串，birthday 的資料可以直接在 parse 轉換好在輸出 1234567891011121314151617181920212223242526let jstr = '&#123;"name":"allen","gender":"male","birthday":"1496905033982"&#125;';// 直接轉換JSON.parse(jstr);// 會輸出// Object &#123;name: "allen", gender: "male", birthday: "1496905033982"&#125;// 使用 reviver 參數// key: JSON 字串中的 key (例如:name、gender...)// value: JSON 字串中的 value (例如：allen、male...)JSON.parse(jstr,function(key,value)&#123; if(key === "birthday")&#123; let options = &#123; year: 'numeric', month: '2-digit', day: '2-digit', hour: '2-digit', minute: '2-digit' &#125;; return new Date(+value).toLocaleString(undefined,options); &#125; return value;&#125;);// 將會輸出// Object &#123;name: "allen", gender: "male", birthday: "2017-06-08 14:57"&#125; Reference MDN JSON parse MDN JSON MDN toLocaleString Wiki JSON]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>JSON</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[命名規則]]></title>
    <url>%2F2017%2F06%2F07%2Fnaming-conventions%2F</url>
    <content type="text"><![CDATA[Introduction簡介幾種常見的的命名法 Conetent駝峰式(Camel Case) 命名方式為單字的首字母大寫，又可以分為大駝峰(upper camel case)與小駝峰(lower camel case) 小駝峰(lower camel case) 第一個單字的首字母小寫，其餘單字首字母大寫例如：firstName、userPhone 大駝峰(upper camel case,Pascal Case) 第一個單字的首字母大寫，其餘單字首字母大寫例如：FirstName、UserPhone Snake Case 單字與單字間使用下劃線分隔例如：first_name、user_phone kebab Case(spinal-case,Train-Case,Lisp-case) 單字與單字間使用連接符號，有多種稱呼例如：first-name、user-phone Reference有興趣的可以觀看 Wiki Naming Convention 裡面有介紹一些各種語言的習慣使用方式等等。 Wiki Letter Case Wiki Snake Case Wiki Camel Case Wiki Pascal Case Wiki Lisp Wiki Naming Convention]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>Naming Conventions</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Server 端給予日期資料是數字的轉換]]></title>
    <url>%2F2017%2F06%2F07%2FJavaScript-date-numeric-to-date-object%2F</url>
    <content type="text"><![CDATA[Introduction有時候， Server Side 給予的日期資料會類似這種\Date(1496592000000)\，所以介紹一下這種 Date 格式。 Conetent這種資料格式是其實就是 getTime 方法取得的資料，其數字資料就是 指定的日期和時間距 1970 年1 月1 日 00:00:00 UTC 之間的毫秒數。 情境 將 /Date(1488297600000)/ 轉換為 Date 12345678910function dateTimeReviver(value) &#123; /// &lt;summary&gt; /// Date the time reviver. /// &lt;/summary&gt; /// &lt;param name="value"&gt;The value.&lt;/param&gt; var a; return typeof value === "string" &amp;&amp; (a = /\/Date\((\d*)\)\//.exec(value),a) ? new Date(+a[1]) : value; &#125; Reference MDN Date getTime MDN Operators]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Javascript Format 日期轉換處理]]></title>
    <url>%2F2017%2F06%2F06%2Fjavascript-format%2F</url>
    <content type="text"><![CDATA[Introduction主要使用在日期轉換處理，擴展原本的 Format 。 Conetent因為使用在日期轉換，所以首先先介紹一下 Date，以下引用 MDN 上的介紹 建立一個 JavaScript Date 物件來指向某一個時間點。Date 物件是基於世界標準時間（UTC） 1970 年 1 月 1 日開始的毫秒數值來儲存時間。 語法 1234new Date();new Date(value);new Date(dateString);new Date(year, month[, day[, hour[, minutes[, seconds[, milliseconds]]]]]); value自世界標準時間（UTC） 1970 年 1 月 1 日 00:00:00 開始的毫秒整數（Integer）值（Unix 紀元；但要注意到大多 Unix &gt; 時間戳記是以秒而非毫秒為單位）。 dateString表示時間日期的字串。這個字串應該要能被 Date.parse() 方法解析（符合 IETF-compliant RFC 2822 timestamps 及 version of &gt; ISO8601 格式要求).附註： 由於各家瀏覽器有所不同且具有差異性，因此非常不鼓勵使用 Date 建構子（或 Date.parse &gt; 方法，它們是同等的）來解析時間日期字串。 year表示年份的整數。當數值落在 0 到 99 之間，表示 1900 到 1999 之間的年份。參考下面的範例. month表示月份的整數。由 0 開始（一月）到 11 （十二月）。 day選用。表示月份中第幾天的整數值。 hour選用。表示小時數的整數值。 minute選用。表示分鐘數的整數值。 second選用。表示秒數的整數值。 millisecond選用。表示毫秒數的整數值。 日期格式中，個人蠻習慣 formate(&quot;yy-MM-dd&quot;) 這種表示方式，所以這邊進行 Format 的擴充，透過 prototype 來進行。 12345678910111213141516171819202122Date.prototype.Format = function (fmt) &#123; /// &lt;summary&gt; /// 日期格式轉換 /// &lt;/summary&gt; /// &lt;param name="fmt"&gt;The fmt.&lt;/param&gt; const o = &#123; "M+": this.getMonth() + 1, //月份 "d+": this.getDate(), //日 "h+": this.getHours(), //小时 "m+": this.getMinutes(), //分 "s+": this.getSeconds(), //秒 "q+": Math.floor((this.getMonth() + 3) / 3), //季度 "S": this.getMilliseconds() //毫秒 &#125;; if (/(y+)/.test(fmt)) fmt = fmt.replace(RegExp.$1, (this.getFullYear().toString()).substr(4 - RegExp.$1.length)); for (let k in o) if (o.hasOwnProperty(k)) if (new RegExp(`($&#123;k&#125;)`).test(fmt)) fmt = fmt.replace(RegExp.$1, (RegExp.$1.length === 1) ? (o[k]) : ((`00$&#123;o[k]&#125;`).substr(o[k].toString().length))); return fmt;&#125; Reference轉換的程式中，這邊列出使用的部分語法說明 MDN Date MDN Template_literals MDN RegExp]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript 中 Reduce 方法筆記]]></title>
    <url>%2F2017%2F06%2F05%2Fjavascript-reduce-note%2F</url>
    <content type="text"><![CDATA[IntroductionJs 中的 reduce 出來一段時間了，但是還是很少使用到，一方面是手上的需求都只是 CRUD的處理而已，一方面處理陣列我也比較常使用 map ，這邊就做個紀錄吧。 Conetent首先說明一下 reduce 的定義，以下引用自 MDN 。 reduce() 方法對累加器和數組中的每個元素(從左到右)應用一個函數，將其減少為單個值。 語法arr.reduce(callback,[initialValue]) 參數 callback执行数组中每个值的函数，包含四个参数 accumulator上一次調用回調返回的值，或者是提供的初始值（ initialValue ） currentValue數組中正在處理的元素 currentIndex數據中正在處理的元素索引，如果提供了 initialValue ，從0開始；否則從1開始 array調用reduce的數組 initialValue可選項，其值用於第一次調用callback 的第一個參數。 123456789101112131415161718192021222324let sum = [0, 1, 2, 3].reduce(function(acc, val) &#123; return acc + val;&#125;, 0);console.log(sum);// 6let list1 = [[0, 1], [2, 3], [4, 5]];let list2 = [0, [1, [2, [3, [4, [5, [6]]]]]]];const flatten = (arr) =&gt; &#123; return arr.reduce( (acc, val) =&gt; &#123; return acc.concat(Array.isArray(val) ? flatten(val) : val) &#125;, [] );&#125;;flatten(list1); // [0, 1, 2, 3, 4, 5]flatten(list2); // [ 0, 1, 2, 3, 4, 5, 6 ] 引用自 MDN 的說明 由 MDN 上的說明可以得知 reduce 是專門來處理陣列的運算，不過我這邊比較常處理物件的處理，所以以下就使用 reduce 來針對物件處理。 情境 依據 Object 中的 key 調整 value，將 name 轉換成大寫。 以下為作法，另外這是故意使用 reduce 來處理，這例子使用 for…in 迴圈處理亦可 123456789let testobj = &#123;"id": 2, "name": "allen"&#125;;// 以下的 &#123;&#125; 為設定 previouse 的初始值const reduceobj = Object.keys(testobj).reduce(function(previous, current) &#123; previous[current] = (current!=="name")? testobj[current] : testobj[current].toUpperCase(); console.log("previous: " + previous +" current: " + current ); return previous;&#125;,&#123;&#125;);console.log("reduceobj: " + reduceobj); Reference MDN reduce MDN map MDN Object]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS 字型大小 Pt、px、em 說明]]></title>
    <url>%2F2017%2F06%2F03%2Fcss-pt-px-em-percent-difference%2F</url>
    <content type="text"><![CDATA[Introduction紀錄 CSS Unit 的說明。 Conetent以下列出 pt、px、em 在 CSS 樣式中的單位說明 pt(point) 一般印列用字體尺寸，網頁一般不推薦使用絕對長度單位。點（Point）。1in = 2.54cm = 25.4 mm = 72pt = 6pc (引自CSS2.0手冊) px(pixel) 像素，相對長度單位。像素 px 是相對於顯示器屏幕分辨率而言的。 (引自CSS2.0手冊) em 相對長度單位，類似百分比，相對於當前對象內文本的字體尺寸。如當前對行內文本的字體尺寸未被人為設置，則相對於瀏覽器的默認字體尺寸 (引自CSS2.0手冊)。1em = 100% = 12pt = 16px = 瀏覽器預設尺寸 Reference W3schools CSS Units W3C units px to em 換算表 CSS 2.0 中文手冊]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTML字元符號 &Nbsp; &Ensp; &Emsp; 的差異]]></title>
    <url>%2F2017%2F06%2F03%2Fhtml-nbsp-emsp-emsp-difference%2F</url>
    <content type="text"><![CDATA[Introduction在進行一些 HTML 頁面中文對齊時，很常使用一些空格符號來調整，這邊來把幾個詳細的符號介紹與紀錄。 Conetent以下條列說明這幾個空白符的定義。 &amp;nbsp; 半形的不換行空格，就是一般鍵盤上的空白鍵(space key)產生的空格 &amp;ensp; 半形的空格，特性為寬度是 1/2 個中文字寬度 &amp;emsp; 全形的空格，特性係寬度是 1 個中文字寬度 以下列出幾個比較常用的字符對應表 Result Description Entity Name Entity Number non-breaking space &amp;nbsp; &amp;#160; &lt; less than &amp;lt; &amp;#60; &gt; greater than &amp;gt; &amp;#62; &amp; ampersand &amp;amp; &amp;#38; “ double quotation mark &amp;quot; &amp;#34; ‘ single quotation mark (apostrophe) &amp;apos; &amp;#39; ¢ cent &amp;cent; &amp;#162; £ pound &amp;pound; &amp;#163; ¥ yen &amp;yen; &amp;#165; € euro &amp;euro; &amp;#8364; © copyright &amp;copy; &amp;#169; ® registered trademark &amp;reg; &amp;#174; 在 HTML 中，可以使用 Entity Name 或是 Entity Number 來顯示特定的字元符號，但是直接使用這些表達方式，在某些設備讀取時，可能會影響正常閱讀，這時可以考慮使用 CSS 的 content 來調整，注意 content 內容設定字元符必須為 16 進制數字 Reference W3C Html Entities W3C Symbols Wiki non-breaking space MDN CSS content]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>notes</tag>
        <tag>Html</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[檔案上傳透過 JS 驗證檔案大小]]></title>
    <url>%2F2017%2F06%2F02%2Ffile-upload-size-validation-in-js%2F</url>
    <content type="text"><![CDATA[Introduction整理一下資料，順便紀錄一下。 Conetent作法很簡易，透過 file API 來取得檔案大小 12&lt;input type='file' id='fileinput'&gt;&lt;input type='button' id='btnLoad' value='取得檔案大小'&gt; 123456789101112131415161718192021222324252627282930313233343536373839document.getElementById("btnLoad").addEventListener("click", function(event) &#123; /// &lt;summary&gt; /// 取得檔案大小按鈕觸發事件 /// &lt;/summary&gt; var fileinput, getfile; if (!window.FileReader) &#123; alert("file API 尚未支援此瀏覽器"); return; &#125; fileinput = document.getElementById('fileinput'); if (!fileinput) &#123; txtAppend("p", "找不到 fileinput 元素"); &#125; else if (!fileinput.files) &#123; txtAppend("p", "此瀏覽器不支援 input 中的 files 屬性"); &#125; else if (!fileinput.files[0]) &#123; txtAppend("p", "請先選擇檔案在點擊取得檔案大小"); &#125; else &#123; getfile = fileinput.files[0]; console.log(getfile); txtAppend("p", "檔案大小 " + getfile.size + " bytes"); txtAppend("p", "檔案大小 " + getfile.size / 1024 + " KB"); txtAppend("p", "檔案大小 " + getfile.size / 1024 / 1024 + " MB"); &#125;&#125;, false);function txtAppend(tagName, innerHTML) &#123; /// &lt;summary&gt; /// 附加 html 內容 /// &lt;/summary&gt; /// &lt;param name="tagName"&gt;HTML tag 名稱&lt;/param&gt; /// &lt;param name="innerHTML"&gt;HTML 內容&lt;/param&gt; var elm; elm = document.createElement(tagName); elm.innerHTML = innerHTML; document.body.appendChild(elm);&#125; Jsfiddle 上的範例 Reference MDN File]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HttpErros 與 CustomErrors 的自訂導向]]></title>
    <url>%2F2017%2F06%2F01%2Fwebconfig-httpErros-and-customErrors%2F</url>
    <content type="text"><![CDATA[Introduction自訂 .Net WebSite 的錯誤頁面導向。 Conetent以下分別說明 HttpErrors 與 CustomErros ，這兩個差別在於 HttpErrors 存取靜態檔案（如.js、.html、.css、.jpg…）發生錯誤，會依照此設定執行 CustomErros 由 .Net 程式發生的錯誤（例如：.aspx、.ashx、MVC 路由），才會在 CustomError 的設定執行 HttpErrorserrorMode 非必要屬性，預設為 DetailedLocalOnly DetailedLocalOnly 本機端顯示詳細錯誤訊息，非本機端顯示自訂錯誤頁面不想輸入 DetailedLocalOnly 文字的話，可以輸入代碼，其代碼為 0 Custom 不管本機端或是遠端客戶，皆顯示自訂錯誤頁面。其代碼為 1 Detailed 全部都顯示詳細錯誤訊息其代碼為 2 以下是我的設定12345678&lt;system.webServer&gt; &lt;httpErrors errorMode="DetailedLocalOnly" existingResponse="Replace" defaultResponseMode="ExecuteURL"&gt; &lt;remove statusCode="404" subStatusCode="-1" /&gt; &lt;remove statusCode="500" subStatusCode="-1" /&gt; &lt;error statusCode="404" path="404.html" responseMode="File" /&gt; &lt;error statusCode="500" path="500.html" responseMode="File" /&gt; &lt;/httpErrors&gt;&lt;/system.webServer&gt; 顯示畫面 CustomErrors可以參考 MSDN 上的說明。mode 必要屬性，有三種設定，預設為 RemoteOnly Off 等於不使用，錯誤訊息都會直接顯示。 On 包含本機與 Client 端，都會收到自訂的顯示頁面 RemoteOnly 非本機端才會收到自訂的顯示頁面 redirectMode 決定當自訂錯誤頁面顯示時要如何處理原始要求的 URL ResponseRedirect 指定導向瀏覽器的 URL 必須不同於原始的 Web 要求 URL。簡單說就是設定重新導向的位置。 ResponseRewrite 指定導向瀏覽器的 URL 必須是原始的 Web 要求 URL。這動作是把發生錯的輸出，按照設定的自訂內容複寫。 我的範例寫法123456&lt;system.web&gt; &lt;customErrors mode="RemoteOnly" defaultRedirect="~/error.aspx" redirectMode="ResponseRedirect" &gt; &lt;error statusCode="404" redirect="404Test.html" /&gt; &lt;error statusCode="500" redirect="500.html" /&gt; &lt;/customErrors&gt;&lt;/system.web&gt; 示範畫面，故意輸入以下位置，讓路徑錯誤，接著按照我的設定，畫面將會跳轉到設定好的畫面與路徑。1localhost:1900/abcd Reference HttpErrors MSDN CustomErrors DarkThread customErrors and httpErrors]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>Asp.net</tag>
        <tag>IIS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS Specificity 權重說明]]></title>
    <url>%2F2017%2F05%2F31%2Fcss-specificity%2F</url>
    <content type="text"><![CDATA[Introduction這陣子剛好都在弄 CSS ，CSS Specificity 以前沒念熟，這次記錄下來順便複習一下。 ConetentCSS 選擇器中，基本上大家都知道後載入的樣式，會優先執行，以及愈針對性的選擇器查詢會更優先，也就是說使用 element Id 搜尋的會比 class 搜尋的優先度高；表現在 Html 中，則是權重愈高的樣式才會執行，權重低的樣式被權重高的樣式覆蓋。 以下這是 W3C CSS Specificity 的範例說明，以及 a-b-c 權重說明 count the number of ID selectors in the selector (= a)count the number of class selectors, attributes selectors, and pseudo-classes in the selector (= b)count the number of type selectors and pseudo-elements in the selector (= c)ignore the universal selector 12345678910&gt; * /* a=0 b=0 c=0 -&gt; specificity = 0 */&gt; LI /* a=0 b=0 c=1 -&gt; specificity = 1 */&gt; UL LI /* a=0 b=0 c=2 -&gt; specificity = 2 */&gt; UL OL+LI /* a=0 b=0 c=3 -&gt; specificity = 3 */&gt; H1 + *[REL=up] /* a=0 b=1 c=1 -&gt; specificity = 11 */&gt; UL OL LI.red /* a=0 b=1 c=3 -&gt; specificity = 13 */&gt; LI.red.level /* a=0 b=2 c=1 -&gt; specificity = 21 */&gt; #x34y /* a=1 b=0 c=0 -&gt; specificity = 100 */&gt; #s12:not(FOO) /* a=1 b=0 c=1 -&gt; specificity = 101 */&gt; 這範例只有列出 a-b-c 的權重值，想看更詳細的說明，需要看 Note 裡面的 CSS 2.1 文件，裡面就有說明 a-b-c-d 套用規則，以下截取至官方文件 6.4.3 Calculating a selector’s specificity A selector’s specificity is calculated as follows: count 1 if the declaration is from is a ‘style’ attribute rather than a rule with a selector, 0 otherwise (= a) (In HTML, values of an element’s “style” attribute are style sheet rules. These &gt;r ules have no selectors, so a=1, b=0, c=0, and d=0.) count the number of ID attributes in the selector (= b)count the number of other attributes and pseudo-classes in the selector (= c)count the number of element names and pseudo-elements in the selector (= d) 1234567891011&gt; * &#123;&#125; /* a=0 b=0 c=0 d=0 -&gt; specificity = 0,0,0,0 */&gt; li &#123;&#125; /* a=0 b=0 c=0 d=1 -&gt; specificity = 0,0,0,1 */&gt; li:first-line &#123;&#125; /* a=0 b=0 c=0 d=2 -&gt; specificity = 0,0,0,2 */&gt; ul li &#123;&#125; /* a=0 b=0 c=0 d=2 -&gt; specificity = 0,0,0,2 */&gt; ul ol+li &#123;&#125; /* a=0 b=0 c=0 d=3 -&gt; specificity = 0,0,0,3 */&gt; h1 + *[rel=up]&#123;&#125; /* a=0 b=0 c=1 d=1 -&gt; specificity = 0,0,1,1 */&gt; ul ol li.red &#123;&#125; /* a=0 b=0 c=1 d=3 -&gt; specificity = 0,0,1,3 */&gt; li.red.level &#123;&#125; /* a=0 b=0 c=2 d=1 -&gt; specificity = 0,0,2,1 */&gt; #x34y &#123;&#125; /* a=0 b=1 c=0 d=0 -&gt; specificity = 0,1,0,0 */&gt; style="" /* a=1 b=0 c=0 d=0 -&gt; specificity = 1,0,0,0 */&gt; 由官方文件可以看得出，選擇器元素愈多權重愈高，使用 Id 的權重最高 Reference W3C CSS specificity W3C CSS Selector Specificity MDN CSS Specificity MUKI space CSS 權重計算機]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Npm 在 Windows 升級到 v5.0.0]]></title>
    <url>%2F2017%2F05%2F31%2Fnpm-windows-upgrade-to-v5-0-0%2F</url>
    <content type="text"><![CDATA[Introduction看到許多人分享升級方式，順便紀錄一下。 Conetent本來還以為需要透過一些工具進行指令列安裝的，後來看到我的 nodejs 也還沒更新，nodejs官方的 v8.0.0 更新後，直接就升級了。 懶人升級法，直接下載官方安裝檔案，裝好後，就更新完成了。 Reference nodejs npm windows upgrade]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SQL Server 資料庫清除 Log]]></title>
    <url>%2F2017%2F05%2F27%2Fmssql-clear-log%2F</url>
    <content type="text"><![CDATA[Introduction先說說使用清除 Log 比較常見的情境，大部分是公司內部測試資料庫的維護等等，使用一段時間後，需要搬移或清理的時候，我都會把 log 清除，畢竟測試資料沒有太大必要留存。 Conetent清除的方式是 Sql Server 2008 以上版本使用。 1234567--- 清除SQL Server Log檔USE [資料庫名稱]GOALTER DATABASE [資料庫名稱] SET RECOVERY SIMPLE WITH NO_WAITDBCC SHRINKFILE(記錄檔邏輯名稱, 1)ALTER DATABASE [資料庫名稱] SET RECOVERY FULL WITH NO_WAITGO]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>T-SQL</tag>
        <tag>SQLServer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用 SQLCMD 執行 .Sql 檔案]]></title>
    <url>%2F2017%2F05%2F26%2Fsql-server-excute-sql-by-sqlcmd%2F</url>
    <content type="text"><![CDATA[Introduction某些 .sql 檔案過大時，想使用 GUI 介面開啟就需要不少時間，而且可能使 GUI 介面軟體記憶體不足而無法執行，所以透過 SQLCMD 來執行方便又快速。 Conetent使用 sqlcmd 之前，先確認自己電腦有安裝 sqlcmd 工具，並且在環境變數設定。參數說明 伺服器選項 (-S)，識別 sqlcmd 所連接的 Microsoft SQL Server 執行個體。驗證選項 (-E、-U 和 -P)，指定供 sqlcmd 用來連接到 SQL Server 執行個體的認證。注意：**-E 選項是預設值，不需要予以指定。輸入選項 (-Q、-q 和 -i)，識別 sqlcmd 的輸入位置。輸出選項 (-o)，指定 sqlcmd 存放其輸出的檔案。 以下是示範範例，此範例直接在資料庫伺服器本機執行，所以沒有設定驗證選項1sqlcmd -S myServer\instanceName -i C:\myScript.sql Reference MSDN sqlcmd]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>T-SQL</tag>
        <tag>SQLServer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[取得資料庫伺服器中指定資料庫中的所有資料表名稱]]></title>
    <url>%2F2017%2F05%2F26%2Fsql-server-get-the-db-all-table-name%2F</url>
    <content type="text"><![CDATA[IntroductionSQL SERVER 中取得資料庫伺服器中指定資料庫中的所有資料表名稱 Conetent作法1234--List Table name 取得該DB中所有資料表名稱SELECT '['+SCHEMA_NAME(schema_id)+'].['+name+']' AS SchemaTableFROM sys.tables]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>T-SQL</tag>
        <tag>SQLServer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[取得資料庫伺服器中所有資料庫名稱]]></title>
    <url>%2F2017%2F05%2F26%2Fsql-server-get-server-all-db-name%2F</url>
    <content type="text"><![CDATA[Introduction在SQL SERVER中，取得資料庫伺服器中所有資料庫名稱 Conetent語法12SELECT NAME FROM master.dbo.sysdatabases]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>T-SQL</tag>
        <tag>SQLServer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SQL Server 中自動增長的索引重設為0]]></title>
    <url>%2F2017%2F05%2F26%2Fsql-server-reset-index%2F</url>
    <content type="text"><![CDATA[IntroductionSQL Server 中有 Foreign Key 的資料表，無法使用 Truncate 清除資料，需要使用 DELETE 語句刪除資料之後，再將編號重置為0。 Conetent語法。1234567USE [DbName]GO DELETE [Table];-- TableName 輸入要重新設定的資料表名稱-- 0 這是要當做識別欄位之目前值使用的新值。DBCC CHECKIDENT('TableName', RESEED, 0); Reference MSDN DBCC CHECKIDENT]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>T-SQL</tag>
        <tag>SQLServer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RAM Disk 的個人設定]]></title>
    <url>%2F2017%2F05%2F25%2FMy-ram-disk-some-setting%2F</url>
    <content type="text"><![CDATA[Introduction有多餘的記憶體可以使用的話，就拿來做 RAM Disk 來加速。此篇紀錄一下 RAM Disk 的瀏覽器快取設定，以及編輯器的快取設定路徑。 Conetent我所使用的 RAM Disk 軟體是 SoftPerfect RAM Disk，OS則是 Windows 10 1703；RAM Disk 重新開機裡面的資料就會清除，除非設定為映像檔案，但是設定映像檔案變成開機後還要去讀取該檔案，所以我僅把快取路徑設定在 RAM Disk，這樣每次重新開機就等於清除快取了，以下附上一張設定截圖。以下分別在 Chrome、FireFox、IE 以及 Visual Studio 的快取設定說明。 Chrome設定前記得先把瀏覽器關閉，然後要先知道目前使用者的 Chrome 快取路徑，路徑如下：C:\Users\請自行變更個人電腦的帳戶名稱\AppData\Local\Google\Chrome\User Data\Default\Cache紀錄路徑後，因為命令列工具的需求，需要把 …Chrome\User Data\Default\Cache 這資料夾刪除，這樣才可以進行對應。然後把 RAM Disk 的對應路徑使用下列指令進行連結。1mklink /d "C:\Users\XXX\AppData\Local\Google\Chrome\User Data\Default\Cache" "R:\ChromeCache" 概念就是虛擬路徑的對應，對應成功的話，Chrome 資料夾內的 Cache 資料夾圖示會變成捷徑圖示；假如設定錯誤想要取消對應，只要把 Cache 資料夾刪除即可 FireFoxFireFox 設定的方式需要開啟瀏覽器，在網址列上輸入about:config然後會出現警告，就不要理他，繼續設定。然後在任意空白處按滑鼠右鍵，點選〔新增〕→〔字串〕→輸入 browser.cache.disk.parent_directory在〔值〕的設定，就設定 RAM Disk 上的路徑 Internet ExploreIE 的話，一樣需要先開啟瀏覽器，然後開啟〔網際網路選項〕 Visual Studio修改 Visual Studio 編譯暫存區至 RAM Disk在下列目錄(32位元系統不會有 Framework64 目錄)找到 machine.config：1234C:\Windows\Microsoft.NET\Framework\v2.0.50727\CONFIG\machine.configC:\Windows\Microsoft.NET\Framework\v4.0.30319\Config\machine.configC:\Windows\Microsoft.NET\Framework64\v2.0.50727\CONFIG\machine.configC:\Windows\Microsoft.NET\Framework64\v4.0.30319\Config\machine.config 修改很簡單，找到 &lt;system.web&gt; 並加上1&lt;compilation tempDirectory="R:\Temporary ASP.NET Files\"/&gt; R: 是你 RAM Disk 的代號。 System Environment Path將使用者變數及系統變數中的 TEMP, TMP改至 RAM Disk 的資料夾路徑。(若電腦有多人使用，更改系統變數可能會使其他人無法使用，這點我沒試過，不過有些人發生，假如不是個人使用，還是不要設定)預設的使用者變數路徑：%USERPROFILE%\AppData\Local\Temp預設的系統變數路徑：%SystemRoot%\TEMP 更改後的路徑：R:\EnVarUsrTemp Reference KKBruce的2016年軟體(開發)工具大補帖]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>other</tag>
        <tag>RAMDisk</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Cmder命令列工具alias的注意設定]]></title>
    <url>%2F2017%2F05%2F24%2Fcmder-alias-not-working%2F</url>
    <content type="text"><![CDATA[Introduction前陣子因為 WannaCry 勒索病毒肆虐，一堆系統安全性漏洞開始更新，我的 win10 也使用還原更新到 1703，想說順便將一些免安裝軟體，重新調整一下，才發現 Cmder 的小設定。順便提供一下大家查詢 win10 版本的方式，請使用 win+R 呼叫出執行視窗，然後執行 winver 即可。 Conetent在 Cmder 中，我的預設執行命令列工具都是設定 CMD ，所以自訂 alias 在 powershell 中，應該是沒有喔。解決方式也很簡單，直接啟用命令列工具。 滑鼠右鍵，選擇內容，然後開啟使用舊版主控台即可。 Reference Cmder Cmder Github alias issue]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>Cmder</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[建立死結查詢]]></title>
    <url>%2F2017%2F05%2F09%2FCreat-dead-lock-search%2F</url>
    <content type="text"><![CDATA[Introduction建立一個預存程序，用來查詢死結(deadlock) Conetent建立死結查詢的預存程序，該程序名稱請自由調整，這邊是命名為 sp_who_lock123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778----- 建立死結查詢USE master;GODROP PROCEDURE sp_who_lockGOcreate procedure sp_who_lockasbegindeclare @spid int,@bl int,@intTransactionCountOnEntry int,@intRowcount int,@intCountProperties int,@intCounter intcreate table #tmp_lock_who (id int identity(1,1),spid smallint,bl smallint)IF @@ERROR&lt;&gt;0 RETURN @@ERRORINSERT INTO #tmp_lock_who (spid, bl) SELECT 0 ,blocked FROM (SELECT * FROM sysprocesses WHERE blocked &gt; 0) a WHERE NOT EXISTS (SELECT * FROM (SELECT * FROM sysprocesses WHERE blocked &gt; 0) b WHERE a.blocked = spid) UNION SELECT spid ,blocked FROM sysprocesses WHERE blocked &gt; 0IF @@ERROR &lt;&gt; 0RETURN @@ERROR-- 找到臨時表的紀錄數SELECT @intCountProperties = COUNT(*) ,@intCounter = 1FROM #tmp_lock_whoIF @@ERROR &lt;&gt; 0RETURN @@ERRORIF @intCountProperties = 0SELECT '現在沒有阻塞和Dead Lock訊息' AS message-- 循環開始WHILE @intCounter &lt;= @intCountPropertiesBEGIN-- 取第一條紀錄SELECT @spid = spid ,@bl = blFROM #tmp_lock_whoWHERE id = @intCounterBEGINIF @spid = 0SELECT '引起死結的SPID是:' + CAST(@bl AS VARCHAR(10)) + ',其執行的SQL語法如下'ELSESELECT 'SPID：' + CAST(@spid AS VARCHAR(10)) + '被' + 'SPID：' + CAST(@bl AS VARCHAR(10)) + '阻塞,其當前執行的SQL語法如下'DBCC INPUTBUFFER (@bl)ENDSET @intCounter = @intCounter + 1endDROP TABLE #tmp_lock_whoRETURN 0END 建立完成後，就可以使用以下方式查詢了12---- 查詢建立的死結查詢預存EXECUTE [master].[dbo].[sp_who_lock]]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>T-SQL</tag>
        <tag>SQLServer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[清除資料庫的快取]]></title>
    <url>%2F2017%2F05%2F09%2Fclear-all-cache-in-sql-server%2F</url>
    <content type="text"><![CDATA[Introduction以前不知道哪學來的作法，現在補充一下實際說明。 Conetent一般來說，幾乎不會用到，只有在測試效能的時候，需要執行前後比較，才會使用到這些。附上一些名詞說明。 Clean Buffer data page cache 沒有修改過的 Dirty Buffer data page cache 已修改過但未被寫入至磁碟中的部份 Cold Buffer Cache data page 還沒載入 memory 中，需要從磁碟讀取 FREESYSTEMCACHE 會清空Procedure的最佳化的計劃，重新執行重新產生新的執行計劃(不要亂用) FREESESSIONCACHE 排清散發查詢對 Microsoft SQL Server 執行個體所用的散發查詢連接快取。 FREEPROCCACHE 從計畫快取移除所有元素； DROPCLEANBUFFERS 僅清除 data page cache 沒有修改過的，**data page cache** 已修改過但未被寫入至磁碟中的部份，無法被清除； 12345CHECKPOINT; DBCC FREESYSTEMCACHE ('ALL');DBCC FREESESSIONCACHE;DBCC FREEPROCCACHE;DBCC DROPCLEANBUFFERS Reference 關於清除 SQL Server 查詢快取的那些事 Microsot FREESYSTEMCACHE Microsot FREESESSIONCACHE Microsot FREEPROCCACHE Microsot DROPCLEANBUFFERS]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>T-SQL</tag>
        <tag>SQLServer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[移除所有資料中符合指定名稱的欄位]]></title>
    <url>%2F2017%2F05%2F09%2Fremove-some-columns-for-all-tables%2F</url>
    <content type="text"><![CDATA[Introduction在移除某些通用資料欄位得時候挺好用的。 Conetent使用 cursor 來處理，請將以下程式碼中的 your_column_name 換成想要移除的欄位名稱即可。 12345678910111213141516171819202122232425262728293031323334353637-- ================== 移除所有自訂資料表中某欄位 ======================== DECLARE @table_schema varchar(100) ,@table_name varchar(100) ,@constraint_schema varchar(100) ,@constraint_name varchar(100) ,@cmd nvarchar(200) DECLARE table_cursor CURSOR FORSELECT TABLE_SCHEMA ,TABLE_NAMEFROM INFORMATION_SCHEMA.TABLESWHERE TABLE_NAME != 'sysdiagrams' OPEN table_cursorFETCH NEXT FROM table_cursor INTO @table_schema, @table_name WHILE @@FETCH_STATUS = 0 BEGIN IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @table_name AND COLUMN_NAME = 'your_column_name')BEGINSELECT @cmd = 'ALTER TABLE [' + @table_schema + '].[' + @table_name + '] DROP COLUMN your_column_name'EXEC sp_executesql @cmdPRINT 'delete your_column_name= ' + @table_nameENDELSE--BEGIN-- PRINT ' no delete your_column_name= '+ @table_name --ENDFETCH NEXT FROM table_cursor INTO @table_schema, @table_nameENDDEALLOCATE table_cursor]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>T-SQL</tag>
        <tag>SQLServer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[更新 Npm 全部套件的方式]]></title>
    <url>%2F2017%2F05%2F08%2Fnpm-update-dependency-all-packages%2F</url>
    <content type="text"><![CDATA[Introduction這是昨天在整理資料的時候想到，我部落格的 Repo 裡面的 package.json，想要全部更新裡面使用到的 packages，以及安裝在全域(global)的 packages Conetent更新全域套件的方式，使用 npm-check-updates1npm i -g npm-check-updates 更新 Repo 裡面套件的方式，這語法有 alias 即是簡短指令，只要下 ncu，就可以不用下這麼長的指令。1npm-check-updates -u Reference以下是 npm 的參考資料 npm check updates updating local packages updating global packages]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[取得SQL Server 的版本資訊]]></title>
    <url>%2F2017%2F05%2F07%2Fget-database-version-in-sql-server%2F</url>
    <content type="text"><![CDATA[Introduction列出 SQL Server 的相關資訊 Conetent12345678-- 查詢相關的版本資料SELECT RIGHT(LEFT(@@VERSION, 25), 4) N'產品版本編號' ,SERVERPROPERTY('ProductVersion') N'版本編號' ,SERVERPROPERTY('ProductLevel') N'版本層級' ,SERVERPROPERTY('Edition') N'執行個體產品版本' ,DATABASEPROPERTYEX('master', 'Version') N'資料庫的內部版本號碼' ,@@VERSION N'相關的版本編號、處理器架構、建置日期和作業系統' Reference Micsoft Doc @@version]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>T-SQL</tag>
        <tag>SQLServer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[取得資料庫中的資料表的建立修改時間]]></title>
    <url>%2F2017%2F05%2F07%2Fget-table-modify-date-in-sql-server%2F</url>
    <content type="text"><![CDATA[Introduction可以用來查詢進來是否有人變動過資料表或是檢視表等等。 Conetent主要查詢 all_objects，利用條件式篩選出想要查詢的資訊1234567891011121314151617-- 查詢資料表修改時間SELECT [name] ,create_date ,modify_dateFROM sys.all_objectsWHERE type_desc = 'USER_TABLE'-- 查詢預存程序修改時間SELECT [name] ,create_date ,modify_dateFROM sys.all_objectsWHERE type_desc = 'SQL_STORED_PROCEDURE'-- 以下這是過濾內建的預存程序AND SUBSTRING([name], 1, 3) NOT IN ('sp_', 'dt_', 'xp_') Reference Micsoft Doc all_objects]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>T-SQL</tag>
        <tag>SQLServer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[取得預存程序的資訊]]></title>
    <url>%2F2017%2F05%2F06%2Fget-database-store-procedure-schema-information%2F</url>
    <content type="text"><![CDATA[Introduction還是紀錄…，等 SQL 部分都整理完，再來整理其他部分。 Conetent12345678910111213141516171819202122232425--- set your database nameUSE yourDataBaseNameGO---取得 DATABASE 的預存程序資訊SELECT A.[NAME] AS '結構敘述' ,B.[NAME] AS '預存程序名稱' ,C.[NAME] AS '預存程序傳入參數' ,C.[PARAMETER_ID] AS '傳入參數順序' ,D.[NAME] AS '傳入參數型別' ,C.[MAX_LENGTH] AS '長度' ,C.[PRECISION] AS '精確度' ,C.[IS_OUTPUT] AS '傳出參數' ,B.[CREATE_DATE] AS '建立時間' ,B.[MODIFY_DATE] AS '修改時間'FROM SYS.SCHEMAS AINNER JOIN SYS.PROCEDURES B ON A.[SCHEMA_ID] = B.[SCHEMA_ID]INNER JOIN SYS.PARAMETERS C ON B.[OBJECT_ID] = C.[OBJECT_ID]INNER JOIN SYS.TYPES D ON C.[SYSTEM_TYPE_ID] = D.[SYSTEM_TYPE_ID] AND C.[USER_TYPE_ID] = D.[USER_TYPE_ID]WHERE B.[TYPE] = 'P'ORDER BY A.[NAME], B.[NAME], C.[PARAMETER_ID] ASC Reference Ref1]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>T-SQL</tag>
        <tag>SQLServer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SQL Server 刪除資料庫中所有資料表]]></title>
    <url>%2F2017%2F05%2F06%2Fdelete-all-database-table%2F</url>
    <content type="text"><![CDATA[序還是整理記錄。 作法123456789101112131415161718192021222324252627282930-- 記得先切換到想要移除的資料庫名稱下USE yourDataBaseNameGODECLARE @table_schema varchar(100) ,@table_name varchar(100) ,@constraint_schema varchar(100) ,@constraint_name varchar(100) ,@cmd nvarchar(200)DECLARE table_cursor CURSOR FOR select TABLE_SCHEMA, TABLE_NAME from INFORMATION_SCHEMA.TABLES where TABLE_NAME != 'sysdiagrams' OPEN table_cursorFETCH NEXT FROM table_cursor INTO @table_schema, @table_name WHILE @@FETCH_STATUS = 0 BEGIN SELECT @cmd = 'DROP TABLE [' + @table_schema + '].[' + @table_name + ']' --select @cmd EXEC sp_executesql @cmd FETCH NEXT FROM table_cursor INTO @table_schema, @table_nameEND CLOSE table_cursor DEALLOCATE table_cursor 補充說明一下，這版假如在移除有關聯資料表的時候，會因為 FOREIGN KEY constraint 而失敗，要先移除所有的關聯限制喔。可以參考我這篇移除關聯限制。]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>T-SQL</tag>
        <tag>SQLServer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SQL Server 中，移除資料庫中所有的關聯限制]]></title>
    <url>%2F2017%2F05%2F06%2Fremove-database-relationship-constraint%2F</url>
    <content type="text"><![CDATA[序言還是紀錄。 內容不多說，直接看作法吧1234567891011121314151617181920212223242526272829-- 記得先切換到想要移除的資料庫名稱下USE yourDataBaseNameGO/*Create Script to drop constraint and remove columns*/SELECT 'IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N''' + DC.Name + ''') and Type = ''D'') ALTER TABLE [' + OBJECT_SCHEMA_NAME(SO.ID) + '].[' + SO.Name + '] DROP CONSTRAINT [' + DC.Name + ']'FROM SysObjects SOINNER JOIN SysColumns SC ON SO.ID = SC.IDINNER JOIN sys.default_constraints DC ON SO.ID = DC.Parent_object_id AND SC.colid = DC.Parent_column_idWHERE SO.XTYPE = 'U'AND SC.Name = 'msrepl_tran_version'UNIONSELECT 'IF EXISTS (SELECT * FROM dbo.syscolumns where id = OBJECT_ID(N''' + SO.Name + ''') and Name = ''msrepl_tran_version'') ALTER TABLE [' + OBJECT_SCHEMA_NAME(SO.ID) + '].[' + SO.Name + '] DROP COLUMN [msrepl_tran_version] 'FROM SysObjects SOINNER JOIN SysColumns SC ON SO.ID = SC.IDINNER JOIN sys.default_constraints DC ON SO.ID = DC.Parent_object_id AND SC.colid = DC.Parent_column_idWHERE SO.XTYPE = 'U'AND SC.Name = 'msrepl_tran_version'ORDER BY 1 可以搭配移除所有資料表的語法一起使用。]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>T-SQL</tag>
        <tag>SQLServer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[列出資料庫中檢視表的欄位以及對應的資料表]]></title>
    <url>%2F2017%2F05%2F03%2Flist-view-table-schema-and-relationship%2F</url>
    <content type="text"><![CDATA[前言這個 SQL 組合語法也很實用，畢竟檢視表(View)也很常用到。 語法12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455-- 檢視表 名稱與欄位SELECT a.name AS '表格名稱' --, b.text AS '創建資料表SQL' , c.name AS '欄位名稱'FROM sysobjects a LEFT JOIN syscomments b ON a.id = b.id LEFT JOIN syscolumns c ON a.id = c.idWHERE a.type = 'V'ORDER BY a.name -- 條列檢視表與資料表欄位對應關係SET NOCOUNT ONDECLARE @DataBases table ( VIEW_CATALOG nvarchar(256),VIEW_SCHEMA nvarchar(256),VIEW_NAME sysname,TABLE_CATALOG nvarchar(256),TABLE_SCHEMA nvarchar(256),TABLE_NAME sysname,COLUMN_NAME sysname )INSERT INTO @DataBases (VIEW_CATALOG , VIEW_SCHEMA , VIEW_NAME , TABLE_CATALOG , TABLE_SCHEMA , TABLE_NAME , COLUMN_NAME)-- 資料庫1名稱那邊，可以列出檢視表有關連到的資料庫(假如所使用的檢視表有跨資料庫的話)EXEC sp_msforeachdb 'SELECT *FROM [?].INFORMATION_SCHEMA.VIEW_COLUMN_USAGEWHERE VIEW_CATALOG IN (''資料庫1名稱'', ''資料庫2名稱'')ORDER BY VIEW_CATALOG, VIEW_NAME'SET NOCOUNT OFFSELECT VIEW_CATALOG AS '檢視表資料庫' --, VIEW_SCHEMA AS '檢視表結構結構' , VIEW_NAME AS '檢視表名稱' , TABLE_CATALOG AS '對應資料庫' --, TABLE_SCHEMA AS '資料表結構' , TABLE_NAME AS '資料表名稱' , COLUMN_NAME AS '欄位名稱'FROM @DataBases]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>T-SQL</tag>
        <tag>SQLServer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PostgresSQL 取得所有欄位定義的方法]]></title>
    <url>%2F2017%2F05%2F03%2FPostgresSQL-Get-Data-definition%2F</url>
    <content type="text"><![CDATA[碎碎念把以前的一些參考資料或是會用到的東西紀錄一下，筆記一下 postgresSQL 的取得所有定義資料 做法12345678910111213141516171819202122232425262728293031--- postgres SQL 取得所有欄位定義的方法(含備註欄位)SELECT DISTINCT pgc.relname as tablename, a.attname as name, format_type(a.atttypid, a.atttypmod) as typ, a.attlen as maxlen, def.adsrc as default, a.attnotnull as notnull, com.description as comment, coalesce(i.indisprimary,false) as primary_key, pgi.inhrelidFROM pg_attribute a JOIN pg_class pgc ON pgc.oid = a.attrelidright join pg_tables t on (t.tablename = pgc.relname and t.schemaname = 'public')left join pg_inherits pgi on (pgi.inhrelid = pgc.oid )LEFT JOIN pg_index i ON (pgc.oid = i.indrelid AND i.indkey[0] = a.attnum)LEFT JOIN pg_description com on (pgc.oid = com.objoid AND a.attnum = com.objsubid)LEFT JOIN pg_attrdef def ON (a.attrelid = def.adrelid AND a.attnum = def.adnum) WHERE a.attnum &gt; 0 AND pgc.oid = a.attrelidAND pg_table_is_visible(pgc.oid)AND NOT a.attisdroppedand pgc.relkind = 'r'and pgi.inhrelid is null--and pgc.relhassubclass = 'f'--AND (pgc.relname = 'statistics' or pgc.relname = 'chart_data')ORDER BY pgc.relname--,a.attnum;]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>PostgrestSQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[刪除資料庫全部資料表的資料]]></title>
    <url>%2F2017%2F05%2F02%2Fdelete-all-table-data%2F</url>
    <content type="text"><![CDATA[碎碎念這個指令也是很實用的，在公司測試機上的資料或是 staging 上的系統，體驗完後，有要求要全部清空資料的話，這就很實用了，如果資料表不多，倒是不太需要。 做法在 SSMS 或是 sqlcmd 執行以下 SQL ，要注意的是，有些資料表可能有建立關聯，導致 Truncate Table 失敗，但是以下 SQL Script 中會使用 Truncate 與 Delete，兩種方式同時使用來清除資料，所以出現錯誤訊息的話，多執行幾次應該就可了。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546-- 取得資料庫中的資料表，並建立儲存到 #LISTTABLES 這資料表中select distinct 表格名稱 into #LISTTABLES from ( SELECT Top 100 PERCENT a.TABLE_NAME as 表格名稱 FROM INFORMATION_SCHEMA.TABLES a LEFT JOIN INFORMATION_SCHEMA.COLUMNS b ON ( a.TABLE_NAME=b.TABLE_NAME ) WHERE a.TABLE_TYPE='BASE TABLE' and a.TABLE_NAME != 'sysdiagrams' ORDER BY a.TABLE_NAME, ordinal_position) c;declare @tablename nvarchar(max)declare icur cursor static for select * from #LISTTABLES OPEN icurfetch next from icur into @tablenamewhile(@@FETCH_STATUS=0)BEGIN -- 使用 TRUNCATE 最快，且會將表格中的自動編號欄位歸零 -- 但若表格有被參考 Foreign Key 的話，會無法使用 TRUNCATE 指令 exec ('TRUNCATE TABLE ' + @tablename); -- 如果 TRUNCATE 不成功，還可以用 DELETE 刪除所有資料 exec ('delete from ' + @tablename + ' where 1=1'); -- 使用 DELETE 不會將自動編號的欄位歸零，使用 DBCC CHECKIDENT 指令歸零 exec ('DBCC CHECKIDENT(''' + @tablename + ''', RESEED, 0)'); FETCH NEXT FROM icur INTO @tablenameENDclose icurdeallocate icurdrop table #LISTTABLES 參考資料 Will 保哥]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>T-SQL</tag>
        <tag>SQLServer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[批次檔案取得檔的日期、時間欄位]]></title>
    <url>%2F2017%2F04%2F21%2Fbatch-record-date%2F</url>
    <content type="text"><![CDATA[Conetent紀錄一下批次檔案取得日期與時間 1234567891011121314151617181920212223242526272829303132@echo offrem 取得今天日期的年、月、日三個欄位（透過 date /t 指令取得）for /f "tokens=1-4 delims=-/ " %%i IN ('date /t') DO (set year=%%iset month=%%jset day=%%kset week=%%l)rem 取得當下時間的時、分兩個欄位for /f "tokens=1-3 delims=:" %%i IN ('time /t') DO (set hour=%%iset minute=%%j)rem 濾掉 hour 前面可能會出現的空白以及上午下午的文字for /f "tokens=1-2 delims= " %%i IN ("%hour%") DO (set hour=%%j)echo "====== Start ======"echo "date parameter = %date%"echo "time parameter = %time%"echo "year = %year%"echo "month = %month%"echo "day = %day%"echo "week = %week%"echo "minute = %minute%"echo "hour = %hour%"echo "====== End ======"pause Reference Will]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>batch</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2016 年的軟體工具清單整理]]></title>
    <url>%2F2017%2F04%2F16%2F2016-software-list%2F</url>
    <content type="text"><![CDATA[整理一下去年裝的一些軟體，目前還有在使用，而且覺得不錯的東西。 通訊工具 Line Zoom Slack Skype 截圖工具 Tech Smith Snagit：TechSmith 的產品之一，付費軟體但是功能強大，包含截圖錄影等等。 瀏覽器 Chrome Desktop Firefox Tor Browser 未分類 SoftPerfect RAM Disk：把記憶體模擬成硬碟，付費軟體。 XMind：畫心智圖的軟體，有免費與付費版本。 Balsamiq Mockups：畫 Mockup 的軟體，付費軟體。 Software Ideas Modeler：UML 繪圖工具，但是需要付費。 OpenVPN GUI for Windows：VPN 連線工具 有道辭典：免費的翻譯軟體，介面與使用都很不錯。 Logitech Unifying：滑鼠鍵盤吃一個接收器的軟體，但是有限制必須是 Logitech 的產品，且必須接收器有支援。 binaryfortress DisplayFusion：binaryfortress 的產品，此家產品許多工具都不錯，DisplayFusion 是多螢幕控制管理軟體，提供許多便利功能。 FileZilla FTP Client：這軟體不需解釋了，免費的 FTP 工具 Markdown Monster：偶爾會拿來觀看 markdown 語法的預覽，markdown 語法我還是習慣直接寫居多 Cmder：指令列工具，想了解設定的話，可以參考保哥的文章 Remote Desktop Connection Manager：微軟提供的遠端桌面管理工具。 Bins：讓鎖定在工作列的捷徑分組 SSDFresh：SSD 硬碟最佳化工具，有免費與付費版本，免費的就夠用了。 7-zip：壓縮工具。 自然輸入法 10：這輸入法不錯用。 地理資訊工具 QGIS：自由軟體的桌面GIS軟體。它提供資料的顯示、編輯和分析功能。 ArcGIS for Desktop：ArcGIS 是由 ESRI 出品的一個地理資訊系統系列軟體的總稱，我所使用的是桌面版本，這是付費軟體。 Google Earth：Google 地圖，用來觀看一下 KML 資料。 資料庫工具 SSMS(SQL Server 2014 Management Studio) SSMSToolsPack：這工具支援SSMS 2012 以前版本的部分是免費的，之後版本的要收費。 pgAdmin III：PostgresSQL 的 GUI 工具 Data Dictionary Creator：DD 資料調整工具 dbForge SQL Complete Express：SQL code 格式化的工具，SSMS 的套件 偵錯工具 Telerik Fiddler：免費的 web debugging 工具 Telerik JustDecompile：免費的反組譯工具 Postman：開發 API 很好用的測試工具，建議裝 App 版本，Chrome Extension 版本有些測試會有問題 開發工具 Vistul Studio 2017：號稱地表最強的編輯器，以下列表是常用的部分套件。 GhostDoc Pro：有 Community 版本，也有付費版，看個人用途囉。 GitHub Extension for Visual Studio：GitHub 工具 Open Command Line：快速開啟 Command Line 工具，還可自行設定想要啟動哪個命令列工具。 Productivity Power Tools 2017：提供不少功能，好用。 JetBrains ReSharper：超好用工具。 Automatic Versions：自動產生版號工具。 OzCode：強力偵錯工具，付費工具。 JetBrains WebStorm：寫 JavaScript 的好用 IDE 工具 JetBrains IntelliJ IDEA Community：Java, Groovy, Scala and Android development LINQPad 5：寫 C# LINQ 小範例的好用工具 NotePad++：text editor Sublime Text3：text editor Visual Studio Code：text editor PSPad：text editor Brackets：text editor Devart Code Compare：免費的程式碼比較工具，可以對比兩個檔案的差異 Chocolatey：套件管理工具，以下是透過 chocolatey 安裝的套件 Chocolateygui：GUI 介面，裝了這個後，可經由 GUI 介面安裝套件 SuperBenchmarker：測試網站和 HTTP API 的 工具 Yarn：套件管理安裝工具，據說比 npm 快。 Node.js 以下的版本控制工具與 Log 工具一樣可以透過 Chocolatey 安裝 版本控制工具 Git TortoiseGit TortoiseSVN Source Tree：免費的 git 與 Mercurial 工具 gitkraken： Git GUI 工具 Log 工具 Log Parser：微軟提供的 log 解析工具 Log Parser Lizard GUI：圖形化工具 binaryfortress Log Fusion：binaryfortress 出品的工具，有付費與免費功能。]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>other</tag>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Visual Studio Browsing With Incognito]]></title>
    <url>%2F2017%2F04%2F11%2FVisual-Studio-browsing-with-incognito%2F</url>
    <content type="text"><![CDATA[設定方式使用 Visual Studio 開發網站的時候，使用無痕視窗偵錯，避免每次清理一些快取或是 cookie 等資料。首先，先開啟 Visual Studio ，開啟一個網站專案，然後在工具列上選取 Browser with ，如下圖之後會看到 Visual Studio 預設的偵錯瀏覽器，想要新增 Chrome 的，直接先複製 Chrome 的執行程式路徑，接著設定引數(Arguments)，各瀏覽器設定方式如下： Chrome 設定方式引數(Arguments)設定為--incognito Firefox 設定方式引數(Arguments)設定為-private 或是 -private-window -private:Firefox 版本 3.6 及其後版本才可使用以下指令，第一次開啟視窗，之後啟動新分頁 -private-window:Firefox 版本 20 及其後版本才可使用以下指令，每次都會開啟新視窗 IE 設定方式引數(Arguments)設定為-private Reference 耕作筆記本 Peter Beverloo Chrome command line Firefox command line IE command line]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>Visual Studio</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Error 175:The ADO.NET Provider With Invariant Name 'Npgsql'...]]></title>
    <url>%2F2017%2F04%2F04%2FError-175-The-ADO-NET-provider-with-invariant-name-Npgsql%2F</url>
    <content type="text"><![CDATA[問題有朋友在開發時要將透過 Entity Framework 產生的 edmx file 更新，但是出現了以下的錯誤訊息。(Entity Framework 6) Error 175: The ADO.NET provider with invariant name ‘Npgsql’ is either not registered in the machine or application config file, or could not be loaded. 原因錯誤訊息說明 Npgsql 沒有註冊進機器，所以無法讀取使用，檢查過 config 設定，確認都已經進行設定後，確認 Npgsql 需要安裝其元件。 解決方式至 Npgsql Release 下載 Npgsql-3.2.2.msi 安裝，即可解決。 參考資料 Entity Framework Github Npgsql Npgsql Release]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>Troubleshooting</tag>
        <tag>PostgrestSQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DataReader.GetFieldType(int) Returned Null]]></title>
    <url>%2F2017%2F04%2F04%2FDataReader-GetFieldType-int-returned-null%2F</url>
    <content type="text"><![CDATA[問題開發完成的網站應用程式，在測試機運行都是正常，但在正式機時，發生了 HTTP 500 錯誤，錯誤訊息如下 123Exception information: Exception type: InvalidOperationException Exception message: DataReader.GetFieldType(5) returned null. 原因依據這個錯誤訊息，查找一下微軟論壇上的討論，確認應該是應用程式使用了 Sql Server 的部分元件，因此需要將此元件註冊；但是因為此專案主要是使用 Geomerty 型別產生的問題，所以比較符合 Huan-Lin 老師的此篇文章，需要在正式機的電腦上額外安裝 Sql Server Featrue Pack，版本按照各自使用的資料庫版本安裝 解決方式請到微軟網站搜尋 SQL Server Feature Pack，取得搜尋結果，然後找尋符合自己資料庫的版本選取下載，我的版本是 SQL Server 2014，所以在下載列表中選取 SQLSysClrTypes 這檔案，在不同Sql Server 版本中名稱會有稍微不同，主要就是找尋 CLR Types 的元件擴充就是了。 參考資料 Huan-Lin DataReader.GetFieldType(5) returned null Microsoft SQL Server Feature Pack]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>Troubleshooting</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[將共用資料夾設為虛擬資料夾]]></title>
    <url>%2F2016%2F06%2F22%2FshareFolderToAnotherServerSetIISVirtualFolder%2F</url>
    <content type="text"><![CDATA[Introduction主要是針對 WebFarm 的一些調整，所以後來想說直接將共用資料夾設定為 IIS 虛擬資料；看以下說明圖比較清楚。原本是這樣 轉換成這樣 Conetent試作範例我設定了兩台 VM，將共用資料夾設定在某台 VM，另一台 VM 的 IIS 去讀取或寫入該共享資料夾。 作法建立一個 Sample 網站（此處使用 asp.net mvc）示範123456789&lt;div class="jumbotron"&gt; &lt;h1&gt;ASP.NET&lt;/h1&gt; &lt;p class="lead"&gt;ASP.NET is a free web framework for building great Web sites and Web applications using HTML, CSS and JavaScript.&lt;/p&gt; &lt;p&gt;&lt;a href="http://asp.net" class="btn btn-primary btn-lg"&gt;Learn more &amp;raquo;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;@Html.ActionLink("DownLoad Demo", "DownloadFile", null, new &#123;@class = "btn btn-primary btn-lg"&#125;)&lt;/p&gt;&lt;/div&gt; 1234public ActionResult DownloadFile() &#123; string mimeType = "image/jpeg"; return File(Server.MapPath("~/DLfiles/20130604_181744.jpg"),mimeType,"testDemo");&#125; 然後架設該網站到 VM 上的 WebServer（以下稱這台機器為A好了） 上。再把 DLfiles 放到 VM 的另一台機器B上，並開啟共用。接下來的設定才是重點。 Server 說明 A 代表 vWinServer2012Web B 代表 vWinServer2012DB 在 B 上建立一個新的帳戶開啟執行視窗（Run）輸入 compmgmt.msc 開啟電腦管理建立帳戶也可以帳號：Sample密碼：Abcd1234 共用資料夾加入該新建帳戶的權限接下來的設定，都是在 A 上面的部分了。 在 A 上也建立一個新的帳戶(帳號密碼必須與 B 相同)帳號：Sample密碼：Abcd1234 IIS 設定把示範網站部署到上，接著設定剛剛建立的共用資料為該網站的虛擬資料夾，接著設定應用程式集區(看網站使用那個應用程式就設定那個)，變更該應用程式的識別為自訂帳戶，輸入剛剛建立的新帳戶名稱與密碼 查看一下網站測試連線與該虛擬資料夾測試連線 這樣就可以了，附上範例結果 附錄IIS Version:8.5.99600.16384 Reference Will保哥ASP.NET 如何將檔案寫入到網路芳鄰的分享目錄 Will保哥CryptographicException: 控制碼無效 Will保哥ASP.NET 網站部署在 UNC 路徑上 Will保哥IIS 7.5 的應用程式集區與新增的「虛擬帳戶」特性]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>IIS</tag>
        <tag>WindowsServer2012</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[西元年與民國年的轉換 C#]]></title>
    <url>%2F2016%2F06%2F16%2FAdTaiwnaDateConvert%2F</url>
    <content type="text"><![CDATA[Introduction這陣子在改一個案子的舊 code，看到使用西元年減去 1911 的方式處理年份，月份與日期不與年份處理，這樣子進行轉換的確是可行的，但是個人還是比較喜歡使用 Calendar 的方式轉換； 因為使用減法方式處理轉換，萬一順手把月份與日期一起轉換，在閏年的時候就會有日期誤差了。 Conetent個人習慣的處理方式還是使用 Calendar，而且要轉農民曆也方便 XD 西元年轉換民國年12345string sampleDate = "2012-2-29";DateTime dt = DateTime.Parse(sampleDate);CultureInfo culture = new CultureInfo("zh-TW");culture.DateTimeFormat.Calendar = new TaiwanCalendar();dt.ToString("yyy/MM/dd",culture); 民國年轉換西元年1234string sampleDate = "101/02/29";CultureInfo culture = new CultureInfo("zh-TW");culture.DateTimeFormat.Calendar = new TaiwanCalendar();DateTime.Parse(sampleDate,culture); Reference相關的資料非常多，就列出幾個比較知名的部落客 Kevin 學習筆記 darkthread 愛流浪的小風 Will 保哥 MSDN:CultureInfo MSDN:TaiwanCalendar]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Win10 右鍵選單調整]]></title>
    <url>%2F2016%2F06%2F15%2FContextMenuChange%2F</url>
    <content type="text"><![CDATA[前言之前在桌面點選滑鼠右鍵的時候，選單會延遲幾秒；只要在桌面進行右鍵選單就是這樣，判斷是右鍵選單的某個項目造成。 原因因為當時電腦才剛剛重置還原，選單也沒什麼項目，頂多就是多了一個顯示卡項目，初步判定就是這個項目影響的。 解決方式直接使用登錄編輯程式進行修改。（以下都是在 windows 10 環境下）首先使用win + R開啟執行，接著輸入 regedit 開啟登錄編輯程式 接著按照以下的路徑去找尋位址 HKEY_CLASSES_ROOT Directory Background shellex ContextMenuHandlers 接著 New 和 Sharing 記得保留，剩下的項目，看各人喜好，不想要的就直接刪除吧。完成之後關閉編輯程式，回到桌面試試看。 參考資料 mobile01:在桌面空白處點右鍵，延遲相當嚴重 makebizeasy:桌面滑鼠右鍵]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Encoding 字碼頁編號]]></title>
    <url>%2F2016%2F06%2F13%2Fencoding-in-csharp%2F</url>
    <content type="text"><![CDATA[Content筆記一下字碼頁編號，這樣查詢比較方便 字碼頁 名稱 顯示名稱 37 IBM037 IBM EBCDIC (美國和加拿大) 437 IBM437 OEM 美國 500 IBM500 IBM EBCDIC (國際) 708 ASMO 708 阿拉伯文 (ASMO 708) 720 DOS 720 阿拉伯文 (DOS) 737 ibm737 希臘文 (DOS) 775 ibm775 波羅的海文 (DOS) 850 ibm850 西歐語系 (DOS) 852 ibm852 中歐語系 (DOS) 855 IBM855 OEM 斯拉夫文 857 ibm857 土耳其文 (DOS) 858 IBM00858 OEM 多語系拉丁我 860 IBM860 葡萄牙文 (DOS) 861 ibm861 冰島文 (DOS) 862 DOS-862 希伯來文 (DOS) 863 IBM863 加拿大法文 (DOS) 864 IBM864 阿拉伯文 (864) 865 IBM865 北歐 (DOS) 866 cp866 斯拉夫文 (DOS) 869 ibm869 希臘文，現代化 (DOS) 870 IBM870 IBM EBCDIC (多國語言拉丁文 2) 874 windows-874 泰文 (Windows) 875 cp875 IBM EBCDIC (現代希臘文) 932 shift_jis 日文 (SHIFT-JIS) 936 gb2312 簡體中文 (GB2312) 949 ks_c_5601-1987 韓文 950 big5 繁體中文 (Big5) 1026 IBM1026 IBM EBCDIC (土耳其文拉丁文 5) 1047 IBM01047 IBM 拉丁文 1 1140 IBM01140 IBM EBCDIC (美國-加拿大-歐洲) 1141 IBM01141 IBM EBCDIC (德國歐洲) 1142 IBM01142 IBM EBCDIC (丹麥-挪威-歐洲) 1143 IBM01143 IBM EBCDIC (芬蘭-瑞典-歐洲) 1144 IBM01144 IBM EBCDIC (義大利歐洲) 1145 IBM01145 IBM EBCDIC (西班牙歐洲) 1146 IBM01146 IBM EBCDIC (英國歐洲) 1147 IBM01147 IBM EBCDIC (法國歐洲) 1148 IBM01148 IBM EBCDIC (國際歐洲) 1149 IBM01149 IBM EBCDIC (冰島文歐洲) 1200 utf-16 Unicode 1201 unicodeFFFE Unicode (Big endian) 1250 windows-1250 中歐語系 (Windows) 1251 windows-1251 斯拉夫文 (Windows) 1252 Windows -1252 西歐語系 (Windows) 1253 windows-1253 希臘文 (Windows) 1254 windows-1254 土耳其文 (Windows) 1255 windows-1255 希伯來文 (Windows) 1256 windows-1256 阿拉伯文 (Windows) 1257 windows-1257 波羅的海文 (Windows) 1258 windows-1258 越南文 (Windows) 1361 裘哈 韓文 (裘哈) 10000 macintosh 西歐語系 (Mac) 10001 x mac 日文 日文 (Mac) 10002 x-mac-chinesetrad 繁體中文 (Mac) 10003 x-mac-韓文 韓文 (Mac) 10004 x-mac-阿拉伯文 阿拉伯文 (Mac) 10005 x-mac-希伯來文 希伯來文 (Mac) 10006 x mac 希臘文 希臘文 (Mac) 10007 x mac 斯拉夫文 斯拉夫文 (Mac) 10008 x-mac-chinesesimp 簡體中文 (Mac) 10010 x mac 羅馬尼亞文 羅馬尼亞文 (Mac) 10017 x-mac-烏克蘭文 烏克蘭文 (Mac) 10021 x-mac-泰文 泰文 (Mac) 10029 x-mac-ce 中歐語系 (Mac) 10079 x mac 冰島文 冰島文 (Mac) 10081 x mac 土耳其文 土耳其文 (Mac) 10082 x mac 克羅埃西亞文 克羅埃西亞文 (Mac) 12000 utf-32 Unicode (UTF-32) 12001 utf-32be Unicode (utf-32 Big endian) 20000 x-中文-CN 繁體中文 (CN) 20001 x cp20001 TCA 台灣 20002 –倚天 x 中文 繁體中文 (倚天) 20003 x cp20003 IBM5550 台灣 20004 x cp20004 TeleText 台灣 20005 x cp20005 Wang 台灣 20105 x IA5 西歐語系 (IA5) 20106 x IA5 德文 德文 (IA5) 20107 x IA5 瑞典文 瑞典文 (IA5) 20108 x IA5 挪威文 挪威文 (IA5) 20127 我們 ascii US-ASCII 20261 x cp20261 T.61 20269 x cp20269 ISO -6937 20273 IBM273 IBM EBCDIC (德國) 20277 IBM277 IBM EBCDIC (丹麥挪威) 20278 IBM278 IBM EBCDIC (芬蘭瑞典) 20280 IBM280 IBM EBCDIC (義大利) 20284 IBM284 IBM EBCDIC (西班牙) 20285 IBM285 IBM EBCDIC (英國) 20290 IBM290 IBM EBCDIC (日文片假名) 20297 IBM297 IBM EBCDIC (法國) 20420 IBM420 IBM EBCDIC (阿拉伯文) 20423 IBM423 IBM EBCDIC (希臘文) 20424 IBM424 IBM EBCDIC (希伯來文) 20833 x-EBCDIC-KoreanExtended IBM EBCDIC (擴充韓文) 20838 IBM 泰文 IBM EBCDIC (泰文) 20866 koi8 r 斯拉夫文 (KOI8 R) 20871 IBM871 IBM EBCDIC (冰島文) 20880 IBM880 IBM EBCDIC (斯拉夫文俄文) 20905 IBM905 IBM EBCDIC (土耳其文) 20924 IBM00924 IBM 拉丁文 1 20932 EUC-JP 日文 (JIS 0208-1990年和 0212年 1990年) 20936 x cp20936 中文 (簡體) (GB2312-80) 20949 x cp20949 韓文 Wansung 21025 cp1025 IBM EBCDIC (斯拉夫文塞爾維亞文保加利亞文) 21866 koi8 u 斯拉夫文 (KOI8 U) 28591 iso-8859-1 西歐語系 (ISO) 28592 iso-8859-2 中歐語系 (ISO) 28593 iso-8859-3 拉丁文 3 (ISO) 28594 iso-8859-4 波羅的海文 (ISO) 28595 iso-8859-5 斯拉夫文 (ISO) 28596 iso-8859-6 阿拉伯文 (ISO) 28597 iso-8859-7 希臘文 (ISO) 28598 iso-8859-8 希伯來文 (ISO) 28599 iso-8859-9 土耳其文 (ISO) 28603 iso-8859-13 愛沙尼亞文 (ISO) 28605 iso-8859-15 拉丁文 9 (ISO) 29001 x 木衛二 木衛二 38598 iso 8859-8 i 希伯來文 (ISO-邏輯) 50220 iso-2022年-jp 日文 (JIS) 50221 csISO2022JP 日文 (JIS 允許 1 位元組假名) 50222 iso-2022年-jp 日文 (JIS 允許 1 個位元組片假名-因此 / SI) 50225 iso-2022年-kr 韓文 (ISO) 50227 x cp50227 中文 (簡體) (ISO 2022) 51932 euc jp 日文 (EUC) 51936 EUC CN 簡體中文 (EUC) 51949 euc kr 韓文 (EUC) 52936 hz-gb-2312 簡體中文 (HZ) 54936 GB18030 簡體中文 (GB18030) 57002 x-iscii-de ISCII 梵文字母 57003 x iscii 是 ISCII 孟加拉文 57004 x-iscii-東西 ISCII 坦米爾文 57005 x-iscii-te ISCII 特拉古文 57006 x iscii 身分 ISCII 阿薩姆文 57007 或 x iscii ISCII 歐利亞文 57008 巴 iscii x 卡 ISCII 坎那達文 57009 x-iscii-ma ISCII 馬來亞拉姆文 57010 x-iscii-gu ISCII 古吉拉特文 57011 x-iscii-pa ISCII 旁遮普語 65000 utf-7 Unicode (UTF-7) 65001 utf-8 Unicode (UTF-8) 參考資料 MSDN:Encoding 類別]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JSON精要筆記]]></title>
    <url>%2F2016%2F06%2F11%2Fjson-note%2F</url>
    <content type="text"><![CDATA[Introduction這篇其實就是一個筆記，紀錄一下讀書心得，看完這本JavaScript Object Notation精要：JSON核心主題導引 Conetent想仔細了解 Json 的可以參考一下 json.org。Json 都是名－值對（key value pair），需要注意 key 與 value 都要使用&quot;包起來，key 不使用的話就是 JavaScript 物件了，嚴格上來說是不同的，雖然在 JavaScript 中，都是一樣可以讀取。 正確格式1234&#123; "name":"allen", "gender":"male"&#125; 頂層 Json 陣列，這是有效的 json，建議不要如此使用，有安全性風險；這是假如在值的部分放入了方法，再使用 script 的方式引入，1234[ &#123;"user":"allen"&#125;, &#123;"gender":"male"&#125;] Json 資料型別 Object String Number Boolean Null Array Json 需要跳脫字元 \/（斜線） \b（後退） \f（送出） \t（tab） \n（換行） \r（回車） \u 後面接16進位字元 Json 語法檢驗 JSON Formatter &amp; Validator JSON Editor Online JSONLint Json 結構描述 JSON 結構描述 JSON 結構描述檢驗規格 JSON Schema Lint JSON Schema Validator Reference Json ORG JSON Formatter &amp; Validator JSON Editor Online JSONLint JSON 結構描述 JSON 結構描述檢驗規格 JSON Schema Lint JSON Schema Validator]]></content>
      <categories>
        <category>讀書筆記</category>
      </categories>
      <tags>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Postgresql 的一些查詢指令]]></title>
    <url>%2F2016%2F06%2F07%2FPGSQLCheatSheet%2F</url>
    <content type="text"><![CDATA[前言就是一份簡單的筆記 內文注意喔，以下大部分都是 PostgrestSQL 的查詢喔，使用的 PG 版本是PostgreSQL 9.5.3 查詢連線數1234SELECT datname, Count(*) FROM pg_stat_activity GROUP BY datname; 順便附上 Sql Server 的查詢連線數方式123456USE master SELECT cntr_value AS User_Connections FROM sys.sysperfinfo AS sp WHERE sp.object_name = 'SQLServer:General Statistics' AND sp.counter_name = 'User Connections' 取得版本1SELECT version(); 列出資料表名稱1234SELECT * FROM information_schema.TABLES WHERE table_schema = 'public' AND table_type = 'BASE TABLE' SQL Server 的查詢方式相當簡單，還是附上好了1select @@VERSION 取得繼承關係的資料表1234567SELECT parent.relname AS parent_table, child.relname AS child_table FROM pg_inherits join pg_class AS child ON ( inhrelid = child.oid ) join pg_class AS parent ON ( inhparent = parent.oid ) 參考資料 官方網站]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>PostgrestSQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Add Cmder to ContentMenu]]></title>
    <url>%2F2016%2F05%2F16%2FAdd-Cmder-to-ContentMenu%2F</url>
    <content type="text"><![CDATA[前言同樣是重新設定一些便利的操作而已。目的是為了可以使用滑鼠右鍵選單操作。 設定方式在設定之前，先說明我的環境，我的環境是在 Windows 10； 建立一個純文字檔案，將以下指令貼上，然後另存成 .bat 批次檔案 之後執行該批次檔案。 cmderPath 路徑按照個人的設定變動路徑位址 12345678@echo off SET cmderPath=D:\OneDrive\DevTool\Win\cmder_mini\Cmder.exe rem add it for Directory @reg add "HKEY_CLASSES_ROOT\Directory\Background\shell\Open with Cmder" /t REG_SZ /v "" /d "Open with Cmder" /f @reg add "HKEY_CLASSES_ROOT\Directory\Background\shell\Open with Cmder" /t REG_EXPAND_SZ /v "Icon" /d "%cmderPath%,0" /f @reg add "HKEY_CLASSES_ROOT\Directory\Background\shell\Open with Cmder\command" /t REG_SZ /v "" /d "%cmderPath% \"%%V\"" /f pause 參考資料 jojobyte:ContextCmder-Disable]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>Cmder</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Add SublimeText to ContentMenu]]></title>
    <url>%2F2016%2F04%2F12%2FAdd-SublimeText-to-ContentMenu%2F</url>
    <content type="text"><![CDATA[前言最近把電腦重灌，順便把一些環境設置記錄下來。Sublime Text 在滑鼠右鍵是沒有快捷鍵，有些文件檔案在開啟的時候就沒那麼方便，把 SublimeText 加入到右鍵選單，這樣就便利許多。 正文要調整滑鼠右鍵的話，就要動到登錄檔了，不過可以參考此篇，把以下的指令存成批次檔（.bat），然後使用管理者權限執行即可 1234567891011121314151617@echo off :: st3Path 為 sublime Text3 的程式路徑 SET st3Path=D:\OneDrive\Sublime Text Build 3065 x64\sublime_text.exe rem add it for all file types :: 滑鼠右鍵選單的顯示名稱 @reg add "HKEY_CLASSES_ROOT\*\shell\Open with Sublime Text 3" /t REG_SZ /v "" /d "Open with Sublime Text 3" /f :: 滑鼠右鍵選單的顯示圖示 @reg add "HKEY_CLASSES_ROOT\*\shell\Open with Sublime Text 3" /t REG_EXPAND_SZ /v "Icon" /d "%st3Path%,0" /f :: 執行程式路徑 @reg add "HKEY_CLASSES_ROOT\*\shell\Open with Sublime Text 3\command" /t REG_SZ /v "" /d "%st3Path% \"%%1\"" /f rem add it for folders @reg add "HKEY_CLASSES_ROOT\Folder\shell\Open with Sublime Text 3" /t REG_SZ /v "" /d "Open with Sublime Text 3" /f @reg add "HKEY_CLASSES_ROOT\Folder\shell\Open with Sublime Text 3" /t REG_EXPAND_SZ /v "Icon" /d "%st3Path%,0" /f @reg add "HKEY_CLASSES_ROOT\Folder\shell\Open with Sublime Text 3\command" /t REG_SZ /v "" /d "%st3Path% \"%%1\"" /f pause 完成後，滑鼠右鍵顯示 參考資料 Add “Open with Sublime Text 3” to Windows Explorer Context Menu]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>Sublime Text3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vdi to vhd(VirtualBox) & Vhd to Vhdx]]></title>
    <url>%2F2016%2F02%2F25%2FVMConverter%2F</url>
    <content type="text"><![CDATA[前言VirtualBox 建立的虛擬機器想移動到 Hyper-v 使用呀。 VDI to VHDVirtualBox 安裝後，會有 VBoxManage 轉換工具，要執行這工具，必須要在安裝程式路徑下執行命令提示字元；可由執行程式，開啟檔案位置。 接著請在 VirtualBox 安裝資料夾下的路徑執行以下指令，檔案格式除了 VHD，也可以轉換到 VMDK(VMWare 的格式) 1vboxmanage clonehd 來源檔案.vdi D:\目的檔名.vhd --format VHD 條列一下轉換格式，想更了解相關資料的可以參考官方文件 VDI VMDK VHD RAW other VHD to VHDX這部分就要透過 Hyper-V 來進行轉換了，只是 Hyper-V 提供的轉換只有 VHD 跟 VHDX 的互相轉換而已 參考資料 VirtualBox 皓皓-IT生涯-VHD轉換VHDX格式]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>Hyper-V</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hyper-v 建立虛擬機器]]></title>
    <url>%2F2016%2F02%2F24%2FVMBuild%2F</url>
    <content type="text"><![CDATA[記錄一下建立第 2 代虛擬機器的過程。因為之前沒建立過第 2 代的虛擬機器，在建立的時候發生無法安裝 OS 的情形，特別在這邊記錄一下 此篇使用 Ubuntu 作為範例安裝。 順便說下我的 OS 環境是 Win10 啟動 Hyper-V首先先啟動 Hyper-V，就是這個圖案 建立虛擬機器記得選取 第 2 代建立好之後，連線啟動該虛擬機器，然後發現問題了 問題點 The image’s hash and certificate are not allowed (DB) . 解決方法先把虛擬機器關閉，然後打開設定，在韌體設定部分，將啟用安全開機取消。 安裝完成上述動作後，重新啟動虛擬機器；這次可以順利安裝了，接著就把系統安裝完成吧。 參考資料 Ubuntu 正體中文 Wiki VirtualRick]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>Hyper-V</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Chrome 瀏覽器操作快捷鍵]]></title>
    <url>%2F2016%2F02%2F24%2FChrome-shortcuts%2F</url>
    <content type="text"><![CDATA[紀錄個人覺得比較便利與實用的一些快捷鍵(Windows/Linux 版本)。 分頁與視窗快速鍵 快捷鍵 說明 Ctrl + N 開啟新視窗 Ctrl + T 開啟新分頁 Ctrl + Shift + N 開啟無痕模式新視窗 Ctrl + O 開啟電腦中的檔案 按住 Ctrl 鍵，然後按一下連結 新分頁中開啟連結 按住 Ctrl + Shift 鍵，然後按一下連結 新分頁開啟連結，並切換至新開啟的分頁 按住 Shift 鍵，然後按一下連結 新視窗開啟連結 Ctrl + Shift + T 開啟您最近關閉的分頁 Ctrl + [Num] 切換分頁列上特定編號位置，由左至右編號由1～8；[Num]表示 1～8 Ctrl + 9 切換至最後一個分頁 Backspace 分頁瀏覽紀錄中的上一頁 Alt + ← 分頁瀏覽紀錄中的上一頁 Shift + Backspace 分頁瀏覽紀錄的下一頁 Alt + → 分頁瀏覽紀錄的下一頁 Chrome 功能快速鍵 快捷鍵 說明 Alt + F 開/關 Chrome 選單 Alt + E 開/關 Chrome 選單 F10 開/關 Chrome 選單 Ctrl + Shift + B 開/關書籤列 Ctrl + H 開啟紀錄網頁 Ctrl + J 開啟下載內容頁 Shift + Esc 開啟 Chrome 工作管理員 Shift + Alt + T 焦點設在瀏覽器工具列中的第一項工具，使用 Tab 切換 Ctrl + Shift + J 開啟開發人員工具 Ctrl + Shift + Delete 開啟 [清除瀏覽資料]視窗 Ctrl + Shift + M 切換多位使用者 網址列快速鍵在網址列中，可以使用以下方式快速輸入 快捷鍵 說明 Ctrl + Enter 網址列的輸入內容中加上 www. 和 .com 並開啟結果網址 Alt + Enter 新分頁開啟網址 Ctrl + L 全選網址列內容 Alt + D 全選網址列內容 Ctrl + K 網址列中自動代入 ?，使用預設搜尋引擎搜尋 Ctrl + E 網址列中自動代入 ?，使用預設搜尋引擎搜尋 Ctrl + ← 游標在網址列向左移動一個字詞 Ctrl + → 游標在網址列向右移動一個字詞 Ctrl + Backspace 刪除網址列中游標左邊的關鍵字詞 網頁快速鍵 快捷鍵 說明 Ctrl + P 列印網頁 Ctrl + S 儲存網頁 F5 重新載入目前的網頁 Ctrl + R 重新載入目前的網頁 Ctrl + F 開啟搜尋列 F3 尋找下一個與您在搜尋列所輸入內容相符的項目 Ctrl + G 尋找下一個與您在搜尋列所輸入內容相符的項目 Ctrl + Shift + G 尋找上一個與您在搜尋列所輸入內容相符的項目 Shift + F3 尋找上一個與您在搜尋列所輸入內容相符的項目 Shift + Enter 尋找上一個與您在搜尋列所輸入內容相符的項目 Ctrl + F5 重新載入目前的網頁，略過已快取的內容 Shift + F5 重新載入目前的網頁，略過已快取的內容 按住 Alt，然後按一下連結 下載連結目標 Ctrl + U 開啟網頁原始碼 Ctrl + D 網頁儲存為書籤 Ctrl + Shift + D 所有開啟的網頁儲存為新資料夾中的書籤 F11 開關全螢幕模式 Ctrl + 加號[+] 放大頁面 Ctrl + 減號[-] 縮小頁面 Ctrl + 0 頁面回復為正常大小 100% 備註有些功能相同的快捷鍵可以應對不同附加功能給予的快捷鍵互相衝突時使用。 參考資料 Chrome 說明書]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>Chrome</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[個人常用的 Sublime Text 3 快捷鍵]]></title>
    <url>%2F2016%2F02%2F23%2Fsublimetext-shortcuts%2F</url>
    <content type="text"><![CDATA[紀錄個人比較常用的一些快捷鍵，或是一些比較少用但是實用的快捷鍵(僅有 windows/linux 版本)。 一般操作(General) 快捷鍵 描述 Ctrl + Shift + P 打開命令框 Ctrl + K + B 開/關側邊欄 搜尋(Navigation/Goto) 快捷鍵 描述 Ctrl + F 打開底部的搜尋框 Ctrl + H 取代 Ctrl + Shift + F 按照資料夾/檔案進行搜索 Ctrl + P 打開搜尋框 Ctrl + R 打開搜尋框，自動代入@；前往符號(symbol)、函數名稱等 Ctrl + ; 打開搜尋框，自動代入#；前往變數名稱、屬性名稱(word)等 Ctrl + G 打開搜尋框，自動代入:；前往此檔案某行 編輯操作(Editing) 快捷鍵 描述 Ctrl + K + U 轉換大寫 Ctrl + K + L 轉換小寫 Ctrl + Enter 在下一行插入新行 Ctrl + Shift + Enter 在上一行插入新行 Ctrl + Shift + ↑ 將所在行和上一行互換 Ctrl + Shift + ↓ 將所在行和下一行互換 Ctrl + L 選取整行，跟 Shift + ↓ 效果相同 Ctrl + D 選取詞句，繼續操作則會繼續選取相同詞句的文字 Alt + F3 一次性選取相同內容的語句 Ctrl + M 游標移動到括號內結束或開始的位置 Ctrl + Shift + M 選取括號內的內容，繼續操作則會把括號一起選取 Ctrl + Shift + K 刪除整行 Ctrl + K + K 從游標處向右刪除到行尾 Ctrl + K + Backspace 從游標處向左刪除到行首 Ctrl + ] 向右縮排 Ctrl + [ 向左縮排 Ctrl + Shift + D 複製游標所在整行，並插入到下一行 Ctrl + J 合併選取的多行為一行 Ctrl + / 註解單行 Ctrl + Shift + / 註解多行 Ctrl + Z 返回上一操作 Ctrl + Y 前往下一操作，對應 Ctrl + Z；或是重複最後執行的快捷鍵操作 Ctrl + Shift + V 貼上並進行縮排 Ctrl + Space 顯示自動化建議語句 Alt + Shift + W 將選取的內容外插入 html tag Ctrl + T 游標左右字母互換 F6 單字檢測 Ctrl + Shift + L 先選取多行，操作後將開啟多行編輯 Ctrl + Shift + [ 先選取程式碼，操作後，摺疊程式碼 Ctrl + Shift + ] 先選取程式碼，操作後，展開程式碼 Ctrl + K + 0 展開所有摺疊程式碼 Ctrl + F2 設定/取消書籤 F2 切換下一書籤 Shift + F2 切換上一書籤 Ctrl + Shift + F2 清除所有書籤 分頁操作(Tabs) 快捷鍵 描述 Ctrl + Shift + T 開啟最後關閉的分頁 Ctrl + PgUp 分頁切換，向右順序切換 Ctrl + PgDn 分頁切換，向左順序切換 Ctrl + Tab 按照分頁瀏覽過的順序切換 Ctrl + W 關閉此分頁 Ctrl + [NUM] 切換到該數字代表的分頁，[NUM]表示分頁順序，由左至右，由 1 開始 視窗操作(Split window) 快捷鍵 描述 Alt + Shift + 1 切換到單一欄位，其實就是一般分頁 Alt + Shift + 2 切換到兩欄位，就是把兩個分頁合併在一個分頁顯示，左右對照形式 Alt + Shift + 3 切換到三欄位，一個分頁顯示四個分頁內容，左右對照形式 Alt + Shift + 4 切換到四欄位，左右對照形式 Alt + Shift + 5 切換到十字分隔(Grid)形式，上述的分隔都是條列分隔， Alt + Shift + 8 切換到兩欄位，橫向的分隔，上下對照形式 Alt + Shift + 9 切換到三欄位，橫向的分隔，上下對照形式 Ctrl + Shift + [NUM] 移動檔案到分隔的欄位，[NUM]表示 1-4 F11 全螢幕模式 參考資料 Sublime Text 3 Documentation]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>Sublime Text3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Web駭客攻擊手法及防護實戰 Day 3]]></title>
    <url>%2F2016%2F02%2F18%2Fwebhacking3%2F</url>
    <content type="text"><![CDATA[本日議程 正確設置 Web 及 db 服務 第三方元件檢測與分析 案例分享及解析 正確設置 Web 及 db 服務可以參考規範標準 NIST，建議觀看編號 SP 800-44 Version2 的文件，此篇文件 Guidelines on Securing Public Web Servers 都是說明 Web 相關的安全性。 例外，微軟也寫了一堆說明，而且很詳細。還有 Open Security Architecture 上的介紹，此篇可以看出詳細職能的區分。 第三方元件檢測與分析關於檢測的部分，需要考量第三方元件是否安全、是否有外洩的可能；可以觀看這篇資料安全軟體測試參考指引 案例分享及解析此篇主題就省略了… 附錄此篇附上介紹的工具與講師提到的部分資料。 coin &amp; able 15 年沒改過的軟體，請注意使用 XD 以下是三套進行檢測的工具 Nessus N-stalker OWASP ZAP Nessus 主要針對協定的弱點掃描進入下載頁面，選擇 Nessus Home 這樣就可以免費使用了，接著安裝，然後進行序號申請，要啟用需要進行序號申請(序號申請失敗請更換瀏覽器試試) ARPip 跟 mac 的對應 table，可以掃描 ip 就會對應到 mac，有 mac 就會掃到 ip Web Applications 家用版沒有提供，只有付費版才有，而且掃出來的結果跟 Zap 一模一樣，所以使用 Zap 就好 N-stalker 檔案下載前需要填寫資料，如果 Chrome 送不出去，請使用其他瀏覽器安裝完成後，直接啟動，如有需要更新請先行更新喔；然後就可以直接掃描了掃描完成後會有 Report，裡面會有錯誤編號，這些編號可以查詢 CVE 弱點庫 OWASP ZAP 安裝完成後，直接執行，輸入想要測試的 url 然後點下 攻擊 mimikatz 一個方便取得密碼的指令集工具 指令集privilege::debug 線上工具 Hash decrypted 參考資料 NIST MSDN:Web 應用程式的基本安全性實行方式 Open Security Architecture Nessus Download Nessus N-stalker OWASP ZAP CVE mimikatz]]></content>
      <categories>
        <category>心得筆記</category>
      </categories>
      <tags>
        <tag>other</tag>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Sheetsu 把 Google 試算表轉成 API]]></title>
    <url>%2F2016%2F02%2F01%2Fsheetsu%2F</url>
    <content type="text"><![CDATA[前言前陣子朋友在弄個小 case，想要拿 Google sheet 當作資料，後來他找了 Sheetsu 這工具，提供免費的轉換 API 第一步首先第一個步驟，你得先有一個 Google Account (XD)，沒有帳號的話就沒有 Google 雲端硬碟了。在雲端硬碟新增一個 Google 試算表，取一個好聽的標題名稱，然後在第一行(橫的)，輸入你想要的欄位名稱，這欄位名稱最好使用英文；這個欄位名稱就是你之後串接的 json 名稱，注意大小寫是不同的喔。另外，這個試算表你可以不用公開，你可以將這檔案設定成只有你自己可以存取。 第二步將試算表的 URL 複製，貼上到 Sheetsu 的欄位中，然後按下 Create API，輕鬆簡單，API 完成了。 注意事項如果只是這樣我記錄這東西做啥，當然是還有一些眉角，列出如下 只有 Get 全部資料與某列資料 Post 只有新增一筆資料 Post 數字會自動過濾，也就是送 09 出去，會變成 9 以上這些，關於數字的地方，還是有處理方式的，跟儲存格的方式差不多，多添加一個單引號就行了。但是想要修改資料的話，只能自己進去 Google 表單進行修改，想要透過 API 進行修改，請自行撰寫吧，畢竟只是簡單的工具而已。 範例 參考資料 API:Sheetsu]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>Google</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Disqus 申請與設定]]></title>
    <url>%2F2016%2F01%2F28%2FdisqusApply%2F</url>
    <content type="text"><![CDATA[前言一直以為我有記錄過這些，有朋友在詢問，才發現我居然沒紀錄過，乾脆趁現在重新寫一下好了。 註冊註冊步驟很簡單，甚至可以使用 FaceBook、Twitter、Google Plus 帳號註冊，參照下圖吧 設定註冊完成後，會顯示讓你選擇三個 channel，這個可以不用理它；直接進入 Add Disqus To Site，之後簡單的設定好之後(shortname 要記好，不記得可以到設定去找) 這邊輸入您想要的 disqus url 會看到 Installation 選擇你自己的平台，這邊使用 js 方式(如果是其他平台，有些就會用到 shortname) Disqus Universal Code12345678910111213141516171819202122&lt;div id="disqus_thread"&gt;&lt;/div&gt;&lt;script&gt;/*** RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.* LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*//*var disqus_config = function () &#123;this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variablethis.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable&#125;;*/(function() &#123; // DON'T EDIT BELOW THIS LINEvar d = document, s = d.createElement('script');s.src = '//disqussample01.disqus.com/embed.js';s.setAttribute('data-timestamp', +new Date());(d.head || d.body).appendChild(s);&#125;)();&lt;/script&gt;&lt;noscript&gt;Please enable JavaScript to view the &lt;a href="https://disqus.com/?ref_noscript" rel="nofollow"&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt; 其實嵌入如上所示，相當清楚，所以其實是可以將 js 這樣嵌入12345678910111213141516171819202122232425var disqus_shortname = your_short_name;(function()&#123; if(document.querySelector('#disqus_thread')) &#123; var d = document, dsq = document.createElement('script'); dsq.async = true; dsq.setAttribute('data-timestamp', +new Date()); dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js'; (d.head || d.body).appendChild(dsq);&#125;&#125;());// 留言計數(function()&#123; if(document.querySelector('#disqus_thread')) &#123; var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true; dsq.src = '//' + disqus_shortname + '.disqus.com/count.js'; (d.head || d.body).appendChild(dsq);&#125;&#125;()); 最後附上 DISQUS 的連結]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>Disqus</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Web駭客攻擊手法及防護實戰 Day 2]]></title>
    <url>%2F2016%2F01%2F27%2Fwebhacking2%2F</url>
    <content type="text"><![CDATA[本日議程 資料端安全 資料庫安全設置 連線與限制 權限管制與建議作法 資料安全所有的資安事件都不是單一的錯誤，都是一連串的錯誤引起。 SQL Injection 鄉野傳說 傳說…某冷色調店面討論區，有一位神人說.. SQL Injection 根本沒什麼!! 只要把 xp_cmdshell 刪除就好SQL Injection 只有 xp_cmdshell 有威脅?!只要以 SQL Parameter 即可!如果把 customErrors mode=”Off” 你就倒大霉了 註：xp_cmdshell 利用 sql server 去呼叫可執行程式，關掉之後，一堆處理都會掛點，而且 sql server 只會回答權限不足註：SQL Injection 做好，可以減少很多 XSS 錯誤 XP_cmdshell %20 BCP BCP命令SQL Server提供的一個快捷的資料導入匯出工具。使用它不需要啟動任何圖形管理工具就能以高效的方式導入匯出資料。當然，它也可以通過xp_cmdshell在SQL語句中執行，通過這種方式可以將其放到用戶端程式中（如delphi、c#等）運行，這也是使用戶端程式具有資料導入匯出功能的方法之一。 xp_cmdshell以作業系統命令列解譯器的方式執行給定的命令字串，並以文本行方式返回任何輸出。授予非管理使用者執行 xp_cmdshell 的許可權。 1234567891011121314151617181920212223242526272829303132333435SET NOCOUNT ONcreate table #a (name varchar(128), id int identity)INSERT #a( name) SELECT name FROM sysobjects WHERE xtype = 'U'declare @id int, @cmd varchar(2000)SELECT @id = 0while @id &lt; ( SELECT MAX(id) FROM #a) BEGINSELECT @id = MIN(id)FROM #aWHERE id &gt; @idSELECT @cmd = 'bcp ' + DB_NAME() + '..' + name + ' out"c:\temp\' + name + '.txt" -c -T'FROM #aWHERE id = @idEXEC master..xp_cmdshell @cmdSELECT @cmdEND 這兩者混合使用，會達到非常嚴重的後果，所以伺服器角色權限設定非常重要。 Blind SQL Injection:仰賴錯誤訊息來建構出攻擊的語法；例如:註冊日期的年份，輸入負值，看有沒有過濾 註：Oracle 的最大數值位數是零下 32 位註：PHP 5.2 和 5.3 版在 32bits 的 PHP 有浮點數 Bug，這個數字丟下去 2.2250738585072011e-308，會直接運算過載(沒有容錯處理) 自動化工具 Havij:網路上流傳的一部分有毒，請不要亂下載 XD W3AF:可測試 SQL Injection + XSS SQLMap:有同學整理相關指令集，或是 Facebook 搜尋 資訊安全+網路管理=資管? 加入該社群 SQL Ninja Hex to ASCII將上述的範例或是一些簡易的 SQL Injection 透過 Hex Convert 工具，如果轉換出來覺得沒有排版可以使用這個線上工具來格式化。 資料庫安全設置電腦發展到今年已經 52 年了，帳號密碼是最根本的驗證方法。而帳號與密碼對比而言，猜帳號比猜密碼還難，因為密碼還有限制，所以還比較好猜中； 3A架構 Identification(識別)輸入能被識別的資訊(如帳號、ID) Authentication(驗證)輸入的資訊是否正確，辨認使用者(可以是人員或程式)的身份 Authorization(授權)依照權限給予相對的權利，主要精神在於根據安全政策給予使用者所能擁有的權限 Accountability(審計)供稽核使用，包括量測(measuring)、監控(monitoring)、報告(reporting)各種資源使用量及事件紀錄（log）；主要精神在於收集必要的使用者與系統之間互動的資料，最完備的作法就是「凡走過必留下痕跡」，鉅細靡遺地記錄所有的互動。 所以 Identification(識別)應該是先確認帳號，確認這帳號存在，再行驗證密碼，如果不驗證帳號的話，就等於直接進入電腦了。例如：遠端登入桌面，你只要帳號對就等於進入對方電腦了。 註：sql server 提供的 AES 的預設加密是只有 128 位元，不過不幸的是已經被破了(附上雜湊函式生命週期表) IT冷知識：Microsoft AD 的驗證系統是 Kerberos(地獄三頭犬的名字) MS SQL資料庫的連線是基於RBAC(Role-base Access control;角色基礎存取控制)，MS SQL 是 RBAC Sysadmin &amp; Public 外部連結帳戶是 MSSQLServer SQLServerMSSQLUser$Computer$MSSQLSERVER sql server 檢查順序是這樣 MSSQLServer =&gt; Authenticated Users =&gt; Users =&gt; Everyone 最後發現都不行的時候，sql server 通知 OS 他需要一個寫入的權限，OS 會開啟一個臨時的 Authenticated Users版本愈新，控制措施愈好! 當你開了 Everyone 就包含了Everyone&lt;=Users &lt;= Authenticated Users&lt;=MSSQLServer 有些人的資料庫會有本機執行時候很快，但是架到 Server 上發現，每秒鐘幾百 MB 的寫入率(單機)變成 27 MB 的寫入率(因為 sql server RBAC 會檢驗各個身分去看能不能寫入)，就是這個原因。 伺服器角色 角色 描述 sysadmin 系統管理員 (sysadmin) 固定伺服器角⾊的成員可以在伺服器中執行所有活動。 serveradmin 伺服器管理員 (serveradmin) 固定伺服器角⾊的成員可以變更整個伺服器的組態選項及關閉伺服器。 securityadmin 安全性管理員 (securityadmin) 固定伺服器角⾊的成員可以管理登入及其屬性。他們可以 GRANT、DENY 及 REVOKE伺服器層級權限。如果他們擁有資料庫的存取權，也可以GRANT、DENY 和 REVOKE 資料庫層級權限。此外，他們可以重設 SQL Server 登入的密碼。 processadmin 處理序管理員 (processadmin) 固定伺服器角色的成員可以結束在 SQL Server 執行個體中執行的處理序。 setupadmin setupadmin 固定伺服器角色的成員可以使用 Transact-SQL 陳述式加入和移除連結伺服器 (使用 Management Studio 時需具備 sysadmin 成員資格)。 bulkadmin 大量管理員 (bulkadmin) 固定伺服器角色的成員可以執行 BULK INSERT 陳述式。 diskadmin 磁碟管理員 (diskadmin) 固定伺服器角色是用來管理磁碟檔案。 dbcreator 資料庫建立者 (dbcreator) 固定伺服器角色的成員可以建立、改變、卸除及還原任何資料庫。 public 每一個 SQL Server 登入都屬於 public 伺服器角色。當伺服器主體未被授與或拒絕安全物件的特定權限時，該使用者會繼承授與該物件之 public 的權限。只有當您想要將任何物件提供給所有使用者使用時，才指派該物件的 public 權限。您無法變更 public 的成員資格。 資料參考：MSDN Securityadmin 權限幾乎等同 Sysadmin，但是兩者指令牴觸的時候，以 Sysadmin 為主 Setupadmin 權限等同 ServerAdmin 連線與限制資料庫權限影響 網路 防火牆 協定 作業系統 權限設定明確許可與明確拒絕非常重要，只要你設定為明確拒絕寫入的權限，那就幾乎不可能有 SQL Injection；但是這些安全性架構對於欄位新增的設定很麻煩，但是銀行、航空公司都是這樣的設定，安全性比較安全，所以像航空公司行李的托運條碼從 13 碼擴增就花了 13 年，才把全球的資料庫更新統一。 應用程式安全共用資料夾的代理身份、服務啟動帳號權限設置或指定特定帳號及權限設置，例如：IUser是否有寫入權，ASPNET是否應明確拒約特定目錄寫入權 資料庫 身分角色 資料庫權限資料庫出包影響最大，依次遞減為作業系統、網路兩層，所以網路層安全性出問題，不會往後放大影響。 網路 防火牆 協定 IPv4 不能驗證來源，IPv6 可以獲取哪台電腦的 Mac Address RBAC 的精神，伺服器角色與登入其電腦身分的權限，sql server 是以其登入其電腦身分權限為主；也就是說，就算你的 sql server 登入角色權限是最大的，但是想要將 table 資料擷取建立到新建資料夾等等，是要判斷你登入該電腦身分的權限，是否擁有建立的權限。 Sysadmin 與 Securityadmin 是在系統帳戶權限下；剩下的角色都是在資料庫權限下。 權限管制與建議作法Robocopy 指令 關掉防火牆特定的 profile1netsh advfirewall set /? MSDN 提供 DirectAccess 防火牆規則設定上，MS 資料庫的 1433 port 除了這個 port 之外，sql server 還可以分離，data 走 1433，指令跑 1434 μ δ 這些符號送到 SQL 裡面，SQL 無法解析會導致電腦自動重啟 windows server 2012 原生就可以跑 php php reference 多加一個單引號，可以把使用的方法列出；如果是 asp.net 會直接把 web.config 裡面的連線字串取出 SQL Injection 會讓被入侵的電腦，裡面新增的檔案(大量)建立日期都是一樣； 注意是否被 dll Injection 參考資料 bcp 公用程式 Hex To ASCII Converter SQL Formatter SQLMap SQLMap 指令集 QxOrm QxOrm安裝教學 W3AF W3AF windows download SQL Ninja HTML URL Encoding Reference MSDN:DirectAccess hacking 統計數據zone-h Test IP Address]]></content>
      <categories>
        <category>心得筆記</category>
      </categories>
      <tags>
        <tag>other</tag>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Web駭客攻擊手法及防護實戰 Day 1]]></title>
    <url>%2F2016%2F01%2F11%2Fwebhacking%2F</url>
    <content type="text"><![CDATA[本日議程 資安基本概念 各種標準解析 當資料變程式時 輸入確認及輸出確認 服務設定架構 2015 Mandiant 網路攻擊趨勢報告 2014前三大APT受駭產業 金融服務(15%) 媒體與娛樂(13%) 製造業(10%) 2015前三大APT受駭產業 商業及專業服務(17%) 零售(14%) 金融服務(10%) 進階持續性滲透攻擊(Advanced Persistent Threat, APT)，什麼是 APT？講師提了一個例子：某高中女生某天回家路上，在離家不到百公尺的距離遇到一男子，那男子身穿大衣，雙手似在衣內進行手部運動(XD)，女高中生受到驚嚇趕緊回家，並告知家人這件事情，但是家人認為應該是突發性事件；之後，這情形持續了一年，終於在某天，女高中生的男友送她回家，在門口前吻別，那跟蹤男子大受刺激，跑到高中女生前大喊：「妳怎麼可以這樣」之後急速跑離。原來，這跟蹤男子暗戀女高中生這例子就是 APT &gt;.&lt; WEB Server 最難維持的是? 可用性(Availability) 即時 可信任 一致性(Integrity): 避免未經授權的人做未經授權的變更。 避免授權的人做未經授權的變更。 機密性(Confidentiality) 避免有意或無意的機密資料不是敏感資料，例如前女友這是敏感資料 但是 Web Server 最難維持是一致性 雲端解決方案 雲端提供的是高可用性的解決方案。 雲端最大的罩門則是機密性! 隱私資料傳到雲端上失控時即開始散播!例如：Google free account 其實 google 擁有你所有檔案存取、散佈、再造的權力又或者小紅傘免費版擁有提取分析病毒樣本的權利(例如中毒的是你的個人照片，被散佈到小紅傘) 角度與知識黑箱、灰箱、白箱(黑帽、灰帽、白帽) 黑箱：沒有任何的資訊與權限 灰箱：部份的知識或授權 白箱：完全的充份授權白箱檢測就像原始碼檢測 典型的測試流程 主機弱點掃描:檢查主機 port 做什麼事 協定弱點掃描 組態設置測試 應用程式測試 資料權限測試 MAC(Mandatory Access Control)主動存取控制，例如:網路芳鄰DAC(Discretionary Access Control)被動存取控制 Hack如何扒糞? DNS WHOIS Google Hack使用 Google Search 1Robots.txt Disallow /admin filetype:txt Robots.txt 關鍵字 Fingerprint DemoDNSDNS 區域轉送測試指令碼123456nsloolupserver 8.8.8.8 set type=nsdomain.comserver dns.domain.comls domain.com telnet 很好用 T_T123telnet yourTargetHEAD / HTTP/1.0 然後要按兩次 ENTER 改 PORT 只是騙自己使用 NMAP 工具，列舉你的 port1Nmap –PN –sT –sV –p0-65535 x.x.x.x 改 port 不是就能一勞永逸，只要對方列舉 port ，就能知道開啟的 port 。 幾個流傳較廣的 hacking Facebook SQL Injection 各種標準解析 系統測試遵循OSSTMM(Open Source Security Testing Methodology Manual)v3判別使用那些 OS 等等，例如:ssh 絕對不是 windows 網站應用程式測試遵循OWASP(Open Web Application Security Project)Testing Guide v4 網路安全問題測試遵循SANS(SysAdmin, Audit, Networking, and Security)(Top 20 Internet Security Problems, Threats and Risks) (TOP 25 Most Dangerous Programming Errors) 三種測試遵循各有優缺點，所以最好是三種都測試過，最是完善。 主機弱點 服務版本(版本過舊問題很多) 協定的基礎程式弱點 應用程式 組態設定 測試細項很多，可以參考 Guideline 文件 Injection資料庫建立使用者資料，通常第一筆資料是一個停用的 nobody，因為這是為了避免最高權限資料被輕易找到 程式和資料的糾結主要特性是吃了才知道有毒，簡單說就是資料餵回 server ，進行檢測才知道有問題等等，而沒辦法信任丟回前的檢測，因為在 Client 的檢測很容易被使用者關閉。 輸入確認及輸出確認 帳號/密碼本身就是問題，要納入的驗證有哪些？運算符號、科學符號？最好方式是使用白名單 大部分人都只進行 input validation，但是 output validation 讀取資料庫時，應該很少人還會再過濾一次。 無害測試法使用單引號進行測試，在網址後加上單引號，尤其是使用參數的網址 作業OWASP_Testing_Guide_v4 的 Testing for SQL Injection 參考資料 OWASP Top Ten Project OWASP Taiwan OWASP Top 10:2013 English OWASP Top 10:2013 Chinese OWASP Testing Guide v4 OWASP Testing Guide v4 中文 NMAP SQL Injection Prevention Cheat Sheet]]></content>
      <categories>
        <category>心得筆記</category>
      </categories>
      <tags>
        <tag>other</tag>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[現代化網站技術分享日筆記心得]]></title>
    <url>%2F2015%2F12%2F28%2Ftechshareday%2F</url>
    <content type="text"><![CDATA[活動簡介 時間：12/22(二) 地點：台北國際會議中心 201 會議室(台北市信義路五段 1 號) 主辦單位：Microsoft iThome 活動議程 時間 議程 09:30-10:20 現代化網頁開發技術三要素 10:40-11:20 SASS &amp; RWD 前端版型架構規劃 11:40-12:20 104 兒童美術館 (cicisasa.com) 自動部署上線技術分享 13:30-14:10 前端網頁資料視覺化設計 14:30-15:10 解密網頁設計效能優化 15:30-16:10 現代網頁設計趨勢觀察 現代化網頁開發技術三要素上官林傑 / 台灣微軟 應用開發技術經理 演講內容 現在網頁開發應該注意的事項 標準文件模式使用&lt;!DOCTYPE html&gt;作為開頭避免使用X-UA-Compatible標頭，限制瀏覽器的能力 減少依賴外掛程式安裝外掛程式會讓使用者不想停留在該網頁上一定要用外掛程式嗎？找出當初使用此外掛程式的原因，逐漸走向沒有外掛程式的網頁應用。此處的外掛是指例如：ActiveX、flash 避免判斷瀏覽器版本瀏覽器版本不再是重要的指標，因為現在瀏覽器更新頻率很高，你很難記住哪些瀏覽器支援哪些功能，應該檢查此 function &gt; &gt; 存在，而不是根據瀏覽器版本做判斷。 使用新版的 JavaScript 函式庫修正舊版本的錯誤，提升效能，如果你還在使用舊版本，等於在折磨你的 user換不掉的原因可能是用了太多 plugin，存在著技術債使用更有效率、瀏覽器原生的 HTML5/ECMAScript 2015 APIs大幅導入 HTML5 特性的 jQuery 1.6 都是已經四年前的事了…以 jQuery 為例，假如你在用 1.8.0 那你盡量用 1.8.3，找最穩定的版本，但是不要用latest.js XD 減少在 CSS 中使用 vendor-prefix-webkit-* 反而成為這個年代的 IE6，減少使用vendor-prefix，新增更多相容性建議查看 http://caniuse.com 或 升級最新版本的 CSS Framework Site ScanGithub 上有開放原始碼，可單機進行 RWD, Responsive Web Design以前螢幕解析度還有特定解析度，但現在已經無法預測世界會有多少解析度了…要採用手機用戶思考使用情境，更容易進行設計 ( 例如 table 桌機和手機設計大不同 ）比較快速的方法：套用 RWD framework設計是一回事，那怎麼做測試？ 手動調整瀏覽器寬度BrowserStackBrowser screenshots 支援高解析度螢幕新的裝置幾乎都是高解析度螢幕 HTML5 picture picturefill 向量圖形，向量字型 Touch Friendly減少只有滑鼠可以操作的行為針對特殊的輸入格式，提供不同的鍵盤按鈕 例如&lt;input type=&quot;email&quot;&gt; 自動化工具挑一個熟悉，生態系還活著的來用 grunt gulp broccoli TypeScript編譯成 JavaScriptJavaScript 本身沒有 TypeTypeScript 可以加上 Type 可以檢查呼叫的 Type ， 確認資料型態是否正確 BabelJS將 ES6 的語法翻譯成 ES5 VorlonJs大大部落格有介紹使用 Vorlon.js: 同時測試多瀏覽器網頁呈現的好工具同時偵錯多個瀏覽器的呈現效果的工具，使用 nodejs 開發如果在本機跑的話，會在本機產生一個 web 應用程式網站裡只要加上一行： 1&lt;script src="http://localhost:1337/vorlon.js"&gt;&lt;/script&gt; 感想：大大說明了開發現代化網頁的注意事項，以及設計的重點。 SASS &amp; RWD 前端版型架構規劃廖洧杰/高雄前端社群發起人 Sass &amp; rwd前端版型架構規劃 from 洧杰 廖 感想：命名與架構規劃的結合，讓你維護更加便利。 補充：Airbnb CSS / Sass Styleguidebootstrap 4 用 sassbootstrap 5 用 postcss Modem FrontEndDevops - 104 兒童美術館 (cicisasa.com) 自動部署上線技術分享李坤承 / 104 Devops 專案經理 演講內容 兒童美術館這個網站，導入很多新技術 why FrontEnd Devops？Devops 其實不太會分前端後端但是許多 Ops 偏向後端技術，他們不懂 為何前端如何複雜？ 我們需要好的架構，做上線的規劃我們需要瞭解一些後端技術Plan &amp; Goal 計畫網站要如何部署 自動化！！！不自動化的話，會非常的辛苦，為了降低人工的成本，自動化的範圍：QA TESTing 需要有好的 JS/CSS 框架，如果沒有的話，會非常難處理 利用 HotDeploy 實現 Zero Downtime特性是，上線的話，網站不需要封站如何網站不要封，在部署的時候，那些使用者還繼續在使用你的網站要去實現 Zero Downtime，要做的難度非常高，台灣的網站目前要做到，是完全不可能的，但我們把這個當作目標來看。如果做自動化的話，要 CI/CD 實現隨時都可以上線 500 error 需要被 handleserver handlserver error handleing!!! cicisasa 是如何做到如何自動部署？ cicisasa 做的事情是 免費儲存小孩圖畫的網路空間，保存孩子的童年回憶及創意這個需求很簡單，把圖片上傳，讓大家留言和分享那這麼簡單，就拿來玩吧，當作技術的實驗場 考慮要用什麼 Code language？例如 PHP nodejs 等最後決定是 nodejs因為是輕量，語法很簡單，前後端語言可以相容，可以一致，有相當豐富的 Ecosystem Ecosystem 使用的技術 Database redis FrontEnd Framework JS Framework Backbone.js Grunt browserify Bower Continuous integration Travis CI Template Engine JADE mocha PhantomJS socket.io HotDeploy naught 感想：這個實作範例的目標是 Zero Downtime，但是大大特地繞了一下，想要當作技術實驗場 補充: Kenny大大的gitHub 有分享日的資料 前端網頁資料視覺化設計吳泰輝/infographics.tw 創辦人 演講內容 資料和前端怎麼結合在一起A 3-D View of a Chart That Predicts The Economic Future: The Yield CurveData-Driven Documents( D3.js)d3.js 不只可以畫 svg 也可以做數值運算 還可以畫 3d 的圖例如： Banana in X3D bl.ocks.org Processingp5.jspixijsPathGLPathGL D3,meet webGL RWDnew york time exampleU.S. GUN DEATHS我們在做視覺化的時候，如果遇到螢幕比較小，可以把相關的文字資訊移出來圖表文字的大小要注意長條圖的長寬是可以調整的，自己去做 scale如果遇到螢幕比較小，手指比較大，我們可以利用切割區域的方式增加感應的區塊當你資料真的很多，但又想要全部顯示出來的話，可以透過 change房地資訊實驗室 嫌惡設施報你知 灰色是墓碑，紅色是電塔 Visualization without Web當我們在考慮視覺化的時候，我們可以用什麼方式讓人們重新去做思考U.S. 視覺化搭配情緒影響力，我們可以發現更多不一樣的東西報導者，零傳媒不只是視覺，還包括聽覺等等來敘事新聞上面要怎麼使用這些新技術新知和案例 感想：視覺化設計的工具不少，效能與表現效果的取捨得看內容決定，所欲表達的內容，利用視覺化呈現達到加倍的效果是視覺化的目的。 解密網頁設計效能優化 (The Secrets of Web Design Performance)Paul Li / Yahoo Front End Engineer 演講內容 WebPageTest yslowChrome devTool 快速瞭解網站缺點和優點，進一步去改善點到 Network 會看到網站發出哪些 Request 以及 藍色的線和綠色的線藍色的線越短越好，藍色越短，使用者可以越快看到我們的內容第一個原則是： 有效的減少 request 因為是我們網站等待時間成本最高的部分點選 Timeline 可以看到 request detail今天的任務就是有效的減少 request如果你不在乎 user 的感受，那麼使用者就用訂單來修理你Avoid 404 response我們要盡量避免這種事情發生，千萬不要忘記這個小圖示(Favicon)的置入可能我們的頁面會有不同的 modulecheckout flow - cartYahoo是BY PageFlow來載入CSS，只MERGE相關的CSS，不會載入不必要的CSS用inline可以減少Request，但就無法得到Cache的好處。the Ultimate solution Css Sprites把所有的 icon 都 merge 成一張，透過 css 做動態定位的效果原本有 50張圖片的 request，拼成一張 只需要一個 requestor svg sprite? Icon font把圖形放到字型裡面，透過 Icon font，顯示向量圖檔，不會有失真的問題出現例如： IcoMoon imageLazyLoadMinimize cookieExtend Max parallel HTTP request如果我們可以拓展連線數的話，可以拆開不同的 domain，就可以加速同時連線的速度這邊應該是 hostname 吧？Frontend就是要幫DOM做有效的瘦身 Remove useless DOM例如：css的beforeafter(使用css的before和after，就可以消除多餘的div，也減少DOM）Generate DOM when needStore DOM in somewhere SEO Structure dataSchema.org使用 Microdata 會增加不少的節點，建議不要再用了！我們可以使用最新最潮的 JSON-LDStructured Data Testing Tool 即早輸出CSSCSS SELECTOR 做優化（browser是右邊往左邊讀)盡量用classname做快速選取Screen Render flow 1234567CSS attribute: will-change.moving-element &#123;will-change: transform;&#125;.moving-element &#123;will-change: transform, opacity;&#125; 只要是CSS可以做到的，就不會用JS去代工JS是一個一個下載後再解析，等所有JS載入完成，會很久 timeline動態的運行 script pageRendersome javascript tips真正需要用到才去 init不要把太多的事件加在同一個 element ，會造成效能上的損耗不要在同一個時間做太多DOM的操作 Remove Flash早期 multi-upload video 等，現在 html5 都可以幫我們執行Navigation Timing API Web Storage我們可以透過 client side 來幫我們儲存資料有效減少 request，幫我們把資料 cache 起來可以用在例如搜尋 ( relative dropdown list ) 或autocomplete instant page 感想：Paul 大大的調校面面觀，很有收穫呀。 現代網頁設計趨勢觀察李建杭(Amos) / 熱血的前端開發者＆講師 那道閃光真的離開我們了！！！ flash！！最友善的瀏覽器被宣告了死刑Javascript 突然稱霸了網路世界視覺＋互動扁平化設計當道網頁總要放漢堡操作流程改善網頁互動改善動畫設計組件化參考網站 Smashing awwwards UXPin 補充一下最後Amos大demo的sublime text 外掛 (iconfont snippets)： 詳細來源可以參考共筆資料]]></content>
      <categories>
        <category>心得筆記</category>
      </categories>
      <tags>
        <tag>other</tag>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DataGridView 在 Winform 的簡單操作(5)]]></title>
    <url>%2F2015%2F12%2F25%2FDataGridView-in-winform-5%2F</url>
    <content type="text"><![CDATA[前言前篇文章主要是針對資料來源的綁定，學會了那些，那這篇就來個進階的連動 前置作業首先在介面增加個 comboBox 並將 Name 命名為 cbDes，介面設計如下圖 接著把上次 ComboData 類別變換一下格式，把 Value 變成 int，記得修正因為格變換的錯誤12345678public class ComboData &#123; public ComboData(string text, int value) &#123; Display = text; Value = value; &#125; public string Display &#123; get; set; &#125; public int Value &#123; get; set; &#125;&#125; 連動 ComboBox接著先來把剛剛新增的 comboBox 增加下拉選單的選項，並讓 Gender 的選單動態變更 Description。先建立一個不同選項的資料對應表1234567891011121314151617181920212223242526private void cbDesBind(dynamic sender, string selVal) &#123; List&lt;ComboData&gt; listDes = new List&lt;ComboData&gt;(); switch (selVal.Trim()) &#123; case "Male": listDes.Add(new ComboData("Handsome", 1)); listDes.Add(new ComboData("Nuttiness", 2)); listDes.Add(new ComboData("Polite", 3)); listDes.Add(new ComboData("Burly", 4)); break; case "Female": listDes.Add(new ComboData("Beautiful", 1)); listDes.Add(new ComboData("Sexy", 2)); listDes.Add(new ComboData("Cute", 3)); break; default: listDes.Add(new ComboData("Handsome", 1)); listDes.Add(new ComboData("Nuttiness", 2)); listDes.Add(new ComboData("Polite", 3)); listDes.Add(new ComboData("Burly", 4)); listDes.Add(new ComboData("Beautiful", 5)); listDes.Add(new ComboData("Sexy", 6)); listDes.Add(new ComboData("Cute", 7)); break; &#125; sender.DataSource = listDes;&#125; 接著在頁面初始化的時候載入(…表示省略程式碼)12345678public Form1() &#123; InitializeComponent(); ... cbDes.DisplayMember = "Display"; cbDes.ValueMember = "Value"; cbDesBind(cbDes, "Male"); ...&#125; 然後就是要讓選單連動了，在 Gender 的下拉選單觸發 SelectedIndexChanged 事件，然後呼叫剛剛的 cbDesBind123private void cbGender_SelectedIndexChanged(object sender, EventArgs e) &#123; cbDesBind(cbDes, (sender as ComboBox).Text);&#125; 連動 DataGridView 中的下拉選單先把預設的呈現資料增加 Description 這欄位的資料123456789101112131415161718192021222324252627private DataTable sampleData() &#123; using (DataTable table = new DataTable()) &#123; ... table.Columns.Add(&quot;Des&quot;, typeof(int)); // Add rows. table.Rows.Add(&quot;Allen&quot;, 1, 0, DateTime.Now, 1); table.Rows.Add(&quot;Kevin&quot;, 1, 1, DateTime.Now, 2); table.Rows.Add(&quot;Dean&quot;, 1, 0, DateTime.Today, 3); table.Rows.Add(&quot;Jenny&quot;, 0, 1, DateTime.Today, 1); return table; &#125;&#125;private void gvInit() &#123; ... DataGridViewComboBoxColumn cb = new DataGridViewComboBoxColumn() &#123; Name = &quot;gvDes&quot;, DataPropertyName = &quot;Des&quot;, HeaderText = &quot;Des&quot;, DisplayMember = &quot;Display&quot;, ValueMember = &quot;Value&quot; &#125;; cbDesBind(cb, &quot;&quot;); gvSample.Columns.Add(cb); ...&#125; 這時候發現 DataGridView 的下拉選單會與新增功能的下拉選單連動，這是因為這兩個選單我偷懶使用相同資料來源，而 SelectedIndexChanged 會監看到同樣來源資料的變更，所以這邊進行一下小調整，建一個新的資料來源12345private void gvInit() &#123; ... gvGender.DataSource = cbData.Select(q=&gt; q).ToList(); ...&#125; 接著來進行 DataGridView 中的欄位連動，首先針對 DataGridView 增加一個EditingControlShowing事件，這表示當此事件是發生於顯示編輯儲存格的控制項時123456789101112131415161718192021222324252627282930private void gvSample_EditingControlShowing(object sender, DataGridViewEditingControlShowingEventArgs e) &#123; // 判斷觸發事件的欄位是 Gender 才進行以下動作 if (((DataGridView)sender).Columns[((DataGridView)sender).CurrentCell.ColumnIndex].Name == "gvGender") &#123; ComboBox cb = e.Control as ComboBox; if (cb != null) &#123; // 增加事件 cb.SelectionChangeCommitted += new EventHandler(cb_SelectedIndexChanged); &#125; &#125;&#125;private void cb_SelectedIndexChanged(object sender, EventArgs e) &#123; // 取得現在欄位索引 int columnIndex = gvSample.CurrentCell.ColumnIndex; // 將控制項轉給 ComboBox ComboBox cbx = sender as ComboBox; // 判斷現在選取的 Column 是 Gender if (gvSample.Columns[columnIndex].Name == "gvGender") &#123; string selTxt = cbx.Text, selVal = cbx.SelectedValue.ToString(); // 當選取項目值和顯示文字任一為空，就不進行動作 if (string.IsNullOrEmpty(selTxt) || string.IsNullOrEmpty(selVal)) return; // 將此列資料的 Des Cell 取出 // 其 DataType 為 DataGridViewCell // 將其強制轉換為 DataGridViewComboBoxCell var targetCbx = gvSample.CurrentRow.Cells["gvDes"] as DataGridViewComboBoxCell; // 綁定資料 cbDesBind(targetCbx, selTxt); &#125;&#125; 別忘記把新增的功能增加項目12345private void button1_Click(object sender, EventArgs e) &#123; ... dr["Des"] = cbDes.SelectedValue; ...&#125; 現在剩下當範例資料載入的時候沒有去將 DataGridViewComboBox 連動，要完成這功能，只要寫個迴圈去跑 DataGridView 每 row 的資料，然後變動更新就好。把以下程式碼放到gvInit()這方法的最後12345678910private void gvInit() &#123; ... // DataGridViewComboBoxCell gvDes dynamic databinding foreach (var dgvr in gvSample.Rows) &#123; var targetCell = ((DataGridViewRow)dgvr).Cells["gvDes"] as DataGridViewComboBoxCell; var genderCell = ((DataGridViewRow)dgvr).Cells["gvGender"] as DataGridViewComboBoxCell; if (targetCell == null) continue; cbDesBind(targetCell, genderCell.FormattedValue.ToString()); &#125;&#125; 現在會發現，畫面好像還是沒有變化，這是因為呼叫gvInit()是在 Form1 初始化的時候，在 *LifeCycle 上，有順序上的問題，所以將gvInit()移動到Form1_Load事件123private void Form1_Load(object sender, EventArgs e) &#123; gvInit();&#125; 至於為什麼不移動到 DataBindingComplete 則可以參考這篇，主要是因為會多跑一次，所以才用這種架構。StackOverflow:Alternative to DataGridView DataBindingComplete Eventlink123456789101112131415161718192021222324private void Initialize_DataGridView()&#123; // Add dummy data to generate the columns this.dataGridView_Items.DataContext = new Item[]&#123; new Item &#123;Id = 5, Value = 6&#125;&#125;; // Make your formatting foreach (DataGridViewRow row in grdComponents.Rows) &#123; row.HeaderCell.Value = row.Cells[0].Value.ToString(); &#125; grdComponents.Columns[0].Visible = false; // Reset the dummy data this.dataGridView_Items.DataContext = null; // Or new Item[]&#123;&#125;;&#125;...public MyForm()&#123; Initialize(); this.Initialize_DataGridView(); &#125; 最後順便調整一下DataGridView編輯模式，不然每次都要在 DataGridView 點擊兩次才會出現下拉選單；只要在gvInit()中增加1gvSample.EditMode = DataGridViewEditMode.EditOnEnter; 下拉選單的防呆設計，增加以下程式碼在cbDesBind方法內，放在設定 DataSource 之前就可以123456789101112131415161718192021222324private void cbDesBind(dynamic sender, string selVal) &#123; List&lt;ComboData&gt; listDes = new List&lt;ComboData&gt;(); switch (selVal.Trim()) &#123; case "Male": listDes.Add(new ComboData("Select...", 0)); ... break; case "Female": listDes.Add(new ComboData("Select...", 0)); ... break; default: listDes.Add(new ComboData("Select...", 0)); ... break; &#125; if (sender.GetType().Name == "DataGridViewComboBoxCell") &#123; var cb = (DataGridViewComboBoxCell)sender; if (!listDes.Any(q =&gt; q.Value == (int)cb.Value)) &#123; cb.Value = 0; &#125; &#125; sender.DataSource = listDes;&#125; 差不多完成了，但是發現這樣連動綁定，在新增一筆資料，在 Des Column 會是預設的下拉選項；如下圖所示好吧，看起來只能使用 DataBindingComplete 作法，把gvInit()放到Form1()初始化，把原本的綁定程式碼移動到 DataBindingComplete 事件123456789101112private void gvSample_DataBindingComplete(object sender, DataGridViewBindingCompleteEventArgs e) &#123; // DataGridViewComboBoxCell gvDes dynamic databinding var dgv = sender as DataGridView; if (dgv.Rows.Count &gt; 0 &amp;&amp; dgv.Columns.Count &gt; 5 ) &#123; foreach (var dgvr in dgv.Rows) &#123; var targetCell = ((DataGridViewRow)dgvr).Cells["gvDes"] as DataGridViewComboBoxCell; var genderCell = ((DataGridViewRow)dgvr).Cells["gvGender"] as DataGridViewComboBoxCell; if (targetCell == null) continue; cbDesBind(targetCell, genderCell.FormattedValue.ToString()); &#125; &#125;&#125; 畫面呈現這個系列就先到此結束，之後有其他想法再繼續延伸吧。 範例程式Github 上的 Sample Code 參考資料 MSDN:EditingControlShowing MSDN:DataGridView 事件 StackOverflow:DataBindingComplete Event]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>WinForm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DataGridView 在 Winform 的簡單操作(4)]]></title>
    <url>%2F2015%2F12%2F21%2FDataGridView-in-winform-4%2F</url>
    <content type="text"><![CDATA[前言前篇文章都是靠設計頁面完成，但是如果我想要直接靠程式碼動態給予 DataGridViewComboBoxColumn 選項資料，所以此篇來做一些簡單應用。 正文方式一在設計頁面的時候，給予這 DataGridViewComboBoxColumn 欄位一個 Name，然後如下12345678private void gvInit() &#123; gvGender.Items.Clear(); gvGender.Items.AddRange(new object[] &#123; "Male", "Female", "test"&#125;); gvSample.DataSource = dt;&#125; 方式二使用 Class 撰寫一個 Text 與 Value 的類別，類似網頁下拉選單的選項1234567891011/// &lt;summary&gt;/// comboBox Items/// &lt;/summary&gt;public class ComboData &#123; public ComboData(string text, string value) &#123; Display = text; Value = value; &#125; public string Display &#123; get; set; &#125; public string Value &#123; get; set; &#125;&#125; 接著初始化的時候，把選項塞進去1234567891011private void gvInit() &#123; gvGender.Items.Clear(); // 方式二 gvGender.Items.Add(new ComboData("Male", "1")); gvGender.Items.Add(new ComboData("Female", "0")); gvGender.Items.Add(new ComboData("test", "2")); gvGender.DisplayMember = "Display"; gvGender.ValueMember = "Value"; gvSample.DataSource = dt;&#125; cbGender.SelectedValue 就是類別中的 Value， cbGender.Text 就會是 Display，所以注意一下新增動作的時候，要變更為12345678private void button1_Click(object sender, EventArgs e) &#123; DataRow dr = dt.NewRow(); dr["Name"] = txtName.Text.Trim(); dr["Gender"] = cbGender.SelectedValue; dr["Married"] = ckMarried.Checked ? 1 : 0; dr["Birthday"] = dtpBirthday.Value; dt.Rows.Add(dr);&#125; 畫面呈現與前篇相同，主要在程式碼的操作不同 範例程式Github 上的 Sample Code 參考資料 MSDN:DataGridViewComboBoxColumn]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>WinForm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DataGridView 在 Winform 的簡單操作(3)]]></title>
    <url>%2F2015%2F12%2F17%2FDataGridView-in-winform-3%2F</url>
    <content type="text"><![CDATA[前言接續前篇 正文前篇文章已經完成新增與刪除的動作了，但是怎麼沒有修改呢？，其實 DataGridView 預設是啟用的，而且是針對每個 Cell，可以簡單想成 Excel 的樣式，都是儲存格，然後只要雙擊滑鼠左鍵就可以編輯；所以這樣的話，簡單的 CRUD(Create Read Update Delete) 就完成了，今天這篇就來把 DataGridView 呈現的資料上，變換為下拉選單等等。 添加 DataGridViewComboBoxColumn在DataGridView設定 Gender 欄位，把一列的 ColumnType 設定為DataGridViewComboBoxColumn，因為這是一個 ComboBox 所以需要設定 Items 在此輸入下拉選單要顯示的文字如下圖顯示。 添加 DataGridViewCheckBoxColumn將 Married 欄位同 DataGridViewComboBoxColumn 設定一樣，將 ColumnType 設定為DataGridViewCheckBoxColumn，接著設定以下屬性： TrueValue:對應已核取的值 FalseValue:對應未核取的值 IndeterminateValue:該儲存格值對應不到或 null 時，要給予的值 畫面呈現添加好，直接執行就完成了 範例程式Github 上的 Sample Code 參考資料 MSDN:IndeterminateValue]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>WinForm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DataGridView 在 Winform 的簡單操作(2)]]></title>
    <url>%2F2015%2F12%2F16%2FDataGridView-in-winform-2%2F</url>
    <content type="text"><![CDATA[前言接續前篇 正文上一篇進行到資料連結完成，介面完成，這篇開始慢慢來完善功能吧。 屬性設定在DataGridView設定欄位，把一列的ColumnType設定為DataGridViewButtonColumn，然後Text輸入想要顯示的文字，此外再將UseColumnTextForButtonValue設定為true，這樣在Text設定的文字才會顯示，如下圖顯示。接著選擇DataGridView，將AllowUserToAddRows設定為False，新增統一由按鍵新增就好。 刪除功能完成屬性設定後，在設計(Design)畫面選擇DataGridView，然後在屬性(Properties)視窗中切換頁籤到事件(Events)，然後在CellContentClick新增事件， 123456private void gvSample_CellContentClick(object sender, DataGridViewCellEventArgs e) &#123; // 指定第 0 列，刪除按鈕的所在列 if (e.ColumnIndex == 0) &#123; (sender as DataGridView).Rows.RemoveAt(e.RowIndex); &#125;&#125; 新增功能把設計畫面上的新增按鈕增加點擊事件 12345678private void button1_Click(object sender, EventArgs e) &#123; DataRow dr = dt.NewRow(); dr["Name"] = txtName.Text.Trim(); dr["Gender"] = cbGender.SelectedItem; dr["Married"] = ckMarried.Checked ? 1 : 0; dr["Birthday"] = dtpBirthday.Value; dt.Rows.Add(dr);&#125; 畫面的呈現 sample 的 github 參考資料 MSDN:UseColumnTextForButtonValue]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>WinForm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DataGridView 在 Winform 的簡單操作(1)]]></title>
    <url>%2F2015%2F12%2F15%2FDataGridView-in-winform-1%2F</url>
    <content type="text"><![CDATA[前言有一位朋友最近接了一個 Case，這 Case 後來變成 WinForm 的系統，他對於 winform 不熟悉，跑來找我一起討論，我發覺我也很久沒碰了XD，覺得順便整理一下好了。 正文我準備把DataGridView的操作當成一個系列來介紹；我會把範例程式丟到Github上，然後此系列應該都是同一個Repo，請大家觀看的時候配合 commit comment 。 範例資料此處採用DataTable(因為朋友那邊是用DataTable，所以就不使用 Object 了)，關於資料處理的部分就不贅述了 要載入的資料12345678910111213141516private DataTable sampleData() &#123; using (DataTable table = new DataTable()) &#123; // Add columns. table.Columns.Add("Name", typeof(string)); table.Columns.Add("Gender", typeof(string)); table.Columns.Add("Married ", typeof(int)); table.Columns.Add("Birthday", typeof(DateTime)); // Add rows. table.Rows.Add("Allen", "Male", 0, DateTime.Now); table.Rows.Add("Kevin", "Male", 1, DateTime.Now); table.Rows.Add("Dean", "Male", 0, DateTime.Today); table.Rows.Add("Jenny", "Female", 1, DateTime.Today); return table; &#125; &#125; 畫面設計視窗畫面的部分，如下圖設計，有些功能這次還不會描述到，但是可以先設計。 欄位屬性設定比較需要注意的是DataGridView的Columns設定(此處不自行撰寫程式碼，而依靠編輯器的 code generator)；需要在DataGridView的屬性視窗，點擊Columns這個屬性設定，之後就可以設定DataGridView顯示的欄位，另外需要設定DataPropertyName這屬性，這屬性跟等下需要綁定的DataTable欄位名稱相同，這樣才可以對應綁定。 資料綁定這部分的程式碼很簡易，直接將DataGridView的DataSource屬性指定為範例資料就好 1234public Form1() &#123; InitializeComponent(); gvSample.DataSource = sampleData(); &#125; 呈現樣式會這樣附上 sample 的 github 參考資料 MSDN:DataGridView 控制項 MSDN:DataGridView 類別 MSDN:DataPropertyName]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>WinForm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript 函式的 Hoisting]]></title>
    <url>%2F2015%2F12%2F11%2Ffunction-hoisting-in-javascript%2F</url>
    <content type="text"><![CDATA[前言在看JavaScript 設計模式這本書的時候，覺得這邊整理得很好，想要筆記一下。 函式的 HoistingJavaScript 在函式(function)有兩個重要特色 函式是個物件 函式提供一個作用域 而 Hoisting 特色就是函式(function)跟變數一樣，也有 Hoisting 的特性，就是所有宣告的動作皆會提升至該作用域的頂端，而函式(function)比較需要注意的是，函示宣告式(如下所示)也是有這特性的函示宣告式 1function foo() &#123;&#125; 另外比較需要注意的是，使用表示式的函式表示式1var foo = function () &#123;&#125;; 使用表示式其 Hoisting 的只有該變數，跟變數相同，函式(function)尚未定義，如以下範例12345678910111213141516171819(function ()&#123; // foo is function console.log('foo is ' + typeof foo); // bar is undefined console.log('bar is '+ typeof bar); foo(); // foo // Uncaught TypeError: bar is not a function(…) bar(); function foo()&#123; console.log('foo'); &#125; var bar = function()&#123; console.log('bar'); &#125;&#125;()); 參考資料JavaScript 設計模式]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Eclipse 無法啟動，出現 Java Was Started but Returned Exit Code=13]]></title>
    <url>%2F2015%2F12%2F09%2Feclipse-can-t-open%2F</url>
    <content type="text"><![CDATA[前言今天在增加一個系統功能的時候，需要去修改一個 Model 的 Java project… 問題因為需要更改那個 Java project，所以直接開啟 eclipse，但是居然沒辦法啟動，發生如下圖的情形求助了 Google 大神，找到有可能出現這情形的因素有 問題原因 最常見的原因是安裝 Eclipse 的版本或者 Java JDK 的版本不合 在 eclipse.ini 文件配置錯誤 Eclipse 安裝目錄有特殊字元(例如：#、！、@） 使用太新版本的 Eclipse 導致 JVM 不支援 解決方法不過我的情形，只有可能是前兩種，所以按照步驟 檢查一下 java version，可透過指令碼查詢 1234$ java -versionjava version "1.8.0_65"Java(TM) SE Runtime Environment (build 1.8.0_65-b17)Java HotSpot(TM) Client VM (build 25.65-b01, mixed mode) JDK 版本都有對應(沒對應的就要下載對應的版本)，此步驟我就可以跳過 修改 eclipse.ini 配置文件使用記事本直接開啟文件，添加上一行12-vmC:/Program Files/你自己的路徑/bin/javaw.exe 順利解決。 參考資料 eclipse wiki A Shout:Fix Java was Started but Returned Exit Code=13 in Eclipse]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>Troubleshooting</tag>
        <tag>Eclipse</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Blog 改用 Hexo]]></title>
    <url>%2F2015%2F11%2F27%2FBlog-use-Hexo%2F</url>
    <content type="text"><![CDATA[前言其實使用了Octopress一陣子，就感覺在產生靜態檔案有點慢，也不曉得是不是在 windows 上的關係，加上之前就有在考慮是否使用Hexo了，就決定轉換使用[Heox]+Github。 安裝要安裝Hexo，首先必須要安裝Node.js與Git，不太清楚的部分可以觀看官方的文件，這兩者都安裝完畢再執行以下命令hexolink123456789# 安裝 hexo command line interfacenpm install hexo-cli -g## hexo 初始化並建立資料夾 blog(這名稱請自由更換)hexo init blog# 進入 blog 資料夾，並安裝 npm 套件cd blognpm install# 啟動 hexo 伺服器，在本機端檢查網站(預設為:http://localhost:4000)hexo server 這樣就算安裝完成了。 資料轉移我原本是使用Octopress，現在要轉到Hexo上，需要將 Octopress 安裝資料夾的source/_posts這內中的檔案，全部複製一份到Hexo的安裝資料夾下source/_posts的位置，其他方式的移轉可以參考官方文件。 佈署Hexo 的佈署需要另外安裝 npm 的套件 佈署類型 套件安裝名稱 Git hexo-deployer-git Heroku hexo-deployer-heroku Rsync hexo-deployer-rsync OpenShift hexo-deployer-openshift FTPSync hexo-deployer-ftpsync 我是使用 git，所以使用以下指令進行安裝1npm install 套件安裝名稱 --save 附上我的package.json12345678910111213141516171819202122&#123; &quot;name&quot;: &quot;hexo-site&quot;, &quot;version&quot;: &quot;0.0.0&quot;, &quot;private&quot;: true, &quot;hexo&quot;: &#123; &quot;version&quot;: &quot;3.1.1&quot; &#125;, &quot;dependencies&quot;: &#123; &quot;hexo&quot;: &quot;^3.1.0&quot;, &quot;hexo-deployer-git&quot;: &quot;0.0.4&quot;, &quot;hexo-generator-archive&quot;: &quot;^0.1.2&quot;, &quot;hexo-generator-category&quot;: &quot;^0.1.2&quot;, &quot;hexo-generator-feed&quot;: &quot;1.0.3&quot;, &quot;hexo-generator-index&quot;: &quot;^0.1.2&quot;, &quot;hexo-generator-sitemap&quot;: &quot;1.0.1&quot;, &quot;hexo-generator-tag&quot;: &quot;^0.1.1&quot;, &quot;hexo-renderer-ejs&quot;: &quot;^0.1.0&quot;, &quot;hexo-renderer-marked&quot;: &quot;^0.2.4&quot;, &quot;hexo-renderer-stylus&quot;: &quot;^0.3.0&quot;, &quot;hexo-server&quot;: &quot;^0.1.2&quot; &#125;&#125; 接著在 Hexo 目錄的_config.yml進行設定(不是 themes 裡面的_config.yml)，找到 deploy 這行，進行如下設定，repo 更改為自己的位址，message 可以自己自定一下。佈署link12345deploy: type: git ##部署類型 其他類型自行google之 repo: git@github.com:shunnien/shunnien.github.io.git ##git位址 branch: ##git 頁面分支 message: Site updated at &#123;&#123; now("YYYY-MM-DD HH:mm:ss") &#125;&#125; ##git message建議默認字段update 可以自定義 這樣設定就都完成了，直接使用指令佈署到 Github 上1hexo d 最後把原始碼加入到版控上，先在 Hexo 資料夾下建立新分支(hexo 安裝的資料夾下) 123456789101112# 建立 git repogit init# 加入 Github 位址git remote add origin 你的Github位址# 建立沒有 parent 的分支git checkout --orphan 新分支名稱# 加入檔案git add .# 寫入註解git commit -m "chang to hexo"# 將檔案推送到 github 上git push orgin 新分支名稱 參考資料 Hexo]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DbEntityValidationException 取得詳細錯誤訊息]]></title>
    <url>%2F2015%2F11%2F26%2Ftrouble-shooting-DbEntityValidation%2F</url>
    <content type="text"><![CDATA[前言EF(EntityFramework) 的錯誤訊息通常都要在往下挖才會找到想要找尋的實際錯誤資訊，沒想到現在6.0以上版本有這DbEntityValidationException類別，好好記錄一下。 問題&amp;處理通常我們碰到 EF 的問題時都會以下這樣的情形，真的是很難處理要處理這些問題，要嘛就是多處理幾次，就會知道問題點在哪裡，不然就是裝些輔助工具把 EF 的訊息拉出來查看，現在有這個DbEntityValidationException類別可以快速取出想要得知的訊息。使用方式直接替換Exception就好，例如：1234567891011121314try&#123; var objectContext = ((IObjectContextAdapter)this).ObjectContext; if (EntitiesHelper.EntitiesSetting.SetSystemFieldsEnabled) &#123; SystemFieldsHelper.SetSystemFields(objectContext); &#125;return base.SaveChanges();&#125;catch (DbEntityValidationException ex)&#123; throw ex;&#125; 但是這樣的方式，請看以下圖片，還是要往下層撈取所以，可以稍微變動一下，讓訊息出來的更明顯，詳細的步驟可以參考E.K 開發紀事或是搞搞就懂stackoverflowlink1234567891011121314151617181920212223242526public partial class SomethingSomethingEntities&#123; public override int SaveChanges() &#123; try &#123; return base.SaveChanges(); &#125; catch (DbEntityValidationException ex) &#123; // Retrieve the error messages as a list of strings. var errorMessages = ex.EntityValidationErrors .SelectMany(x =&gt; x.ValidationErrors) .Select(x =&gt; x.ErrorMessage); // Join the list to a single string. var fullErrorMessage = string.Join("; ", errorMessages); // Combine the original exception message with the new one. var exceptionMessage = string.Concat(ex.Message, " The validation errors are: ", fullErrorMessage); // Throw a new DbEntityValidationException with the improved exception message. throw new DbEntityValidationException(exceptionMessage, ex.EntityValidationErrors); &#125; &#125;&#125; 參考資料 MSDN:DbEntityValidationException 搞搞就懂:查看DbEntityValidationException發生原因 E.K 開發紀事:Entity Framework出現Validation failed… stackoverflow:DbEntityValidationException]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>EntityFramework</tag>
        <tag>Troubleshooting</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Googel Custom Search Engine]]></title>
    <url>%2F2015%2F11%2F25%2FGoogel-Custom-Search-Engine%2F</url>
    <content type="text"><![CDATA[緣起在調整部落格的搜尋功能，考慮自架服務、微搜索、百度與 Google，後來決定使用 Google；但是使用 Google 只要設定好參數，一樣可以進行站內搜尋呀，就像以下的方式，在 Google 搜尋框打下，或是使用進階搜尋就可以看到1sql site:shunnien.github.io 那為什麼要特地使用 CSE，簡單說就是偷懶而已。 Google Custom Search Engine(cse)首先想使用cse的話，需要一個Google 帳號，假如已經有帳號了，就照著以下步驟設定即可建立很快速簡單，接著在畫面中選取取得程式碼，把這段程式碼嵌入部落格即可。 參考資料 Google Develpers:Creating a CSE]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>Google</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SQLParameter名稱為啥不會對應]]></title>
    <url>%2F2015%2F11%2F23%2FSQLParameter%2F</url>
    <content type="text"><![CDATA[緣起承接上篇，在撰寫呼叫 Database Mail 的Stored Procedure(預存程序)時，發現在使用Parameter上有些小地方需要注意；以前使用沒發現，因為呼叫Stored Procedure時使用的參數不多，所以都沒發現，這次記錄一下。 我的環境123456789$ systeminfo作業系統名稱: Microsoft Windows 10 專業版作業系統版本: 10.0.10240 N/A 組建 10240作業系統設定: 獨立工作站作業系統組建類型: Multiprocessor Free系統類型: x64-based PC處理器: 已安裝 1 處理器。BIOS 版本: American Megatrends Inc. 219, 2015/5/4實體記憶體總計: 16,264 MB Visual Studio VersionVisual Studio 2015 C# Version1234c:\Windows\Microsoft.NET\Framework\v4.0.30319$ cscMicrosoft (R) Visual C# Compiler version 4.6.0079.0for C# 5 使用方式先介紹 SqlParameter 的三種使用方式，這三種方式都大同小異，至於為什麼要使用，可以看一下余小章大大的說明 第一種指定參數名稱、格式與值 1234567891011121314using (SqlConnection conn = new SqlConnection(connStr))&#123; conn.Open(); using (SqlCommand cmd = new SqlCommand(str, conn)) &#123; cmd.CommandType = CommandType.StoredProcedure; cmd.Parameters.Add("@profile_name", SqlDbType.VarChar).Value = "SendMail"; cmd.Parameters.Add("@recipients", SqlDbType.VarChar).Value = "test@test.com"; cmd.Parameters.Add("@subject", SqlDbType.VarChar).Value = "ADO method 1 test"; cmd.Parameters.Add("@body", SqlDbType.VarChar).Value = "Hello World"; cmd.Parameters.Add("@importance", SqlDbType.VarChar).Value = "NORMAL"; result = cmd.ExecuteNonQuery(); &#125;&#125; 第二種指定參數名稱與值 1234567891011121314using (SqlConnection conn = new SqlConnection(connStr))&#123; conn.Open(); using (SqlCommand cmd = new SqlCommand(str, conn)) &#123; cmd.CommandType = CommandType.StoredProcedure; cmd.Parameters.Add(new SqlParameter("@profile_name", "SendMail")); cmd.Parameters.Add(new SqlParameter("@recipients", "test@test.com;test@test.com")); cmd.Parameters.Add(new SqlParameter("@subject", "ADO method 2 test")); cmd.Parameters.Add(new SqlParameter("@body", @"Hello World")); cmd.Parameters.Add(new SqlParameter("@importance", "NORMAL")); result = cmd.ExecuteNonQuery(); &#125;&#125; 第三種一樣指定參數名稱與值 1234567891011121314using (SqlConnection conn = new SqlConnection(connStr))&#123; conn.Open(); using (SqlCommand cmd = new SqlCommand(str, conn)) &#123; cmd.CommandType = CommandType.StoredProcedure; cmd.Parameters.AddWithValue("@profile_name", "SendMail"); cmd.Parameters.AddWithValue("@recipients", "test@test.com;test@test.com;test@test.com"); cmd.Parameters.AddWithValue("@subject", "ADO method 3 test"); cmd.Parameters.AddWithValue("@body", @"Hello World"); cmd.Parameters.AddWithValue("@importance", "NORMAL"); result = cmd.ExecuteNonQuery(); &#125;&#125; 上述的方法看起來都是正常的，但是如果沒有設定1cmd.CommandType = CommandType.StoredProcedure; 就會失去按照參數名稱對應的功能，只能按照順序對應(這順序是 Procedure 的參數宣告順序)；這情形出現在Stored Procedure上，也是因為Database Mail送信的參數很多，才發覺有這情形。 以下列出不使用CommandType的 Sql 字串123456789101112131415161718192021static void Main(string[] args)&#123; // 不使用 CommandType 的時候，呼叫 Procedure 必須指定參數名稱 // 跟直接使用 Sql 字串查詢一樣 string str = &quot;msdb.dbo.sp_send_dbmail @profile_name,@recipients,@subject,@body,@importance&quot;; string connStr = ConfigurationManager.ConnectionStrings[&quot;DBConn&quot;].ConnectionString; using (SqlConnection conn = new SqlConnection(connStr)) &#123; conn.Open(); using (SqlCommand cmd = new SqlCommand(str, conn)) &#123; cmd.Parameters.Add(new SqlParameter(&quot;@profile_name&quot;, &quot;SendMail&quot;)); cmd.Parameters.Add(new SqlParameter(&quot;@recipients&quot;, &quot;test@test.com;test@test.com&quot;)); cmd.Parameters.Add(new SqlParameter(&quot;@subject&quot;, &quot;ADO method 2 test&quot;)); cmd.Parameters.Add(new SqlParameter(&quot;@body&quot;, @&quot;Hello World&quot;)); cmd.Parameters.Add(new SqlParameter(&quot;@importance&quot;, &quot;NORMAL&quot;)); cmd.ExecuteNonQuery(); &#125; &#125; Console.ReadKey();&#125; 其結果會是對照一下 Procedure 的參數順序所以如果不指定CommandType的話，Sql 字串的參數必須按照 Procedure 的參數順序輸入，這點一定要注意。 範例程式Github Repo 參考資料 MSDN:Execute a Stored Procedure that Returns a Single Value]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>EntityFramework</tag>
        <tag>ADO.NET</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Sending DataBase Mail in Sql Server]]></title>
    <url>%2F2015%2F11%2F21%2FSending-DataBase-Mail-in-Sql-Server%2F</url>
    <content type="text"><![CDATA[緣起剛好有個需要發送郵件的需求，而且不是對外服務的需求，就拿資料庫來發送了。 我的環境中文版12345678910111213141516171819202122232425262728293031$ systeminfo | findstr /B /C:"作業系統名稱" /C:"作業系統版本" /c:"作業系統設定" /c:"作業系統組建類型" /c:"系統類型" /c:"處理器" /c:"BIOS" /c:"實體記憶體總計" /c:"虛擬記憶體"作業系統名稱: Microsoft Windows 10 專業版作業系統版本: 10.0.10240 N/A 組建 10240作業系統設定: 獨立工作站作業系統組建類型: Multiprocessor Free系統類型: x64-based PC處理器: 已安裝 1 處理器。BIOS 版本: American Megatrends Inc. 219, 2015/5/4實體記憶體總計: 16,264 MB虛擬記憶體: 大小上限: 18,696 MB虛擬記憶體: 可用: 8,883 MB虛擬記憶體: 使用中: 9,813 MB$ sqlcmd -Q "SELECT @@VERSION"------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------Microsoft SQL Server 2012 - 11.0.5343.0 (X64) May 4 2015 19:11:32 Copyright (c) Microsoft Corporation Enterprise Edition (64-bit) on Windows NT 6.3 &lt;X64&gt; (Build 10240: ) (Hypervisor)c:\Windows\Microsoft.NET\Framework\v4.0.30319$ cscMicrosoft (R) Visual C# Compiler version 4.6.0079.0for C# 5Copyright (C) Microsoft Corporation. All rights reserved.This compiler is provided as part of the Microsoft (R) .NET Framework, but only supports language versions up to C# 5, which is no longer the latest version. For compilers that support newer versions of the C# programming language, see http://go.microsoft.com/fwlink/?LinkID=533240 英文版123456789101112131415161718192021222324252627282930systeminfo | findstr /b /c:"OS Name" /c:"OS Version" /c:"OS Manufacturer" /c:"OS Configuration" /c:"OS Build Type" /c:"System Model" /c:"System Type" /c:"Processor" /c:"BIOS" /c:"Total Physical Memory" /c:"Virtual Memory"OS Name: Microsoft Windows Server 2012 R2 StandardOS Version: 6.3.9600 N/A Build 9600OS Manufacturer: Microsoft CorporationOS Configuration: Member ServerOS Build Type: Multiprocessor FreeSystem Model: VMware Virtual PlatformSystem Type: x64-based PCProcessor(s): 2 Processor(s) Installed.BIOS Version: Phoenix Technologies LTD 6.00, 4/14/2014Total Physical Memory: 4,096 MBVirtual Memory: Max Size: 4,800 MBVirtual Memory: Available: 2,497 MBVirtual Memory: In Use: 2,303 MBC:\&gt;sqlcmd -Q "SELECT @@VERSION"------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------Microsoft SQL Server 2012 - 11.0.5058.0 (X64) May 14 2014 18:34:29 Copyright (c) Microsoft Corporation Enterprise Edition (64-bit) on Windows NT 6.3 &lt;X64&gt; (Build 9600: ) (Hypervisor)(1 rows affected) Sql Server Database Mail設定方式有兩種，一種是透過 T-SQL，另一種是透過 GUI 介面設定(只需要滑鼠操作就可以完成) Transact-SQL Database Mail 組態精靈 Transact-SQL- 啟用 Database Mail首先檢查是否已經啟用 Database Mail，沒有啟用的話，啟用它。123456789101112131415161718192021-- 啟用 Database Mail 必須在 master 系統資料庫下Use masterGOsp_CONFIGURE 'show advanced', 1GORECONFIGUREGOsp_CONFIGURE 'Database Mail XPs', 1GORECONFIGUREGO-- 檢查是否啟用成功SELECT name, value, descriptionFROM sys.configurationsWHERE name = 'Database Mail XPs' - 建立 Database Mail 帳戶1234567891011121314151617181920212223242526272829-- 檢查是否有 Demo 這個帳戶，有的話就刪除 IF EXISTS (SELECT name FROM msdb.dbo.sysmail_account WHERE name='Demo')BEGIN EXEC msdb.dbo.sysmail_delete_account_sp @account_name = 'Demo' ;ENDEXECUTE msdb.dbo.sysmail_add_account_sp@account_name = 'Demo', -- Database Mail 帳戶名稱@email_address = 'wiamyu@gmail.com', -- 電子郵件位址(寄件者Email)@display_name = 'ShunNien', -- 顯示的名稱@replyto_address = Null, -- 回應的傳送地址@description = 'Database Mail Account', -- 帳戶的描述-- SMTP 郵件伺服器的名稱或 IP 位址-- 127.0.0.1 是本機端位址，配合 smtp4dev@mailserver_name = '127.0.0.1' ,@mailserver_type = 'SMTP' , -- 郵件伺服器的類型@port = 25 , -- 郵件伺服器的通訊埠編號。預設值是 25@username = Null, -- 登入電子郵件伺服器的使用者名稱@password = Null, -- 登入電子郵件伺服器的密碼-- 參數 0 會使用 @username、@password 這兩個參數-- 參數 1 會使用 資料庫的驗證，預設是參數 0@use_default_credentials=0,@enable_ssl=0 -- 是否使用SSL(安全通訊端層加密通訊)。預設值是 0 -- 列出 Database Mail 帳戶資訊(密碼不會顯示)EXEC msdb.dbo.sysmail_help_account_spGO - 建立 Database Mail Profile1234567891011121314-- 檢查是否存在 SendMail 這名稱的設定檔，有的話則刪除IF EXISTS (SELECT name FROM msdb.dbo.sysmail_profile WHERE name='SendMail')BEGIN EXEC msdb.dbo.sysmail_delete_profile_sp @profile_name = N'SendMail';END-- 建立新的 Database Mail 設定檔EXEC msdb.dbo.sysmail_add_profile_sp @profile_name = 'SendMail', -- 新設定檔的名稱 @description = '' ; -- 新設定檔的性描述GO -- 列出郵件設定檔的資訊。EXEC msdb.dbo.sysmail_help_profile_sp;GO - 把帳戶加入到設定檔1234567891011121314151617EXEC msdb.dbo.sysmail_add_profileaccount_sp @profile_name = N'SendMail', -- 設定檔名稱 @account_name = N'Demo', -- 帳戶名稱 -- 帳戶在設定檔內的序號。沒有預設值。序號決定了帳戶在設定檔中的使用順序。 @sequence_number =1 ;GO-- 列出 Database Mail 設定檔相關聯的帳戶EXEC msdb.dbo.sysmail_help_profileaccount_spGO-- 補充資料 -- 若是要從 Database Mail 設定檔中移除帳戶。EXEC msdb.dbo.sysmail_delete_profileaccount_sp @profile_name = N'SendMail', @account_name = N'Demo';GO - 設定使用 Database Mail 設定檔的權限此篇在德瑞克大大的文章說明得很詳細123456789101112131415161718192021/*主要參數說明： (1) @principal_name：這是關聯的 msdb 資料庫中，資料庫使用者或角色的名稱。 principal_name 是 sysname，預設值是 NULL。 您必須指定 principal_id 或 principal_name 其中之一。 如果 principal_name 是 'public'，這個設定檔會成為公用設定檔，會將存取權授與資料庫中的所有主體。 (2) @is_default指定這個設定檔是否為主體的預設設定檔。 主體只能有一個預設設定檔。*/EXEC msdb.dbo.sysmail_add_principalprofile_sp @profile_name = N'SendMail', @principal_name = 'public', -- 設定為：公用設定檔 @is_default = 1 ;GO-- 列出 Database Mail 設定檔和資料庫主體間之關聯的相關資訊。EXEC msdb.dbo.sysmail_help_principalprofile_sp ;GO - 測試發送到這邊設定就完成了，可以檢查一下設定檔1234-- 查看 Database Mail 帳戶SELECT * FROM msdb.dbo.sysmail_account-- 查看設定檔SELECT * FROM msdb.dbo.sysmail_profile 接著進行發送 mail 測試，配合smtp4dev，就可以在本機端接收 mail 了，設定可以參考 demo 大的這篇 12345EXEC msdb.dbo.sp_send_dbmail @profile_name='SendMail', @recipients='test@gmail.com', @subject= N'這是郵件主旨', @body=N'這是郵件內容' - 測試發送查看發送的狀況123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051-- 查看：Database Mail 處理的所有訊息SELECT * FROM msdb.dbo.sysmail_allitemsGO -- 查看：傳送成功的訊息時SELECT * FROM msdb.dbo.sysmail_sentitemsGO -- 查看：哪些訊息未成功傳送SELECT * FROM msdb.dbo.sysmail_faileditemsGO -- 查看：未傳送或正在重試狀態的 Database Mail 訊息SELECT * FROM msdb.dbo.sysmail_faileditemsGO -- 查看：Database Mail 系統傳回的錯誤訊息之類SELECT * FROM msdb.dbo.sysmail_event_logGO -- 查看：Database Mail 附加檔案的相關資訊SELECT * FROM msdb.dbo.sysmail_mailattachmentsGO-- 發送郵件的狀態SELECT last_mod_date, CASE sent_status WHEN 1 THEN 'Sent Successfully' WHEN 2 THEN 'Failed' WHEN 3 THEN 'Unsent' END sent_status, [subject], recipientsFROM msdb.dbo.sysmail_mailitemsORDER BY last_mod_date DESC-- 發送失敗的郵件與錯誤訊息SELECT profile_id, items.last_mod_date, items.[subject], l.[description] ErrorMessage, items.sent_status, recipientsFROM msdb.dbo.sysmail_faileditems AS items INNER JOIN msdb.dbo.sysmail_event_log AS l ON items.mailitem_id = l.mailitem_idORDER BY last_mod_date DESC Database Mail 組態精靈首先開啟SSMS，接著選擇管理，然後選擇Database Mail，在選項上按下滑鼠右鍵啟動精靈後，直接下一步接著輸入設定檔資訊新增 Database Mail 帳戶資料設定帳戶資訊，接著將帳戶加入到設定檔，並進行下一步勾選設定檔設定系統參數可以不用變動，直接點擊下一步直到完成設定完成後，點擊關閉這樣就設定完成了，需要注意的是，登入的帳戶權限記得開啟系統資料庫 參考資料 SQLCache:SQL Server Database Mail CODE PROJECT:Sending Email Using Stored Procedures in Sql Server StackExchange:Need to Send a formatted HTML Email via Database Mail in Sql Server 2008 R2]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>SQLServer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown 中支援高亮度顯示的程式語言]]></title>
    <url>%2F2015%2F11%2F19%2FSyntax-highlighting-in-markdown%2F</url>
    <content type="text"><![CDATA[緣起記錄一下，到底支援了那些程式語言，並把我比較常用的粗體顯示一下 Syntax Highlight Cucumber (‘*.feature’) abap (‘*.abap’) ada (‘.adb’, ‘.ads’, ‘*.ada’) ahk (‘.ahk’, ‘.ahkl’) apacheconf (‘.htaccess’, ‘apache.conf’, ‘apache2.conf’) applescript (‘*.applescript’) as (‘*.as’) as3 (‘*.as’) asy (‘*.asy’) bash (‘.sh’, ‘.ksh’, ‘.bash’, ‘.ebuild’, ‘*.eclass’) bat (‘.bat’, ‘.cmd’) befunge (‘*.befunge’) blitzmax (‘*.bmx’) boo (‘*.boo’) brainfuck (‘.bf’, ‘.b’) c (‘.c’, ‘.h’) cfm (‘.cfm’, ‘.cfml’, ‘*.cfc’) cheetah (‘.tmpl’, ‘.spt’) cl (‘.cl’, ‘.lisp’, ‘*.el’) clojure (‘.clj’, ‘.cljs’) cmake (‘*.cmake’, ‘CMakeLists.txt’) coffeescript (‘*.coffee’) console (‘*.sh-session’) control (‘control’) cpp (‘.cpp’, ‘.hpp’, ‘.c++’, ‘.h++’, ‘.cc’, ‘.hh’, ‘.cxx’, ‘.hxx’, ‘*.pde’) csharp (‘*.cs’) css (‘*.css’) cython (‘.pyx’, ‘.pxd’, ‘*.pxi’) d (‘.d’, ‘.di’) delphi (‘*.pas’) diff (‘.diff’, ‘.patch’) dpatch (‘.dpatch’, ‘.darcspatch’) duel (‘.duel’, ‘.jbst’) dylan (‘.dylan’, ‘.dyl’) erb (‘*.erb’) erl (‘*.erl-sh’) erlang (‘.erl’, ‘.hrl’) evoque (‘*.evoque’) factor (‘*.factor’) felix (‘.flx’, ‘.flxh’) fortran (‘.f’, ‘.f90’) gas (‘.s’, ‘.S’) genshi (‘*.kid’) glsl (‘.vert’, ‘.frag’, ‘*.geo’) gnuplot (‘.plot’, ‘.plt’) go (‘*.go’) groff (‘.(1234567)’, ‘.man’) haml (‘*.haml’) haskell (‘*.hs’) html (‘.html’, ‘.htm’, ‘.xhtml’, ‘.xslt’) hx (‘*.hx’) hybris (‘.hy’, ‘.hyb’) ini (‘.ini’, ‘.cfg’) io (‘*.io’) ioke (‘*.ik’) irc (‘*.weechatlog’) jade (‘*.jade’) java (‘*.java’) js (‘*.js’) jsp (‘*.jsp’) lhs (‘*.lhs’) llvm (‘*.ll’) logtalk (‘*.lgt’) lua (‘.lua’, ‘.wlua’) make (‘.mak’, ‘Makefile’, ‘makefile’, ‘Makefile.‘, ‘GNUmakefile’) mako (‘*.mao’) maql (‘*.maql’) mason (‘.mhtml’, ‘.mc’, ‘*.mi’, ‘autohandler’, ‘dhandler’) markdown (‘*.md’) modelica (‘*.mo’) modula2 (‘.def’, ‘.mod’) moocode (‘*.moo’) mupad (‘*.mu’) mxml (‘*.mxml’) myghty (‘*.myt’, ‘autodelegate’) nasm (‘.asm’, ‘.ASM’) newspeak (‘*.ns2’) objdump (‘*.objdump’) objectivec (‘*.m’) objectivej (‘*.j’) ocaml (‘.ml’, ‘.mli’, ‘.mll’, ‘.mly’) ooc (‘*.ooc’) perl (‘.pl’, ‘.pm’) php (‘.php’, ‘.php(345)’) postscript (‘.ps’, ‘.eps’) pot (‘.pot’, ‘.po’) pov (‘.pov’, ‘.inc’) prolog (‘.prolog’, ‘.pro’, ‘*.pl’) properties (‘*.properties’) protobuf (‘*.proto’) py3tb (‘*.py3tb’) pytb (‘*.pytb’) python (‘.py’, ‘.pyw’, ‘.sc’, ‘SConstruct’, ‘SConscript’, ‘.tac’) rb (‘.rb’, ‘.rbw’, ‘Rakefile’, ‘.rake’, ‘.gemspec’, ‘.rbx’, ‘.duby’) rconsole (‘*.Rout’) rebol (‘.r’, ‘.r3’) redcode (‘*.cw’) rhtml (‘*.rhtml’) rst (‘.rst’, ‘.rest’) sass (‘*.sass’) scala (‘*.scala’) scaml (‘*.scaml’) scheme (‘*.scm’) scss (‘*.scss’) smalltalk (‘*.st’) smarty (‘*.tpl’) sourceslist (‘sources.list’) splus (‘.S’, ‘.R’) sql (‘*.sql’) sqlite3 (‘*.sqlite3-console’) squidconf (‘squid.conf’) ssp (‘*.ssp’) tcl (‘*.tcl’) tcsh (‘.tcsh’, ‘.csh’) tex (‘.tex’, ‘.aux’, ‘*.toc’) text (‘*.txt’) v (‘.v’, ‘.sv’) vala (‘.vala’, ‘.vapi’) vbnet (‘.vb’, ‘.bas’) velocity (‘.vm’, ‘.fhtml’) vim (‘*.vim’, ‘.vimrc’) xml (‘.xml’, ‘.xsl’, ‘.rss’, ‘.xslt’, ‘.xsd’, ‘.wsdl’) xquery (‘.xqy’, ‘.xquery’) xslt (‘.xsl’, ‘.xslt’) yaml (‘.yaml’, ‘.yml’) 參考資料 Codebase:Syntax highlighting in markdown]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript to Json 基本觀念]]></title>
    <url>%2F2015%2F11%2F17%2Fjavascript-to-json-ji-ben-guan-nian%2F</url>
    <content type="text"><![CDATA[緣起有個朋友詢問我angular.toJson這 function為什麼不能轉換到Json，他只是把他的angularJS 更換到 1.4.7 版本。經過了解後，才知道他對於JavaScript一些觀念不是相當清楚，至於他的問題也不是angularJS的問題，是他套用的某一個對岸套件影響的，所以他才一直以為錯誤的使用方式是可行的 xd。 Angular JS 部分一開始想說會不會是更新angularJs的關係，所以就查看了一下 1.4.7 的source codetoJson12345678910111213141516171819202122/** * @ngdoc function * @name angular.toJson * @module ng * @kind function * * @description * Serializes input into a JSON-formatted string. Properties with leading $$ characters will be * stripped since angular uses this notation internally. * * @param &#123;Object|Array|Date|string|number&#125; obj Input to be serialized into JSON. * @param &#123;boolean|number&#125; [pretty=2] If set to true, the JSON output will contain newlines and whitespace. * If set to an integer, the JSON output will contain that many spaces per indentation. * @returns &#123;string|undefined&#125; JSON-ified string representing `obj`. */function toJson(obj, pretty) &#123; if (typeof obj === 'undefined') return undefined; if (!isNumber(pretty)) &#123; pretty = pretty ? 2 : null; &#125; return JSON.stringify(obj, toJsonReplacer, pretty);&#125; 結果發現這段轉換很久沒更動過了，最後一次更改還是 2014/2/15(想查看的，自己在 NG github 切換到 Blame 查看)，而且仔細看看這 function 內容，還是使用JSON.stringify這函式。 JSON.stringify再看一次JSON.stringify這函式的意義 The JSON.stringify() method converts a JavaScript value to a JSON string, optionally replacing values if a replacer function is specified, or optionally including only the specified properties if a replacer array is specified. 清楚明白的寫著可以將JavaScript值序列化成JSON 範例對比錯誤用法1234var foo = [];foo.bar = "new property";foo.baz = 3;var jsonString = JSON.stringify(foo); jsonString 會輸出 [] 正確用法1234var foo = &#123;&#125;;foo.bar = "new property";foo.baz = 3;var jsonString = JSON.stringify(foo); jsonString 會輸出 &quot;{\&quot;bar\&quot;:\&quot;new property\&quot;,\&quot;baz\&quot;:3}&quot; 說明兩個範例的差別主要在foo一個是 array，一個是 object，所以在宣告完var foo之後，以下這兩個動作12foo.bar = "new property";foo.baz = 3; 在 array 的範例中，是指定 foo 的屬性，但是該 foo 的值為 []。在 object 的例子，則是 foo 的值就是一個物件，且bar與baz都設定是該物件的屬性。而JSON.stringify是轉換值為Json，所以一個是 []，一個是屬性資料。 參考資料 MDN:json.stringify() w3schools:JavaScript JSON AngularJS:angular.toJson Github:Angular.Js Source Code]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Visual Studio 2015 the ViewBag Doesn't Exist in the Current Context]]></title>
    <url>%2F2015%2F11%2F13%2Fthe-viewbag-doesnt-exist-in-the-current-context%2F</url>
    <content type="text"><![CDATA[緣起今日在操作系統的時候，發現系統不給進行下一個操作，想說怎麼回事？就趕快來查找一下紀錄。發現原來是新接手負責的人員，資料沒有照要求輸入(這完全不限制的輸入還是照著需求調整的，真是自作孽)，所以下一環節的處理直接就濾掉了。所以後來將此環節的處理放鬆並設定預設資料與例外處理，就把這問題處理掉。但是可能一陣子沒開 Visual Studio 2015，我的 cshtml 頁面，都會出現小紅線，仔細去看，都是The ViewBag doesn’t exist in the current context 大概這樣的訊息，個人實在討厭這種紅色的訊息，所以還是想把它處理掉。 處理過程印象中，以前 VS2012(Visual Studio 2012) 好像有處理過相同的問題，這一看就是 ASP.NET MVC 的元件引用有問題，可是查看 output 居然沒訊息 orz…。好吧，開個安全模式建立一個新 MVC 專案看看是不是那專案是不是有調整，使用指令碼開啟安全模式，記得要在 VS2015(Visual Studio 2015)執行檔的路徑下執行 1devenv /safemode 開啟結果，還是有紅色訊息；只好去 StackOverflow 找一下，發現了Why does VS2015RC says…(這名稱有點長，我就省略了)。說明可以在每個.cshtml檔案引用 1@inherits System.Web.Mvc.WebViewPage&lt;dynamic&gt; 引用後，的確紅線的提醒消失了，但是要每一頁去引用，簡直是無法想像呀，所以這方法果斷放棄。仔細想一想，要是我重新把 ASP.NET MVC 元件重新安裝，應該會好吧，可是不太想進行這動作，查詢了一下，看到這篇說出解決方式是更新 MVC 元件或是修改 config，把 System.Web.Mvc 手動變更。原本我已經打算按照這方式進行了，但是後來看到這篇，抱持著我只進行這重設 userdata 的動作就好，結果我的 VS2015就好了。 1devenv.exe /resetuserdata 參考資料 StackOverflow:Why does VS2015RC says… sign me out:The name ‘ViewBag’ does not exist in the current context StackOverflow:Visual Studio 2015 Broken Razor Intellisense The ASP.NET Site:How to Upgrade an ASP.NET MVC 4 … to ASP.NET MVC 5 …]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>Asp.Net MVC</tag>
        <tag>Visual Studio</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Octopress 加入 Category(分類)]]></title>
    <url>%2F2015%2F11%2F12%2Foctopress-jia-ru-category-fen-lei%2F</url>
    <content type="text"><![CDATA[緣起部落格文章一旦變多起來，就需要進行整理，而且為了讓慣看的人能夠快速簡單的找尋，最好進行分類列表，所以經由官網上的說明套入 Category 插件。 找尋套件先搜尋一下 Octopress 對於 Category 的相關套件，發現這篇文章 Octopress Top Categories Plugin，看到該篇文章中提到有人開發了 octopress-category-list 這套件，這個套件也是作者 Fork octopress-tagcloud 調整而來的，此篇文章作者自己又 Fork 調整了一版，我就偷懶一點直接 Fork 作者自己調整的這版，這樣之後我就可以直接變動我的版本。 安裝套件這部份很簡易，請到此直接下載，或是直接 git clone 一份，等下要把檔案複製到您的 octopress 資料夾下 在剛剛下載的檔案中可以看到以下檔案 Files:. ├───plugins │ └── category_list.rb └───source ├───categories │ └── index.markdown └───_includes └───custom ├───navigation.html └───asides ├─ category_cloud.html ├─ category_list.html └─ category_cloud.html 這些檔案按照同樣的路徑放到您的 octopress 資料夾下，先把category_list.rb這檔案放到 plugins 資料夾下，這是 plugin 的核心 code。接著修改您的_config.yml，在default_asides增加套件的 html 檔案路徑與名稱，就是 category_cloud.html、category_list.html、category_cloud.html 這三個檔案，這個是設定側邊欄位的顯示。示範如下12345678default_asides: [ asides/recent_posts.html, custom/asides/top_category_list.html, custom/asides/category_cloud.html, custom/asides/category_list.html, asides/github.html, asides/googleplus.html] 接著建立頁面上方的選單 請參照上方的 Files tree，將 source 資料夾下的 categories 複製到您的 octopress/source 下，再把 navigation.html 複製到您的資料夾下，確認每個檔案都按照路徑複製就可以了。 上述的步驟太複雜的話，教大家簡單的方式：將下載的 octopress-category-list 檔案開啟後，複製 plugins 跟 source 資料夾，貼上自己的 octopress 資料夾下 執行一樣使用指令碼進行觀看1rake preview 完成的話，直接發布了1rake deploy 碎碎念其實後來在看 octostrap3，在考慮要不要使用，看起來的版面挺漂亮的，可能等以後再使用了～ 參考資料 octopress-tagcloud Time To Pull The Plug:Octopress Top Categories Plugin Neal Sheeran:Octopress Category List My code works, I don’t know why.:Add Categories List Plugin to Octopress 高見龍:幫你的 Octopress 增加文章分類 alswl octopress-category-list ctdk octopress-category-list shunnien octopress-category-list]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>Octopress</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Octopress 更換 License(footer)]]></title>
    <url>%2F2015%2F11%2F11%2Flitopress-geng-huan-license-footer%2F</url>
    <content type="text"><![CDATA[緣起現在網路上大家都很注重產權，因此應該在 footer 標示授權，而且還可以自己更動一下 footer Creative Commons首先建立自己的授權資訊，因此進入 Creative Commons 連結，點選 Licenses 的選單，出現下拉選單後，選擇 Choose a License 此頁面有提供多語言轉換，所以頁面底下可以選擇看的懂的語言。 設定完成後，按照頁面上的指示，複製這一段 code，貼到您想更動的位置就可以 Octopress footer 更動首先找到們要更動的頁面，我想要放置到 footer 位置，所以到 source/_includes/footer.html 查看一下內容 source/_includes/footer.html1include custom/footer.html 可以看出此頁面加入了 custom/footer.html 這個檔案，所以查看該檔案 custom/footer.html1234&lt;p&gt; Copyright &amp;copy; &#123;&#123; site.time | date: "%Y" &#125;&#125; - &#123;&#123; site.author &#125;&#125; - &lt;span class="credit"&gt;Powered by &lt;a href="http://octopress.org"&gt;Octopress&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; 把剛剛上述複製那段放進去，像以下這樣。 123456&lt;p&gt; &lt;a rel="license" href="http://creativecommons.org/licenses/by/4.0/"&gt;&lt;img alt="Creative Commons License" style="border-width:0" src="https://i.creativecommons.org/l/by/4.0/88x31.png" /&gt;&lt;/a&gt;&lt;br /&gt;This work is licensed under a &lt;a rel="license" href="http://creativecommons.org/licenses/by/4.0/"&gt;Creative Commons Attribution 4.0 International License&lt;/a&gt;. Copyright &amp;copy; &#123;&#123; site.time | date: "%Y" &#125;&#125; - &#123;&#123; site.author &#125;&#125; - &lt;span class="credit"&gt;Powered by &lt;a href="http://octopress.org"&gt;Octopress&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; 最後記得先rake preview觀看一下，確認沒問題再行發布，然後記得版控。 參考資料 Creative Commons 台灣創用CC計畫 Octopress]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>Octopress</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Octopress 設定 Search]]></title>
    <url>%2F2015%2F11%2F11%2Foctopress-she-ding-search%2F</url>
    <content type="text"><![CDATA[_config 設定此部分需要注意 url 與 simple_search，這兩個資料設定，url 是您自己的部落格位址，simple_search 使用預設值就可以；這些是由 Octopress 提供的預設搜尋方式，是透過 google 直接搜尋 url 這設定值的網站，再查詢這網站裡面有包含查詢關鍵字的頁面。 navigation.html除非是想要自訂更動，不然使用預設的搜尋方式的話是不需要變動的，此檔案位置在 /source/_includes/navigation.html，需要自訂的話，需要變更 form tag 的部分，如下圖圈選區域。這些動作都完成後，就可以進行rake gen_deploy了，就可以看到部落格可以搜尋了。 注意事項當完成上述動作後，發現搜尋沒有結果，有可能是 google 尚未將您的網站登錄，這是 google 有 Googlebot 會自動去搜尋網站登錄至 google 名單裡面；當然您也可以主動進行登錄，可由google webmasters 提交。提交完成後，可以在 google 搜尋進行搜尋檢查是否成功提交了，搜尋方式示範如下1site:yourUrl.github.io 參考資料 Octopress Google 網站管理員 Search Console說明:Googlebot 耘想科技網頁設計:SEO 網站優化]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>Octopress</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Octopress 加上 Github Pages 移動部落格到 Github]]></title>
    <url>%2F2015%2F11%2F05%2Foctopress-and-github-pages-move-blog-to-github%2F</url>
    <content type="text"><![CDATA[我的環境12345678910111213$ systeminfo | findstr /B /C:"作業系統名稱" /C:"作業系統版本" /c:"作業系統設定" /c:"作業系統組建類型" /c:"系統類型" /c:"處理器" /c:"BIOS" /c:"實體記憶體總計" /c:"虛擬記憶體"作業系統名稱: Microsoft Windows 10 專業版作業系統版本: 10.0.10240 N/A 組建 10240作業系統設定: 獨立工作站作業系統組建類型: Multiprocessor Free系統類型: x64-based PC處理器: 已安裝 1 處理器。BIOS 版本: American Megatrends Inc. 219, 2015/5/4實體記憶體總計: 16,264 MB虛擬記憶體: 大小上限: 18,696 MB虛擬記憶體: 可用: 10,390 MB虛擬記憶體: 使用中: 8,306 MB 安裝 Octopress下載 Octopress請先到 Github 下載或是直接使用指令碼工具，透過指令進行，以下是使用 SSH1git clone git@github.com:imathis/octopress.git 要是使用 HTTPS 可以採用以下指令1git clone https://github.com/imathis/octopress.git 安裝 Octopress首先要安裝 Octopress 要透過 ruby，所以請先安裝 ruby，之後透過指令碼工具進行，首先進入剛剛 clone 下來的資料夾位置1cd octopress 接著透過 ruby 進行安裝1rake install 這樣就安裝完成了，可以使用rake preview指令在瀏覽器內觀看，這些指令都是在命令提示字元內執行喔。按下Ctrl + C可以終止執行 建立新的 Repository沒有 Github 帳號的請先註冊喔，這邊都是預設已經擁有 Github 帳號。首先，先建立一個新的 Repository這個 Respository 的名稱必須是yourGithubName.github.io，yourGithubName 必須是您在 Github 上面的帳號名稱，然後建立此 Repository然後請不要關閉完成頁面，等下會用到新建立的 Repository SSH 位址(使用 HTTPS 位址也可以) 自己電腦中的 Octopress 發佈(Deploy)到 Github Pages繼續使用命令提示字元，必須在 octopress 資料夾下(您所 clone 的 octopress 位置)，執行以下指令1rake setup_github_pages 接著執行1rake generate 完成之後，就可以進行發佈的指令了1rake deploy 簡單說明一下，這幾個指令，按照字面應該可以猜得出來，generate 就是產生頁面，deploy 則是發佈出去，setup_github_pages 裡面包含許多設定，有興趣的可以參考 Octopress 的說明。發佈完成後，檢查一下網址 http:yourGithubName.github.io/，yourGithubName 就是你建立 Repository name 最後，記得把原始檔案進行版控，放到 source branch 吧。123git add .git commit -m "您所要輸入的備註內容"git push origin source 這樣就完成您的部落格了，接著就可以使用 markdown 語法撰寫您的文章。 部落格設定有兩個方式，一個是下指令，一個是直接更改 _config.yml 這個檔案，想經由指令進行更動的話，可以參考一下 Octopress 上面的 Configuring Octopress 使用方式，以下說明在 octopress 資料夾下更改 _config.yml 檔案的的介紹(這樣更改感覺比較快速一點 XD)。首先先到您 clone octopress 路徑下，使用 sublimeText(或是notepad、記事本等其他文本編輯器都可以)開啟，然後直接修改，修改時，記得注意每一個冒號後都要空格，不然等下執行rake generate產生檔案時會發生錯誤，所以這點要注意。接著更動後記得存檔，並執行下列12rake generaterake deploy 在執行 rake deploy時，我發生了 LF will be replaced by CRLF 這些錯誤，這是因為在 Windows 中的換行符號為 CRLF，Git 會在你提交的時候自動將 CRLF 轉換成 LF，而在 checkout 時將 LF 轉換成 CRLF所以執行 git add 時偵測到了換行符號的不同，若是不希望在 check out 的時候不要轉換為 CRLF，可以試著執行以下指令，把 git 的 aurtocrlf 取消1git config --global core.autocrlf false 發表文章此部分可以參考 Blogging Basics，語法相當簡易，一樣使用指令碼1rake new_post["title"] 這時候 Octopress 會幫您產生文章檔案，此檔案會放到 source/_posts/這路徑底下，接著您可以使用習慣的文字編輯器，編輯這些文章，編輯結束想觀看文章在部落格上的呈現時，可以使用1rake preview 上述有提到這個指令的功能，此功能就是模擬一個 web 服務，讓您可以在本機端使用瀏覽器觀看執行結果；有寫過 web 開發的應該不會陌生，這就是本機測試。確認完成編輯後，進行 generate 產生需要的設定與檔案，之後發佈12rake generaterake deploy 這兩個語法可以合併使用以下指令，就是上述兩個指令的合併使用1rake gen_deploy 差點忘了提醒，記得進行版控喔。 參考資料： 國王的耳朵是驢耳朵:安裝octopress並佈署到github pages上面 李嘉玲的技術筆記:Github Page + Octopress 生命之氢:Octopress 搭建流程 – Github Pages Octopress Github Pages Blogging Basics Configuring Octopress]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>blog</tag>
        <tag>Octopress</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[在 Windows 安裝 Ruby on Rails]]></title>
    <url>%2F2015%2F11%2F05%2Fin-windwos-install-ruby-on-rails%2F</url>
    <content type="text"><![CDATA[緣起在 Windows 平台上很久了，今年初為了裝一些套件，就安裝了 Ruby，結果今年都快過完了都沒去玩過，只是為了那些套件安裝順利就裝了 ruby，感覺很浪費呀，所以再裝 Rails 進來玩玩，順手記錄一下安裝的過程，為了記錄，我又重新安裝一次 ruby XD。 下載安裝檔案 Ruby首先到RubyInstaller下載安裝檔案，請依照下圖指示進行。到這頁面選擇符合您自己系統的版本，以下是我的安裝版本然後順便下載 DevKit，一樣選擇適合自己的版本，我是選擇 For use with Ruby 2.0 and above (x64 - 64bits only)這版本 安裝 RubyInstaller執行剛剛下載的 RubyInstaller勾選接受這 License選擇您想要安裝的路徑並勾選 Add Ruby executables to your PATH 這個選項，這樣安裝程式會自動設定環境變數，等下就可以直接在指令列上執行。然後稍微等個幾秒就可以看到安裝完成畫面接著我們開啟命令提示字元，或是Win + R輸入cmd，我以下畫面是使用 cmder，畫面看起來不太一樣，但是功能是相同的；命令提示字元開啟後，鍵入1ruby -v 查看一下 ruby 安裝的版本，應該會是如下圖顯示。如果出現不是內部或外部命令、可執行的程式或批次檔。這訊息，如下圖所示。可能是剛剛沒有勾選 Add Ruby executables to your PATH造成，您可能必須手動設定環境變數，需要進入控制台-&gt;系統-&gt;進階系統設定-&gt;進階-&gt;環境變數-&gt;系統變數-&gt;找尋 Path 路徑-&gt;編輯，把您的 ruby 安裝路徑增加進去 安裝 DevKit執行 DevKit-mingw64-64-4.7.2-20130224-1432-sfx.exe，這檔名超長，選擇您想放置的位置，建議放到C:\RubyDevKit 如果都是按照上述建議的話，到C:\RubyDevKit資料夾下(您所解壓縮的位置下)1Ctrl + shift + mouse right click 選擇開啟命令視窗 執行1dk.rb init 這指令會產生config.yml這檔案，並且會偵測您 ruby 安裝的路徑，直接寫入到config.yml檔案中 假如沒有偵測到您的安裝路徑，請手動更改config.yml這檔案，用記事本就可以開啟這檔案，按照下圖修改，請修改為您所安裝的路徑，注意路徑語法是- C:/yourRubyPath前面有個小破折號 然後執行以下命令，它會更動您 ruby 安裝路徑下的檔案或產生檔案1ruby dk.rb install 安裝 Rails接下來使用gem來安裝，所以下指令就可以安裝完成了，直接下指令安裝 rails1gem install rails --no-ri --no-rdoc 安裝完成後，測試一下，看一下 rails 版本編號1rails -v 出現表示安裝完成了。終於弄完這篇文章了，明明裝的時候很快，弄成文章花了不少時間。 My Environment OS:Win 10 Reference RubyInstaller Ruby Programming Language]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>ruby on rails</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[First() 跟 FirstOrDefault()]]></title>
    <url>%2F2015%2F11%2F04%2Ffirst-with-the-firstordefault%2F</url>
    <content type="text"><![CDATA[緣起前陣子有個朋友跟我詢問一段 LINQ 的 code，說輸出不是他想要的值，不過當時我去倒杯水，想說回來再看的時候，他自己搞定了 XD，雖然已經解決了，但是既然都抽出時間了，就還是看一下，看到他使用了 First() 去解決，就問他怎麼不使用FirstOrDefault，不過那段 code 還是有些需要調整的地方就是了，以下就先來看看這個問題吧(我憑印象中的 code ，可能跟當時的有點落差)。 問題123456Dictionary&lt;string, string&gt; Address = new Dictionary&lt;string, string&gt;()&#123; &#123;"zipCode","郵遞區號"&#125;, &#123;"city","縣市"&#125;&#125;;string str = Address.Where(p =&gt; p.Value == "縣市").Select(x =&gt; x.Key).ToString();Console.WriteLine(str); 上面的程式碼會輸出以下的結果，但是其目的是想要輸出為 city 1System.Linq.Enumerable+WhereSelectEnumerableIterator`2[System.Collections.Generic.KeyValuePair`2[System.String,System.String],System.String] 為什麼會輸出這個，也很簡單，LINQ 的 Select 回傳的型別是IEnumerable&lt;TResult&gt;也就是說是個物件，因此在物件後面直接使用 ToString() 就是直接輸出該物件的型別狀態 解決方法既然知道了原因，那就有了解決方法，加上個First()或是FirstOrDefault()就可以了，改正如下123456Dictionary&lt;string, string&gt; Address = new Dictionary&lt;string, string&gt;()&#123; &#123;"zipCode","郵遞區號"&#125;, &#123;"city","縣市"&#125;&#125;;string str = Address.Where(p =&gt; p.Value == "縣市").Select(x =&gt; x.Key).First().ToString();Console.WriteLine(str); First 與 FirstOrDefault就是看到朋友是使用First解決，才想把First跟FirstOrDefault一起列出來，不過上面的 code 是示意而已，不要太介意為啥這樣寫。現在先來說明，First 跟 FirstOrDefault 差別在哪裡，其實兩者相差的點很簡單，使用Enumerable.First找不到資料的時候會出錯，而使用Enumerable.FirstOrDefault 找不到資料會給予預設值，使用上述的例子來示範一下Enumerable.First(會發生錯誤)12345Dictionary&lt;string, string&gt; Address = new Dictionary&lt;string, string&gt;()&#123; &#123;"city","縣市"&#125;&#125;;var queryF = Address.First(p =&gt; p.Value =="2");Console.WriteLine(queryF); Enumerable.FirstOrDefault1234567Dictionary&lt;string, string&gt; Address = new Dictionary&lt;string, string&gt;()&#123; &#123;"city","縣市"&#125;&#125;;var query = Address.FirstOrDefault(p =&gt; p.Value =="2");if(query.Equals(default(KeyValuePair&lt;string,string&gt;)))&#123; Console.WriteLine(query.Key);&#125;]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>Linq</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows 刪除資料路徑太長的檔案]]></title>
    <url>%2F2015%2F11%2F03%2Fwindows-deleted-files-data-path-is-too-long%2F</url>
    <content type="text"><![CDATA[在 windows 系統中用 npm 裝了一些 generator 後，有些路徑長得不像話，很容易就爆了，砍都砍不掉，就像下圖。當時又不想靠 7-zip 來刪除檔案，就想找有沒有便利的工具直接下指令刪除了，剛好看到這工具挺方便的 問題環境 npm version:2.11OS: win 10 問題原因一方面是 npm 的設計，另一方面是 windows 環境下的問題，windows 下路徑檔名有長度限制。對於 npm 在 windows 環境下的設定與路徑說明，可以參考保哥的文章；不是 npm 產生這問題的，也可以考慮以下解決方式，話說以前好像玩遊戲的時候搞出這種問題 &gt;&lt;。 解決方式遇到這種情形，解決方式有幾點 改檔名，把路徑改到符合長度限制 第三方工具 第一種方式的土法煉鋼，除了真的想嘗試手指運動的人，我想應該不會有人想要這樣做，除非路徑長度剛好超出限制一點點。工具的部分介紹大家兩種： 7-zip，這是圖形化介面，簡單說就是滑鼠操作一下，今天就不說這個工具，想知道怎麼操作的可以參考一下 demo 哥的文章 rimraf，以下介紹這工具 第三方工具 rimraf這工具是 npm package ，可以直接在 cmd 直接執行，符合我的需求。順便說一下，我使用 npm 預設路徑，套用 Yeoman 的 Hottowel generator，擷取一小部分其檔案結構來看，應該不會有人想要一一刪除檔案 操作方式1rimraf(f, callback)]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>npm</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Application Automatically Disabled]]></title>
    <url>%2F2015%2F11%2F02%2Fapplication-automatically-disabled%2F</url>
    <content type="text"><![CDATA[以下使用的 Server，IIS 版本為 7.5 Server：Win2008 R2 記錄一下 Server 的一些小事件，主要是因為早上突然發生了這個畫面一看就很明顯 Service 停止了，進去 Server 然後到 IIS 將 Application Pool Start 就好了；但是到底是如何自動關閉的，查看 Event Viewer 發現 IIS 有設定機制自動關閉的，訊息如下。 Rapid-Fail Protection好吧，得知了有自動關閉機制，應該可以調整設定吧，繼續到 IIS -&gt; Application Pools 如下圖 設定的意義非常簡單，就是幾分鐘內發生幾次錯誤就自動關閉，想要詳細了解的可以參閱一下 [MSDN][1] ；至於怎麼樣的警告會進行自動關閉呢？就是 IIS 發生錯誤，例如：IIS 發送 EMail 發送失敗…等等。此次就是因為信件發送的問題導致。[1]: https://msdn.microsoft.com/zh-tw/library/cc779875(v=ws.10).aspx “設定 IIS 6.0 中的快速失敗保護”]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>IIS</tag>
        <tag>Windows 2008R2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Google App for Education 申請]]></title>
    <url>%2F2015%2F10%2F29%2Fgoogle-for-education%2F</url>
    <content type="text"><![CDATA[緣由因為基金會帳號資料凌亂，所以趁此機會統一申請，管理也較為方便 Googel App提供許多服務，不過此處主要是說申請 Google Apps for Work ，這些申請可以分為 Google Apps for Work Google Apps for Education Education 申請流程－先行確認資格要申請 education 有幾個資格，必須符合 經由一般公認的認證單位評定合格的幼稚園到高中、高等教育機構或非營利組織 獲得認證的非營利組織 (必須位於目前支援的 15 個國家/地區)。 詳細的資料可以參考Google Education 常見問題，在常見問題的【哪些機構符合 Google Apps for Education 申請資格?】可以觀看詳細資訊，由於我要申請的是非營利組織(基金會之類的)，所以可以看一下獲得認證的非營利組織，接著找尋台灣機構規範要點，如下所示 機構必須已向 TechSoup Global 的區域專責單位 TechSoup Taiwan 註冊。 只有以下類型的機構符合申請資格： 以公益為目的且向相關政府機構註冊的協會和基金會 經中央政府審查及許可的全國機構 由區域縣市政府相關局處審查及許可的地方機構 註冊 TechSoup Taiwan進入 TechSoup Taiwan 後，就來準備註冊了。首先填寫帳號資訊，就填想要使用的名稱與 mail 吧。接著選擇主要服務內容，直接進行點選就可以了。然後 Organization registration 就是你所屬機構的資訊了，這邊都要使用英文輸入，英文地址的部分可以參考郵局中文地址英譯Organization registered identifiers 都是要輸入登記書資訊，字號的翻譯可以參考IQ Technology Inc.除了服務宗旨一定要輸入外，那些資訊就隨意啦最後就是填上聯絡資訊了，這邊都有提示輸入英文然後註冊後會收到來信通知這樣就註冊完成了。 註冊 Google App for Education進入 Google for Education 頁面，然後按照以下圖片快速進行下一步，這些都是提醒一些資訊而已 到這邊才是開始要輸入資訊，與確認的開始；發生什麼事!!!都是教育單位，沒有非營利單位的，沒有我要的選項，先隨便選擇一個吧，後面會說明怎麼加入。輸入你的網域，等下要去進行確認最後進行申請 加入非營利計畫完成上述申請後，但是你還是只有 30 天試用期間，需要申請加入 Gooogle 非營利計畫，這就用到了我們開始申請的 TechSoup，首先登入 TechSoup 取得認證代碼接著到此連結輸入剛剛的科技濃湯認證碼勾選一些擔保條款，確認這些規定等等。填入申請資訊這樣就算加入完成了，接下來就要進行 Google Apps for Education 的方案升級，現在你的方案應該都是 30 天試用版，要升級成為免費版本，由[Google 非營利服務]進入，還沒登入的話進行登入，登入後就可以看到以下畫面，點選立即申請接著會看到你可以申請的產品，這邊我主要申請 Google Apps 非營利版最後勾選確認資料接著 Google 會發送信件給你，如果你有設定 MX Record 的話，可以直接進 Gmail 信箱收信，會收到這封信件最後就是等待通知就可以了。 感想這次主要在網域的驗證一直有許多問題，畢竟我沒有權限去那邊進行設定，所以一直莫名其妙一堆問題，後來發現不知道誰有設定權限給我，自訂按照 Google 上的 AWS 說明，就挺順利的，這次到這邊結束了，感覺挺繁瑣的申請步驟～～～ 參考資料 Google Apps for Education Google Apps for Work Google Apps for Education：常見問題 TechSoup Taiwan 獲得認證的非營利組織 TechSoup 註冊 郵局中文地址英譯 IQ Technology Inc. 中文拼音查詢及譯音轉換系統 Google 非營利服務申請 Google 非營利服務 AWS Setting]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>Google</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CryptoJs Sample]]></title>
    <url>%2F2015%2F10%2F26%2Fcryptojs-sample%2F</url>
    <content type="text"><![CDATA[Crypto-JS我主要採用 code.google 上的資料說明為主，此 Library 支援 Hashers MD5 SHA-1 SHA-2 SHA-3 RIPEMD-160 HMAC HMAC-MD5 HMAC-SHA1 HMAC-SHA256 HMAC-SHA512 PBKDF2 Ciphers AES DES, Triple DES Rabbit RC4, RC4Drop 除了上述支持的算法之外，尚有許多功能，此篇著重在 CryptoJS 中的 AES 加解密部分，順便弄了簡單的加解密 sample 看之後有時間來慢慢將他把功能完善；好了，閒話不多說，還是趕快把此次範例中的注意事項與 code 展示吧。 以下為官方所展示的的 AES 範例123456&lt;script src="http://crypto-js.googlecode.com/svn/tags/3.1.2/build/rollups/aes.js"&gt;&lt;/script&gt;&lt;script&gt; var encrypted = CryptoJS.AES.encrypt("Message", "Secret Passphrase"); var decrypted = CryptoJS.AES.decrypt(encrypted, "Secret Passphrase");&lt;/script&gt; CryptoJS 在 The Advanced Encryption Standard (AES) 支援了 AES-128 AES-192 AES-256 另外，像這個官方範例其實預設了很多預設值，假如沒有指定 key 長度的話，預設是使用 256-bit。 比較需要注意一下解碼，解碼出來的資料預設是經過編碼轉換過的，所以你要得到你原來的資料，要在編碼轉換一次。 最後提供二個線上加解密資源，有一個其實是 Demo在线工具 - 开源中国LJavaScript Cryptographycrypto-js 的 Github]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>CryptoJS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Sql Server 取得所有欄位定義]]></title>
    <url>%2F2015%2F10%2F22%2Fsql-server-access-to-all-field-definitions%2F</url>
    <content type="text"><![CDATA[把一些以前整理的東西，紀錄一下 此部分最好在 Sql Server 2005 以上使用， Sql Server 2000 就沒使用過 123456789101112131415161718192021222324252627282930SELECTCASE a.TABLE_TYPEWHEN 'BASE TABLE' THEN '資料表'WHEN 'VIEW' THEN '檢視表'END as 表格類型 , a.TABLE_NAME as 表格名稱, b.COLUMN_NAME as 欄位名稱, b.DATA_TYPE as 資料型別, b.CHARACTER_MAXIMUM_LENGTH as 最大長度, b.COLUMN_DEFAULT as 預設值, b.IS_NULLABLE as 允許空值, ( SELECT value FROM fn_listextendedproperty (NULL, 'schema', 'dbo', 'table', a.TABLE_NAME, 'column', default) WHERE name='MS_Description' and objtype='COLUMN' and objname Collate Chinese_Taiwan_Stroke_CI_AS=b.COLUMN_NAME ) as 欄位備註FROM INFORMATION_SCHEMA.TABLES a LEFT JOIN INFORMATION_SCHEMA.COLUMNS b ON (a.TABLE_NAME=b.TABLE_NAME)--WHERE-- TABLE_TYPE='VIEW'-- TABLE_TYPE='BASE TABLE'ORDER BY a.TABLE_TYPE, a.TABLE_NAME, ordinal_position 補充使用其他 function 或是其他系統資料表的查詢語法。首先是取得資料表結構，主要是 syscolumns 系統欄位資料表查詢，不過這樣的顯示不容易觀看，所以才會有整理混合的語法。12345678910SELECT a.name ,a.Length ,b.name AS type ,'' AS valueFROM syscolumns AS aINNER JOIN dbo.systypes AS b ON a.xusertype = b.xusertype-- 指定為 View Table 欄位的查詢--WHERE id = OBJECT_ID('INFORMATION_SCHEMA.VIEW_COLUMN_USAGE') 另一種查詢方式，使用 sysobjects 1234567891011121314151617181920212223242526272829303132333435SELECT tab.name table_name ,col.colid column_id ,col.name column_name ,typ.name data_type ,col.prec PRECISION ,col.scale scale ,col.length ,com.TEXT default_value ,CASE WHEN col.isnullable = 1 THEN 'Y' ELSE 'N' END is_nullable ,CASE WHEN col.status &amp; 0X80 = 0X80 THEN 'Y' ELSE 'N' END is_identity ,(SELECT VALUE FROM Fn_listextendedproperty(NULL, 'schema', 'dbo', 'table', tab.name, 'column', col.name)) DESCRIPTIONFROM sysobjects tab ,syscolumns col LEFT OUTER JOIN syscomments com INNER JOIN sysobjects obj ON com.id = obj.id ON col.cdefault = com.id AND com.colid = 1 ,systypes typWHERE tab.id = col.idAND tab.xtype = 'U'AND col.xusertype = typ.xusertype]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>T-SQL</tag>
        <tag>SQLServer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[將多列資料合併 使用 for XML Path]]></title>
    <url>%2F2014%2F02%2F25%2Fsql-For-XML-Path%2F</url>
    <content type="text"><![CDATA[資料庫資料表中，想要將同一資料欄的資料合併顯示時，可以考慮採取 使用 for xml path 。以下進行範例說明： 首先範例資料如下： OrderID ProductID UnitPrice Quantity Discount 10248 11 14 12 0 10248 42 9.8 10 0 10248 72 34.8 5 0 想要把同個 OrderID 資料的 ProductID 和 UnitPrice 合併在一起顯示的時候，使用 for xml path1234SELECT ',' + CAST(ProductID AS VARCHAR) + '--' + CAST([Quantity] AS VARCHAR)FROM OrderDetailsFOR XML PATH ('') 其呈現結果如下,11--12,42--10,72--5 這個組合出來的字串，最前面會多出一個 comma(逗號，)，所以將多餘的分隔符號用 stuff 移除，其語法如下，或是觀看線上範例1234567891011121314select [OrderID], stuff(mergingOd.pu,1,1,'') combineStrfrom( select [OrderID], ( SELECT ',' +cast(ProductID AS VARCHAR) + '--' + Cast([UnitPrice] AS VARCHAR ) FROM OrderDetails WHERE [OrderID]=od2.[OrderID] for xml path('') ) pu from OrderDetails od2 GROUP BY [OrderID]) as mergingOd 資料呈現 OrderID combineStr 10248 11–14.00,42–9.80,72–34.80 如果不轉換字串，直接使用 For XML Path 的話，那就會轉換成 XML，而 XML 的節點名稱是可以改變的線上範例1234ELECT CAST(ProductID AS VARCHAR)FROM OrderDetailsFOR XML PATH ('pid') 資料呈現&lt;pid&gt;11&lt;/pid&gt;&lt;pid&gt;42&lt;/pid&gt;&lt;pid&gt;72&lt;/pid&gt; 參考資料 Microsof Docs STUFF Microsof Docs For XML 使用 PATH 模式 Microsof Docs FOR XML 子句的基本語法 Sqlfiddle 線上範例]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>T-SQL</tag>
        <tag>SQLServer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CTE,Cursor,Table Variable,Temporary Table,Stored Procedure]]></title>
    <url>%2F2014%2F01%2F24%2FCTE%E3%80%81Cursor%E3%80%81Table-Variable-Temporary-Table%E3%80%81Stored-Procedure%2F</url>
    <content type="text"><![CDATA[Conetent分別介紹 CTE,Cursor,Table Variable,Temporary Table,Stored Procedure 這幾項。 一般資料表運算式(Common Table Expressions)或稱通用資料表運算式；簡單來說，就是建立一個暫存資料表給予查詢使用，此次查詢使用之後，將會自動釋放。另外 CTE 是 SQLServer 2005 才開始支援 語法12345WITH expression_name [ ( column_name [,...n] ) ]AS( --CTE_query_definition ) 範例12345678910WITH tmpOrdersAS(SELECT EmployeeID ,COUNT(*) AS OrderCounts FROM Orders GROUP BY EmployeeID)SELECT *FROM tmpOrders; expression_name CTE 名稱 column_name 在一般資料表運算式中，指定資料行名稱。在單一 CTE 定義內，名稱不能重複。指定的資料行名稱數目必須符合CTE_query_definition 的結果集資料行數目。 CTE_query_definition 不能使用下列子句： COMPUTE 或 COMPUTE BY ORDER BY (除非指定了 TOP 子句) INTO 含有查詢提示的 OPTION 子句 FOR XML FOR BROWSE 遞迴 CTE其實我是覺得支援遞迴查詢這部份真的便利許多，雖然還是有些限制錨點部分為遞迴查詢的初始資料，使用 UNION ALL 和遞迴部分結合遞迴部分為需要反覆執行的部分 語法1234567WITH expression_name AS [(ColName[,...n])]( --CTE_query_definition -- 錨點部分 UNION ALL -- 遞迴部分) 使用規定可以參考 MSDN 比較需要注意的是不允許使用的項目，遞迴成員的 CTE_query_definition 不允許使用下列項目： SELECT DISTINCT GROUP BY HAVING 純量彙總 TOP LEFT、RIGHT、OUTER JOIN (允許 INNER JOIN) 子查詢 適用於 CTE_query_definition 內 CTE 之遞迴參考的提示。 若遞迴成員查詢定義，對父資料行與子資料行傳回相同的值，就會建立無限迴圈。若要防止無限迴圈，可以透過 OPTION 子句中，設定 MAXRECURSION 屬性( 0 和 32767 之間的值)，來限制遞迴層級數目。資料庫的遞迴預設值是 100。 指定 0 時，不限制遞迴層級。此外 WITH 這個關鍵字用在許多表達式中，所以若一個 CTE 表達式的第一行不是由 WITH 開始，就必須加上分號(semicolon)來斷行。 範例123456789101112131415161718192021222324252627282930313233-- 遞迴 Recursive CTE's;WITH EmpCTE (EmployeeID, EmployeeFirstName, EmployeeLastName, MgrID, SalesLevel)AS( -- 錨點部分 Anchor Member (AM) SELECT EmployeeID ,FirstName ,LastName ,ReportsTo ,0 FROM Employees WHERE EmployeeID = 5 UNION ALL -- 遞迴部分 Recursive Member (RM) SELECT e.EmployeeID ,e.FirstName ,e.LastName ,e.ReportsTo ,m.SalesLevel + 1 FROM Employees AS e INNER JOIN EmpCTE m ON e.ReportsTo = m.EmployeeID)-- 設定 MAXRECURSION 遞迴層次為 5SELECT *FROM EmpCTEOPTION (MAXRECURSION 5) 參考資料 MSDN_WITH common_table_expression.aspx) TechNet_Common Table Expressions.aspx) MSDN Magazine 黑大_Common Table Expression 介紹的蠻詳細，大力推薦 VITO の SQL 學習筆記 KingKong Bruce記事 張小呆的碎碎唸 旗標知識網 涛哥博客 Microsoft REPLICATE Microsoft OPTION Cursor詳細說明參照德瑞克大，這邊主要紀錄一下 DECLARE CURSOR 的使用。不過很多文章都說盡量避免使用 Cursor，以免造成效能損耗，詳細原因的話可以參照RiCo技術農場與德瑞克大。 範例123456789101112131415161718192021222324252627282930313233343536373839404142 -- 建立一個暫存表 等下查看CREATE Table #tmp( id int IDENTITY(1,1) NOT NULL, EpTitle nvarchar(30));-- 建立Cursor 並啟用了效能最佳化的 FORWARD_ONLY、READ_ONLY 資料指標DECLARE tmpCursor CURSOR FAST_FORWARD FOR (select EmployeeID,Title from Employees); -- 宣告 Cursor 等下使用的變數DECLARE @eid int,@title nvarchar(30); OPEN tmpCursor--開啟Cursor--將第一筆資料填入變數FETCH NEXT FROM tmpCursor INTO @eid,@title-- @@FETCH_STATUS 傳回值-- 0 FETCH 陳述式成功。-- -1 FETCH 陳述式失敗，或資料列已超出結果集。-- -2 遺漏提取的資料列。WHILE @@FETCH_STATUS = 0BEGIN -- 進行想要處理的動作 INSERT INTO #tmp (EpTitle) VALUES(@title); -- 將下一筆資料填入變數 FETCH NEXT FROM tmpCursor INTO @eid,@titleEND --關閉CursorCLOSE tmpCursor--釋放CursorDEALLOCATE tmpCursor-- 看一下剛剛處理後的結果select * from #tmp--DROP TABLE #tmp 參考資料 TechNet_CURSOR TechNet_FETCH_STATUS.aspx) TechNet_DEALLOCATE.aspx) TechNet_資料指標 MSDN_DECLARE CURSOR.aspx) MSDN_FETCH_STATUS.aspx) 德瑞克_初探Cursors(資料指標) 與資料列集(Rowsets) RiCo_盡量避免使用Cursor Table Variable 與 Temporary Table暫存表(Temporary Tables)暫存表名稱使用 # 開頭，後面接上自訂命名，當連線關閉或中斷後，此暫存表會刪除。暫存表建立後會存在於 tempdb 資料庫。建立方式如下: 1234CREATE TABLE #TableName( columnName bigint) 除了 Create 暫存表外，還可以直接使用 SELECT … INTO … 這方式建立暫存表，資料庫會自動按照資料來源 Table 的欄位建立該暫存表。 範例1SELECT * INTO #temp FROM Northwind.dbo.Employees 全域暫存表(Global Temporary Tables)暫存表名稱使用 ## 開頭，表示這是全域暫存表，可以被所有連線使用者使用。一般的暫存表僅供建立該表的連線使用。至於全域暫存表的釋放與暫存表相同，是當建立此全域暫存表的連線中斷後，才會釋放。 範例產生兩個暫存資料表 12345-- 全域暫存表 GTTSELECT * INTO ##temp FROM Northwind.dbo.Employees-- 暫存表 TTSELECT * INTO #temp FROM Northwind.dbo.Employees 在同一連線下 SELECT 資料，暫存表皆可讀取 開一個新連線，一般的暫存表僅供建立該表的連線使用 在新連線中，GTT 可以使用 表格變數(Table Variables)引用黑暗執行緒大分析的優缺點 優點 用於 Stored Procedure 時，不需要每次Recompile，速度較快 比照 Local Variable，Scope 定義明確，在不需要時就立刻會被清除 Transaction Lock 存在時間短，也不影響實體資料庫，資料的更新操作更有效率缺點 只支援 PK 及 UNIQUE KEY，不能建立 Non-Cluster Index，也沒有資料分佈統計機制，不利於大量資料或複雜的查詢。 基於 Local Variable 的限制，使用 sp_executesql 時無法存取 不支援 SELECT INTO、INSERT EXEC 結論就是，當暫存的資料筆數較小時，可使用表格變數，如果資料筆數多可使用暫存表。 參考資料 TechNet_特殊的資料表類型 黑大的KB-SQL 2000的資料庫變數(Table Variable) 亂馬客_Table-Variable in Transaction SQL SERVER – Difference TempTable and Table Variable – TempTable in Memory a Myth Yet Another Temp Tables Vs Table Variables Article 暫存表(Temporary Tables)的使用簡介 Microsoft技術支援_常見問題集-資料表變數 Temporary Tables vs. Table Variables and Their Effect on SQL Server Performance 預存程序(Stored Procedure)當遇到一些冗長的查詢語句，建議可以使用預存程序來處理，降低網路的傳輸量。預存程序資料傳回方式： 使用 SELECT 以表格方式傳回。 設定 Output Parameter 以參數方式傳回。 使用 RETURN 傳回 1 個整數型別的資料。 範例搭配此篇文章主題，展示迴圈設計的範例。首先展示 WHILE 迴圈，此方式是以資料筆數的 Count 來進行迴圈設計12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970--CREATE PROCEDURE dbo.SPRowIndexSample--AS-- 宣告 table 變數，此 @temp 資料為迴圈逐筆進行之資料DECLARE @temp TABLE( ID INT , --ROW序號 OrderID INT, Employee NVARCHAR(35));-- @OutTable 為輸出暫存表DECLARE @OutTable Table( OrderID INT, Employee NVARCHAR(35));-- 把資料塞到 @temp 變數裡面INSERT INTO @temp (ID, OrderID, Employee) (SELECT ROW_NUMBER() OVER (ORDER BY OrderID) AS ID, OrderID, e.FirstName + '-' + e.LastName AS 'Employee' FROM Orders o INNER JOIN Employees e ON o.EmployeeID = e.EmployeeID WHERE o.OrderDate &gt; '1998/5/1' )-- 宣告變數DECLARE -- @tmep 資料總筆數 @tempCount INT = ( SELECT COUNT(ID)FROM @temp)-- while 迴圈的逐筆資料 index, @rowIndex int = 1, @OrderId int, @Employee nvarchar(35);WHILE @rowIndex &lt;= @tempCountBEGIN--透過 @tempCount ID 取得欲使用的欄位值SELECT @OrderId = OrderID, @Employee = EmployeeFROM @tempWHERE ID = @rowIndex-- 想要處理的動作 Start --INSERT INTO @OutTable (OrderID, Employee) VALUES (@OrderId, @Employee)-- 想要處理的動作 End ---- 設定 while 條件，跑下一筆SET @rowIndex = @rowIndex + 1END-- 取出SELECT OrderID, EmployeeFROM @OutTable--GO 接著是使用字串分割方式進行迴圈設計，不過這方式在字串變數長度小於要進迴圈的資料長度時，很容易會因為資料截斷產生誤差。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051--CREATE PROCEDURE dbo.SPStrSplitSample--AS-- 宣告字串變數，@strID 為資料來源的 OrderID 組合字串-- @CurId 為迴圈進行的當下 OrderIDDECLARE @strOID NVARCHAR(2000), @CurOId NVARCHAR(10);SET @strOID = '';SELECT @strOID = @strOID + convert(VARCHAR, OrderID) + ','FROM OrdersWHERE OrderDate &gt; '1998/5/1';-- @OutTable 為輸出暫存表DECLARE @OutTable Table( OrderID INT, Employee NVARCHAR(35));-- 透過字串長度進行迴圈WHILE LEN(@strOID) &gt; 0BEGIN-- 擷取 OrderIDSET @CurOId = substring(@strOID, 1, charindex(',', @strOID, 1) - 1);-- 想要處理的動作 Start --INSERT INTO @OutTable (OrderID , Employee)SELECT OrderID , e.FirstName + '-' + e.LastName AS 'Employee'FROM Orders o INNER JOIN Employees e ON o.EmployeeID = e.EmployeeIDWHERE OrderID = @CurOId;-- 想要處理的動作 End ---- 剃除完成的 OrederID，讓迴圈跑下一筆SET @strOID = right(@strOID, len(@strOID) - charindex(',', @strOID, 1));END-- 取出SELECT OrderID , EmployeeFROM @OutTable--GO 最後展示接收預存程序的回傳值與回傳參數，如果預存程序使用表格方式輸出結果，那就要用表格參數或是暫存表去接收。 1234567891011121314151617181920212223242526272829 -- 接收預存程序回傳值CREATE PROCEDURE SPDemo( @Param1 int ,@Param2 varchar(100) OUTPUT -- 回傳參數設定 OUTPUT)ASIF ISNULL(@Param1,0)&gt; 5 BEGINSET @Param2 = 'the value is greather then 5 ' ENDELSE BEGINSET @Param2 = 'the value is less then or equal to 5 ' END-- 回傳值RETURN @Param1GO--==============================================-- @OutputParameter 回傳參數-- @ReturnValue 回傳值(僅能整數型別)DECLARE @OutputParameter varchar(100) ,@ReturnValue intEXEC @ReturnValue = SPDemo 8,@OutputParameter OUTPUTPRINT @ReturnValuePRINT @OutputParameter 參考資料 TechNet_Stored Procedures 事件類別目錄 walter 心得筆記_接收 Store Procedure 的傳回值 RiCo技術農場_撰寫Stored Procedure小細節 小信豬的原始部落_Stored Procedures 如意網站 SQL 教學網_預存程序 如意網站 SQL 教學網_預存程序 備註 範例皆使用 SQL SERVER 2008 R2 做為測試]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>T-SQL</tag>
        <tag>SQLServer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用 CSS 處理提示訊息框]]></title>
    <url>%2F2014%2F01%2F18%2Fcss-tooltip%2F</url>
    <content type="text"><![CDATA[一直都是使用 JavaScript 的方式來顯示提示訊息，雖然知道可以用 CSS 來控制，但是覺得很多地方沒辦法完全配合需求，不過在製作大致的示範樣板，倒是還蠻好用的。 其主要就是利用 position、display 與 hover 來達成想要的效果 123456789101112131415161718192021222324252627.dvmain &#123; position: relative; width: 65px; height: 25px;&#125;.dvmain:hover .tooltip &#123; display: inline-block;&#125;.tooltip &#123; display: none; position: absolute; bottom: 30px; left: 5px; width: 55px; height: 20px; line-height: 20px; font-size: 12px; text-align: center; color: black; background: #f7f8f8; border: 1px solid #c9caca; border-radius: 0px; text-shadow: rgba(0, 0, 0, 0.09804) 1px 1px 1px; box-shadow: rgba(0, 0, 0, 0.09804) 1px 1px 2px 0px;&#125; 以下是在 JsFiddle 的範例]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DataGridView 簡易分頁範例]]></title>
    <url>%2F2013%2F07%2F23%2FDataGridView-in-winform-pagination%2F</url>
    <content type="text"><![CDATA[前言在 WinForm 中，想將 DataGridView 進行分頁的話，就得自己處理了，不像 WebForm 的 DataGridView 有分頁設定。 介面設計首先設計介面，介面上使用的物件如下： DataGridView X 1 Button X 5 Label X 3 NumericUpDown X 1 GroupBox X 1 版面畫面如下比較需要注意的是自訂Name的對應，畫面顯示文字與 Name 對應如下 第一頁:btnFirstPage 上一頁:btnPreviousPage 第 1 頁:lbCurrentPage 下一頁:btnNextPage 最後一頁:btnLastPage 設定:btnSet 20:nudPageSize 共 頁:lbTotalPage 資料連線使用北風資料庫來作範例，在App.config添加連線字串 123&lt;connectionStrings&gt; &lt;add name="DBConnection" connectionString="Data Source=localhost ;Initial Catalog=Northwind;Persist Security Info=True;Integrated Security=SSPI;" providerName="System.Data.SqlClient"/&gt;&lt;/connectionStrings&gt; 程式碼先把每個按鈕點擊事件的程式碼自動產生，接著宣告三個整數與連線字串；此時應該會需要添加 Configuration 這個參考，加入完參考，請記得引用。 1234567private string _connecString = ConfigurationManager.ConnectionStrings["DBConnection"].ConnectionString;// 現在選取的分頁編號private int _currentPageIndex = 1;// 總共多少分頁private int _totalPage = 0;// 頁面大小private int _pageSize = 20; 接著撰寫計算頁數的方法 123456789101112/// &lt;summary&gt;/// 計算頁數/// &lt;/summary&gt;/// &lt;param name="dt"&gt;The dt.&lt;/param&gt;private void CalculateTotalPages(DataTable dt) &#123; int rowCount = dt.Rows.Count; _totalPage = rowCount / _pageSize; //不足一個分頁行數的還是算一頁 if (rowCount % _pageSize &gt; 0) _totalPage += 1;&#125; 然後利用 SQL 來取得現在的分頁資料 12345678910111213141516171819202122232425262728private DataTable GetCurrentRecords(int page)&#123; DataTable dt = new DataTable(); using (SqlConnection con = new SqlConnection(ConnecString)) &#123; SqlCommand cmd = new SqlCommand(); if (page == 1) &#123; cmd = new SqlCommand("Select TOP " + PageSize + " [OrderID],[CustomerID],[ShipVia],[Freight] FROM [Northwind].[dbo].[Orders] ORDER BY [OrderID]", con); &#125; else &#123; //利用 SQL 語法來切換資料 int PreviousPageOffSet = (page - 1) * PageSize; cmd = new SqlCommand("Select TOP " + PageSize + " [OrderID],[CustomerID],[ShipVia],[Freight] " + "FROM [Northwind].[dbo].[Orders] WHERE [OrderID] "+ "NOT IN " + "(Select TOP " + PreviousPageOffSet +" [OrderID] from [Northwind].[dbo].[Orders] ORDER BY [OrderID] ) " , con); &#125; SqlDataAdapter da = new SqlDataAdapter(cmd); da.Fill(dt); lbCurrentPage.Text = "第 " + CurrentPageIndex + " 頁"; &#125; return dt;&#125; 以上部分完成，就可以把剩下的頁面切換都完成了 1234567891011121314151617181920212223private void btnFirstPage_Click(object sender, EventArgs e) &#123; _currentPageIndex = 1; dataGridView1.DataSource = getCurrentRecords(_currentPageIndex);&#125;private void btnPreviousPage_Click(object sender, EventArgs e) &#123; if (this._currentPageIndex &gt; 1) &#123; _currentPageIndex--; dataGridView1.DataSource = getCurrentRecords(_currentPageIndex); &#125;&#125;private void btnNextPage_Click(object sender, EventArgs e) &#123; if (_currentPageIndex &lt; _totalPage) &#123; _currentPageIndex++; dataGridView1.DataSource = getCurrentRecords(_currentPageIndex); &#125;&#125;private void btnLastPage_Click(object sender, EventArgs e) &#123; _currentPageIndex = _totalPage; dataGridView1.DataSource = getCurrentRecords(_currentPageIndex);&#125; 最後的分頁設定功能部分，需要取得沒分頁的全部資料，所以在連線資料庫取得全部資料 123456789101112131415/// &lt;summary&gt;/// Gets the data./// &lt;/summary&gt;/// &lt;returns&gt;&lt;/returns&gt;private DataTable getData() &#123; using (SqlConnection con = new SqlConnection(_connecString)) &#123; con.Open(); using (SqlCommand cmd = new SqlCommand("SELECT [OrderID],[CustomerID],[ShipVia],[Freight] FROM [Northwind].[dbo].[Orders] ORDER BY [OrderID]", con)) &#123; SqlDataAdapter da = new SqlDataAdapter(cmd); DataTable dt = new DataTable(); da.Fill(dt); return dt; &#125; &#125;&#125; 接著就是設定分頁資料數功能了，這個功能就更新一下分頁列數，然後重新呼叫 Function 12345678910private void btnSet_Click(object sender, EventArgs e) &#123; if (_pageSize != Convert.ToInt32(nudPageSize.Value)) &#123; _currentPageIndex = 1; _pageSize = Convert.ToInt32(nudPageSize.Value); CalculateTotalPages(getData()); lbTotalPage.Text = "共 " + _totalPage + " 頁"; lbCurrentPage.Text = "第 " + _currentPageIndex + " 頁"; dataGridView1.DataSource = getCurrentRecords(_currentPageIndex); &#125;&#125; 畫面呈現 範例程式sample 的 github，不過程式碼我重新使用Visual Studio 2015寫過。]]></content>
      <categories>
        <category>程式技術筆記</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>WinForm</tag>
      </tags>
  </entry>
</search>
